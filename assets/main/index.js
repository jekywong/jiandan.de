System.register("chunks:///_virtual/achievement.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './save.ts', './singleton.ts', './data-core.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UtilTime, Save, Singleton, DataGameInst;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      UtilTime = module.UtilTime;
    }, function (module) {
      Save = module.Save;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      DataGameInst = module.DataGameInst;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "40889rxchBBdKZtoFL6Fbxb", "achievement", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Achievement = exports('Achievement', (_dec = ccclass('Achievement'), _dec(_class = /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(Achievement, _Singleton);

        function Achievement() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this.percent = 0;
          _this.unlockAllAchi = false;
          return _this;
        }

        var _proto = Achievement.prototype;

        _proto.init = function init() {
          var achievement = DataGameInst._data['achievement'];
          var achi_save = Save.Instance.get('achievement'); //if (achi_save === undefined) {

          Save.Instance._cur['achievement'] = {};
          achi_save = Save.Instance.get('achievement'); //} 

          for (var i = 0; i < achievement.length; i++) {
            var arch = achievement[i];
            var arch_save = achi_save[arch.name];
            if (arch_save === undefined) achi_save[arch.name] = {
              "name": arch.name,
              "condition": arch.condition,
              "value": arch.value,
              "percent": 0,
              "stat_value": 0
            };
          }

          Save.Instance._cur['achievement'] = achi_save;
          this.updateData();
        };

        _proto.totalTime = function totalTime() {
          var time = Save.Instance.statisticsValue('level_playTime');
          if (time === undefined) time = 0;
          time = UtilTime.toHours(time);
          return "" + time;
        };

        _proto.totalPercent = function totalPercent() {
          return this.percent;
        };

        _proto.getAchi = function getAchi(key) {
          var achievement = Save.Instance.get('achievement');
          return achievement[key];
        };

        _proto.updateData = function updateData() {
          var achi_save = Save.Instance.get('achievement');
          var statistics = Save.Instance.get('statistics');
          if (Save.Instance.get('achi_percent') === 1) return;
          var count = 1; //achi_save.forEach(arch => {

          for (var key in achi_save) {
            var achi = achi_save[key];

            if (achi['percent'] !== 1) {
              var stat_value = statistics[achi.value];
              if (stat_value === undefined) continue;
              if (stat_value > achi.condition) stat_value = achi.condition;
              achi['stat_value'] = stat_value;
              var arch_percent = stat_value / achi.condition;
              achi['percent'] = arch_percent;
              achi['unlock_time'] = UtilTime.yearMonth();
            }

            this.percent += achi['percent'];
            count++;
          }

          this.percent /= count;
          this.unlockAllAchi = this.percent === 1;
          Save.Instance._cur['achi_percent'] = this.percent;
        };

        return Achievement;
      }(Singleton)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/action.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ui.ts', './sound.ts', './msg.ts', './res-cache.ts', './g-scene.ts', './data-structure.ts', './res.ts', './fun.ts', './level.ts', './game.ts', './local.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, randomRangeInt, UI, Sound, Msg, ResCache, GScene, Queue, Res, fun, Level, Game, Local;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      randomRangeInt = module.randomRangeInt;
    }, function (module) {
      UI = module.UI;
    }, function (module) {
      Sound = module.Sound;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      GScene = module.GScene;
    }, function (module) {
      Queue = module.Queue;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      fun = module.fun;
    }, function (module) {
      Level = module.Level;
    }, function (module) {
      Game = module.Game;
    }, function (module) {
      Local = module.Local;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5afefP7ANpMSK26z0CCzDoz", "action", undefined);

      var Action = exports('Action', /*#__PURE__*/function () {
        function Action(name) {
          this._data = {};
          this._time = 0;
          this._index = 0;
          this._queue = Object.create(null);
          this._act = void 0;
          this._data = ResCache.Instance.getJson(name).json;
          this._queue = new Queue(5);
        }

        var _proto = Action.prototype;

        _proto.on = function on(name) {
          this.push(name, 'start');
          Msg.emit('msg_stat_times', name);
        };

        _proto.off = function off(name) {
          this.push(name, 'end');
        };

        _proto.push = function push(name, state) {
          var action = this._data[name];

          if (action === undefined) {
            console.warn('Undefined action:', name);
            return;
          }

          var info = action[state];
          if (info === undefined) return;
          var group = new ActionGroup(info);

          this._queue.push(group);
        };

        _proto.pop = function pop() {
          this._act = this._queue.pop();
        };

        _proto.update = function update(deltaTime) {
          if (GScene.isLoadScene) return;

          if (this._act) {
            var _this$_act;

            this._act.time += deltaTime;
            var cur = (_this$_act = this._act) == null ? void 0 : _this$_act.data[this._act.idx];

            if (cur === undefined || this._act === undefined) {
              var _this$_act2;

              throw new Error("Error actor action index: " + ((_this$_act2 = this._act) == null ? void 0 : _this$_act2.idx));
            }

            if (this._act.time >= cur.time) {
              UtilAction["do"](cur.name, cur.data);
              this._act.idx += 1;

              if (this._act.idx >= this._act.data.length) {
                this._act = undefined;
              }
            }
          } else {
            if (!this._queue.empty()) this.pop();
          }
        };

        return Action;
      }());
      var ActionParallel = exports('ActionParallel', /*#__PURE__*/function () {
        function ActionParallel(name) {
          this._data = {};
          this._time = 0;
          this._index = 0;
          this._act = void 0;
          this._actions = [];
          this._data = ResCache.Instance.getJson(name).json;
        }

        var _proto2 = ActionParallel.prototype;

        _proto2.on = function on(name) {
          this.push(name, 'start');
          Msg.emit('msg_stat_times', name);
        };

        _proto2.off = function off(name) {
          this.push(name, 'end');
        };

        _proto2.push = function push(name, state) {
          var action = this._data[name];

          if (action === undefined) {
            console.error('Undefined action:', name);
            return;
          }

          var info = action[state];
          var group = new ActionGroup(info);

          this._actions.push(group);
        };

        _proto2.update = function update(deltaTime) {
          var count = this._actions.length;
          if (count <= 0) return;

          for (var i = count - 1; i >= 0; i--) {
            var element = this._actions[i];
            element.time += deltaTime;
            var cur = element.data[element.idx];

            if (element.time >= cur.time) {
              UtilAction["do"](cur.name, cur.data);
              element.idx += 1;

              if (element.idx >= element.data.length) {
                this._actions.splice(i, 1);
              }
            }
          }
        };

        return ActionParallel;
      }());
      var ActionActor = exports('ActionActor', /*#__PURE__*/function (_Action) {
        _inheritsLoose(ActionActor, _Action);

        function ActionActor(name, actor) {
          var _this;

          _this = _Action.call(this, name) || this;
          _this._actor = void 0;
          _this._actor = actor;
          return _this;
        }

        var _proto3 = ActionActor.prototype;

        _proto3.on = function on(name) {
          _Action.prototype.on.call(this, name);

          Msg.emit('msg_stat_times', name);
        };

        _proto3.update = function update(deltaTime) {
          if (GScene.isLoadScene) return;

          if (this._act) {
            this._act.time += deltaTime;
            var length = this._act.data.length;

            for (var i = this._act.idx; i < length; i++) if (!this.checkRunAction()) break;
          } else {
            if (!this._queue.empty()) this.pop();
          }
        };

        _proto3.checkRunAction = function checkRunAction() {
          var _this$_act3,
              _this2 = this;

          var cur = (_this$_act3 = this._act) == null ? void 0 : _this$_act3.data[this._act.idx];

          if (cur === undefined || this._act === undefined) {
            var _this$_act4;

            throw new Error("Error actor action index: " + ((_this$_act4 = this._act) == null ? void 0 : _this$_act4.idx));
          }

          if (this._act.time >= cur.time) {
            if (cur.delay > 0) {
              fun.delay(function () {
                UtilAction["do"](cur.name, cur.data, _this2._actor);
              }, cur.delay);
            } else {
              UtilAction["do"](cur.name, cur.data, this._actor);
            }

            this._act.idx += 1;

            if (this._act.idx >= this._act.data.length) {
              this._act = undefined;
            }

            this._actor.actionEnd();

            return true;
          }

          return false;
        };

        return ActionActor;
      }(Action));
      var ActionActorEquip = exports('ActionActorEquip', /*#__PURE__*/function (_Action2) {
        _inheritsLoose(ActionActorEquip, _Action2);

        function ActionActorEquip(name, actor) {
          var _this3;

          _this3 = _Action2.call(this, name) || this;
          _this3._actor = void 0;
          _this3._actor = actor;
          return _this3;
        }

        var _proto4 = ActionActorEquip.prototype;

        _proto4.on = function on(name) {
          _Action2.prototype.on.call(this, name);

          if (this._actor.isPlayer) {
            Msg.emit('msg_stat_times', name);
          }
        };

        _proto4.update = function update(deltaTime) {
          if (GScene.isLoadScene) return;

          if (this._act) {
            this._act.time += deltaTime;
            var length = this._act.data.length;

            for (var i = this._act.idx; i < length; i++) if (!this.checkRunAction()) break;
          } else {
            if (!this._queue.empty()) this.pop();
          }
        };

        _proto4.checkRunAction = function checkRunAction() {
          var _this$_act5,
              _this4 = this;

          var cur = (_this$_act5 = this._act) == null ? void 0 : _this$_act5.data[this._act.idx];

          if (cur === undefined || this._act === undefined) {
            var _this$_act6;

            throw new Error("Error actor action index: " + ((_this$_act6 = this._act) == null ? void 0 : _this$_act6.idx));
          }

          if (this._act.time >= cur.time) {
            if (cur.delay > 0) {
              fun.delay(function () {
                UtilActionEquip["do"](cur.name, cur.data, _this4._actor);
              }, cur.delay);
            } else {
              UtilActionEquip["do"](cur.name, cur.data, this._actor);
            }

            this._act.idx += 1;

            if (this._act.idx >= this._act.data.length) {
              this._act = undefined;
            }

            this._actor.actionEnd();

            return true;
          }

          return false;
        };

        return ActionActorEquip;
      }(Action));
      var ActionQueue = exports('ActionQueue', /*#__PURE__*/function (_Action3) {
        _inheritsLoose(ActionQueue, _Action3);

        function ActionQueue() {
          return _Action3.apply(this, arguments) || this;
        }

        var _proto5 = ActionQueue.prototype;

        _proto5.update = function update(deltaTime) {
          if (GScene.isLoadScene) return;

          if (this._act) {
            this._act.time += deltaTime;
            var cur = this._act.data[this._act.idx];

            if (this._act.time >= cur.time) {
              UtilAction["do"](cur.name, cur.data);
              this._act.idx += 1;

              if (this._act.idx >= this._act.data.length) {
                this._act = undefined;
              }
            }
          } else {
            if (!this._queue.empty()) this.pop();
          }
        };

        return ActionQueue;
      }(Action));
      var ActionGroup = exports('ActionGroup', function ActionGroup(info) {
        this.data = void 0;
        this.time = 0;
        this.idx = 0;
        this.data = info;
      });
      var UtilAction = exports('UtilAction', /*#__PURE__*/function () {
        function UtilAction() {}

        UtilAction["do"] = function _do(name, key, actor) {
          if (actor === void 0) {
            actor = undefined;
          }

          var action = this[name];

          if (action) {
            action(key, actor);
          } else {
            console.warn('Not defined action:' + name);
          }
        };

        UtilAction.on_check_preload = function on_check_preload() {
          if (GScene.isPreload) GScene.isLoadScene = true;
        };

        UtilAction.on_scene = function on_scene(key) {
          GScene.Load(key, function () {});
        };

        UtilAction.off_scene = function off_scene(key) {};

        UtilAction.on_ui = function on_ui(key) {
          UI.Instance.on(key);
        };

        UtilAction.off_ui = function off_ui(key) {
          UI.Instance.off(key);
        };

        UtilAction.on_sfx = function on_sfx(key) {
          Sound.on(key);
        };

        UtilAction.off_sfx = function off_sfx(key) {
          Sound.off(key);
        };

        UtilAction.on_sfxing = function on_sfxing(key, volume) {
          if (volume === void 0) {
            volume = 1;
          }

          Sound.playLoop(key, volume);
        };

        UtilAction.off_sfxing = function off_sfxing(key) {
          Sound.offing(key);
        };

        UtilAction.on_bgm = function on_bgm(key) {
          Sound.onBGM(key);
        };

        UtilAction.off_bgm = function off_bgm(key) {
          Sound.offBGM(key);
        };

        UtilAction.update_bgm = function update_bgm() {
          Sound.updateBGM();
        };

        UtilAction.on_msg = function on_msg(key) {
          Msg.emit(key);
        };

        UtilAction.on_msg_num = function on_msg_num(data, actor) {
          Msg.emit(data.key, data.value);
        };

        UtilAction.on_msg_str = function on_msg_str(data) {
          Msg.emit(data.key, data.value);
        };

        UtilAction.on_msg_str_local = function on_msg_str_local(data, actor) {
          Msg.emit(data.key, Local.Instance.get(data.value));
        };

        UtilAction.on_inst_scene = function on_inst_scene(key) {
          var asset = ResCache.Instance.getPrefab(key);
          var obj = Res.inst(asset, Level.Instance._objectNode);
          obj.setPosition(0, 0, 0);
        };

        UtilAction.on_inst = function on_inst(key, actor) {
          var asset = ResCache.Instance.getPrefab(key);
          var obj = Res.inst(asset, Level.Instance._objectNode);

          if (actor !== undefined && actor._view) {
            obj.parent = actor._view;
            obj.setPosition(0, 0, 0);
          }
        };

        UtilAction.on_inst_pool = function on_inst_pool(key) {
          var asset = ResCache.Instance.getPrefab(key);
          var obj = Res.inst(asset, Game.Instance._poolNode);
          obj.setPosition(0, 0, 0);
        };

        UtilAction.off_inst = function off_inst(key, actor) {};

        UtilAction.on_inst_fx = function on_inst_fx(data, actor) {
          var res = data.res;
          var bone = data.bone;
          var asset = ResCache.Instance.getPrefab(res);
          var obj = Res.inst(asset, Level.Instance._objectNode);

          if (actor !== undefined && actor._view) {
            var bone_node = actor.node.getChildByName(bone);
            obj.parent = bone_node;
            obj.setPosition(0, 0, 0);
          }
        };

        UtilAction.off_inst_fx = function off_inst_fx(data, actor) {
          var res = data.res;
          var bone = data.bone;

          if (actor !== undefined && actor._view !== null) {
            var _actor$node$getChildB;

            var off_fx = (_actor$node$getChildB = actor.node.getChildByName(bone)) == null ? void 0 : _actor$node$getChildB.getChildByName(res);
            if (off_fx) off_fx.emit('setDestroy');
          }
        };

        UtilAction.on_active = function on_active(data, actor) {
          actor.setActive(data);
        };

        UtilAction.on_fx = function on_fx(data, actor) {
          actor.onFx(data);
        };

        UtilAction.on_buff = function on_buff(data, actor) {//actor.onBuff(data);
        };

        UtilAction.set_fx = function set_fx(data, actor) {
          actor.setFx(data);
        };

        UtilAction.on_ani = function on_ani(key, actor) {
          if (actor._anim) actor._anim.play(key);else console.log('Not register SkeletalAnimation');
        };

        UtilAction.on_anig = function on_anig(data, actor) {
          if (actor._animationGraph && actor._animationGraph.play) {
            actor._animationGraph.play(data.key, data.value);
          } else console.log('Not register animationGraph.');
        };

        UtilAction.on_set = function on_set(data, actor) {
          //console.log(`on set key:${data.key}  value:${data.value}`);
          actor._data[data.key] = data.value;
        };

        UtilAction.off_set = function off_set(key, actor) {
          actor._data[key] = false;
        };

        UtilAction.on_add = function on_add(data, actor) {
          console.log(data);

          for (var k in data) {
            console.log(k);
            actor._data[k] += data[k];
          }
        };

        UtilAction.on_mul = function on_mul(data, actor) {
          console.log(data);

          for (var k in data) {
            console.log(k);
            actor._data[k] *= data[k];
          }
        };

        UtilAction.on_com = function on_com(key, actor) {
          actor.node.addComponent(key);
        };

        UtilAction.on_call = function on_call(key, actor) {
          actor[key]();
        };

        return UtilAction;
      }());
      var UtilActionEquip = exports('UtilActionEquip', /*#__PURE__*/function () {
        function UtilActionEquip() {}

        UtilActionEquip["do"] = function _do(name, key, actor) {
          if (actor === void 0) {
            actor = undefined;
          }

          var action = this[name];

          if (action) {
            action(key, actor);
          } else {
            console.warn('Not defined action:' + name);
          }
        };

        UtilActionEquip.on_check_preload = function on_check_preload() {
          if (GScene.isPreload) GScene.isLoadScene = true;
        };

        UtilActionEquip.on_scene = function on_scene(key) {
          GScene.Load(key, function () {});
        };

        UtilActionEquip.off_scene = function off_scene(key) {};

        UtilActionEquip.on_ui = function on_ui(key) {
          UI.Instance.on(key);
        };

        UtilActionEquip.off_ui = function off_ui(key) {
          UI.Instance.off(key);
        };

        UtilActionEquip.on_sfx = function on_sfx(key) {
          Sound.on(key);
        };

        UtilActionEquip.on_sfx_random = function on_sfx_random(data) {
          var key = data.key;
          var range = data.value;
          var sfx = key + "_" + randomRangeInt(0, range);
          Sound.on(sfx);
        };

        UtilActionEquip.off_sfx = function off_sfx(key) {
          Sound.off(key);
        };

        UtilActionEquip.on_sfxing = function on_sfxing(key, volume) {
          if (volume === void 0) {
            volume = 1;
          }

          Sound.playLoop(key, volume);
        };

        UtilActionEquip.off_sfxing = function off_sfxing(key) {
          Sound.offing(key);
        };

        UtilActionEquip.on_bgm = function on_bgm(key) {
          Sound.onBGM(key);
        };

        UtilActionEquip.off_bgm = function off_bgm(key) {
          Sound.offBGM(key);
        };

        UtilActionEquip.update_bgm = function update_bgm() {
          Sound.updateBGM();
        };

        UtilActionEquip.on_msg = function on_msg(key) {
          Msg.emit(key);
        };

        UtilActionEquip.on_msg_num = function on_msg_num(data, actor) {
          Msg.emit(data.key, data.value);
        };

        UtilActionEquip.on_msg_str = function on_msg_str(data) {
          Msg.emit(data.key, data.value);
        };

        UtilActionEquip.on_msg_str_local = function on_msg_str_local(data, actor) {
          Msg.emit(data.key, Local.Instance.get(data.value));
        };

        UtilActionEquip.on_inst_scene = function on_inst_scene(key) {
          var asset = ResCache.Instance.getPrefab(key);
          var obj = Res.inst(asset, Level.Instance._objectNode);
          obj.setPosition(0, 0, 0);
        };

        UtilActionEquip.on_inst = function on_inst(key, actor) {
          var asset = ResCache.Instance.getPrefab(key);
          var obj = Res.inst(asset, Level.Instance._objectNode);

          if (actor && actor._viewRoot) {
            obj.parent = actor._viewRoot;
            obj.setPosition(0, 0, 0);
          }
        };

        UtilActionEquip.off_inst = function off_inst(key, actor) {};

        UtilActionEquip.on_inst_fx = function on_inst_fx(data, actor) {
          var res = data.res;
          var bone = data.bone;
          var asset = ResCache.Instance.getPrefab(res);
          var obj = Res.inst(asset, Level.Instance._objectNode);

          if (actor !== undefined && actor._view !== null) {
            var bone_node = actor.node.getChildByName(bone);
            obj.parent = bone_node;
            obj.setPosition(0, 0, 0);
          }
        };

        UtilActionEquip.off_inst_fx = function off_inst_fx(data, actor) {
          var res = data.res;
          var bone = data.bone;

          if (actor !== undefined && actor._view !== null) {
            var _actor$node$getChildB2;

            var off_fx = (_actor$node$getChildB2 = actor.node.getChildByName(bone)) == null ? void 0 : _actor$node$getChildB2.getChildByName(res);
            if (off_fx) off_fx.emit('setDestroy');
          }
        };

        UtilActionEquip.on_active = function on_active(data, actor) {
          actor.setActive(data);
        };

        UtilActionEquip.on_fx = function on_fx(data, actor) {
          actor.onFx(data);
        };

        UtilActionEquip.on_buff = function on_buff(data, actor) {//actor.onBuff(data);
        };

        UtilActionEquip.set_fx = function set_fx(data, actor) {
          actor.setFx(data);
        };

        UtilActionEquip.on_anig = function on_anig(data, actor) {
          if (actor._animationGraph) actor._animationGraph.play(data.key, data.value);else console.log('Not register animationGraph.');
        };

        UtilActionEquip.on_set = function on_set(data, actor) {
          actor._data[data.key] = data.value;
        };

        UtilActionEquip.off_set = function off_set(key, actor) {
          actor._data[key] = false;
        };

        UtilActionEquip.on_add = function on_add(data, actor) {
          console.log(data);

          for (var k in data) {
            console.log(k);
            actor._data[k] += data[k];
          }
        };

        UtilActionEquip.on_mul = function on_mul(data, actor) {
          console.log(data);

          for (var k in data) {
            console.log(k);
            actor._data[k] *= data[k];
          }
        };

        UtilActionEquip.on_call = function on_call(key, actor) {
          actor[key]();
        };

        return UtilActionEquip;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-animation-graph-group.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-animation-graph.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, ActorAnimationGraph;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      ActorAnimationGraph = module.ActorAnimationGraph;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a16cfECKupHAYIDleIbLuiL", "actor-animation-graph-group", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorAnimationGraphGroup = exports('ActorAnimationGraphGroup', (_dec = ccclass('ActorAnimationGraphGroup'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorAnimationGraphGroup, _Component);

        function ActorAnimationGraphGroup() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._groups = void 0;
          return _this;
        }

        var _proto = ActorAnimationGraphGroup.prototype;

        _proto.__preload = function __preload() {
          this._groups = this.getComponentsInChildren(ActorAnimationGraph);

          if (this._groups === undefined || this._groups === null) {
            throw new Error(this.node.name + " node not find ActorAnimationGraph");
          }
        };

        _proto.play = function play(key, value) {
          console.log('ActorAnimationGraphGroup', key, value);

          for (var i = 0; i < this._groups.length; i++) {
            this._groups[i].play(key, value);
          }
        };

        return ActorAnimationGraphGroup;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-animation-graph.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, animation, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      animation = module.animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fbeacJjQuZEAbtmtlaKymUK", "actor-animation-graph", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorAnimationGraph = exports('ActorAnimationGraph', (_dec = ccclass('ActorAnimationGraph'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorAnimationGraph, _Component);

        function ActorAnimationGraph() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._graph = void 0;
          return _this;
        }

        var _proto = ActorAnimationGraph.prototype; //_actor: Actor = Object.create(null);

        _proto.start = function start() {
          // [3]
          this._graph = this.getComponent(animation.AnimationController); //this._actor = this.node.parent.parent.getComponent(Actor);

          if (this._graph === undefined || this._graph === null) {
            throw new Error(this.node.name + " can not find AnimationController");
          }
        };

        _proto.play = function play(key, value) {
          var _this$_graph;

          (_this$_graph = this._graph) == null ? void 0 : _this$_graph.setValue(key, value);
        };

        _proto.setValue = function setValue(key, value) {
          var _this$_graph2;

          (_this$_graph2 = this._graph) == null ? void 0 : _this$_graph2.setValue(key, value);
        };

        _proto.update = function update(deltaTime) {//     // [4]
          //this.play('speed', this._actor._data.cur_speed);
          //this.play('move_speed', this._actor._data.cur_speed + 0.5);
          //this.play('is_ground', this._actor._data.is_ground);
        };

        return ActorAnimationGraph;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-animator-contorller.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SkeletalAnimation, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SkeletalAnimation = module.SkeletalAnimation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7acb11oPfRMPYvENyeWzZHr", "actor-animator-contorller", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorAnimatorController = exports('ActorAnimatorController', (_dec = ccclass('ActorAnimatorController'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorAnimatorController, _Component);

        function ActorAnimatorController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._anim = Object.create(null);
          _this._data = Object.create(null);
          return _this;
        }

        var _proto = ActorAnimatorController.prototype;

        _proto.init = function init(_data) {
          this._data = _data;
          this._anim = this.getComponent(SkeletalAnimation);
        };

        _proto.play = function play(name) {
          var anims = this._data[name];

          this._anim.play(anims[0]);
        };

        return ActorAnimatorController;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-axe.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-equip-base.ts', './damage-core.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, geometry, PhysicsSystem, ActorEquipBase, calculateDamage;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      PhysicsSystem = module.PhysicsSystem;
    }, function (module) {
      ActorEquipBase = module.ActorEquipBase;
    }, function (module) {
      calculateDamage = module.calculateDamage;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "87a46XACzNEdpKUTmrMIVs4", "actor-axe", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorAxe = exports('ActorAxe', (_dec = ccclass('ActorAxe'), _dec(_class = /*#__PURE__*/function (_ActorEquipBase) {
        _inheritsLoose(ActorAxe, _ActorEquipBase);

        function ActorAxe() {
          return _ActorEquipBase.apply(this, arguments) || this;
        }

        var _proto = ActorAxe.prototype;

        _proto.onFire = function onFire() {
          this._bagData.bulletCount--;
          var forwardNode = this._actor._forwardNode;
          var origin = forwardNode.worldPosition;
          var dir = forwardNode.forward;
          var ray = new geometry.Ray(origin.x, origin.y, origin.z, dir.x, dir.y, dir.z);
          var mask = 1 << 3 | 1 << 4;
          var distance = this._data.damage.distance;
          var hit = undefined;

          if (PhysicsSystem.instance.raycastClosest(ray, mask, distance)) {
            hit = PhysicsSystem.instance.raycastClosestResult;
          }

          calculateDamage(this._data, hit);
        };

        return ActorAxe;
      }(ActorEquipBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-bag.ts", ['cc', './data-core.ts', './level.ts'], function (exports) {
  'use strict';

  var cclegacy, game, DataEquipInst, Level;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
    }, function (module) {
      DataEquipInst = module.DataEquipInst;
    }, function (module) {
      Level = module.Level;
    }],
    execute: function () {
      cclegacy._RF.push({}, "31aaeyr2DFMfrMfzAwNQLNe", "actor-bag", undefined);

      var ActorBag = exports('ActorBag', /*#__PURE__*/function () {
        // The character object to which the current bag belongs.
        // Bag capacity.
        // Bag usage count statistics.
        function ActorBag(actor) {
          this._actor = void 0;
          this._capacity = 0;
          this._usageCount = 0; // The character object to which the current equipment belongs.

          this._actor = actor; // Set Bag capacity.

          this._capacity = this._actor._data.bag_capacity; // Initialize the bag space and set the default value.

          this._actor._data.equipment_name_list = new Array(this._capacity);

          for (var i = 0; i < this._capacity; i++) {
            this._actor._data.equipment_name_list[i] = '';
          } // Set the default value of the bag.


          var bags = actor._data.bags;

          for (var _i = 0; _i < bags.length; _i++) {
            this.pickedItem(bags[_i]);
          }
        }
        /**
         * Get the index of the empty slot in the bag
         * @returns Returns the index of the corresponding empty slot, -1 means it cannot exist. 
         */


        var _proto = ActorBag.prototype;

        _proto.getEmptySlot = function getEmptySlot() {
          for (var i = 0; i < this._actor._data.equipment_name_list.length; i++) {
            var name = this._actor._data.equipment_name_list[i];
            if (name.length <= 0) return i;
          }

          return -1;
        }
        /**
         * The method is check picked same weapon then increase clip.
         * @param name Weapon name
         * @returns TRUE is same weapon increase clip, FALSE is not same weapon.
         */
        ;

        _proto.pickedSameWeaponIncreaseClips = function pickedSameWeaponIncreaseClips(name) {
          var bagItems = this._actor._data.items[name];

          if (bagItems) {
            //bagItems.bulletClipCount++;
            this._actor.bulletBox++;
            return true;
          }

          return false;
        }
        /**
         * The method picked bullet box.
         * @returns 
         */
        ;

        _proto.pickedBulletBox = function pickedBulletBox() {
          var _this$_actor$_actorEq;

          var bagItems = (_this$_actor$_actorEq = this._actor._actorEquipment) == null ? void 0 : _this$_actor$_actorEq.currentEquipItem;

          if (bagItems) {
            //bagItems.bulletClipCount++;
            this._actor.bulletBox += 2;
            return true;
          }

          return false;
        }
        /**
         * This method is used to pick up item.
         * @param name Pick item name.
         * @returns Picked state, true is picked, false is not picked.
         */
        ;

        _proto.pickedItem = function pickedItem(name) {
          // Get the current backpack item by name, may be empty.
          var bagItems = this._actor._data.items[name]; // Get information about equipment props.

          var equipData = DataEquipInst.get(name); // If the item already exists in the backpack and is stackable, run the stacking logic.

          if (bagItems && equipData.stackable) {
            this.stackItem(equipData.bullet_count);
          } else {
            // Get the current empty slot index and determine if it exists.
            var index = this.getEmptySlot();
            if (index === -1) return false; // Create a backpack item.

            this.createItem(equipData, name); // Update the value corresponding to the array index of the item slot

            this._actor._data.equipment_name_list[index] = name; // Accumulation of the number of uses.

            this._usageCount++;
          }

          return true;
        }
        /**
         * This method is used to discard the equipment currently held in your hand.
         * @returns Dropped status: true is success false is failure
         */
        ;

        _proto.dropItem = function dropItem() {
          var _this$_actor$_actorEq2, _this$_actor$_actorEq3; // Get the bag index of the currently held equipment.


          var curIndex = this._actor._data.current_equipment_index; // Determine if the current index is in the valid range.
          // Default 0 equipment is not drop.

          if (curIndex >= this._capacity || curIndex <= 0) return false; // Get it from the bag equipment list.

          var data = this._actor._data.equipment_name_list; //Get the name of the equipment in the current slot and determine if the equipment exists based on the name value.

          var name = data[curIndex];
          if (!name || name.length <= 0) return false; // Take off the prop that is being equipped.

          (_this$_actor$_actorEq2 = this._actor._actorEquipment) == null ? void 0 : _this$_actor$_actorEq2.unEquip(); // Clear specific items data.

          this._actor._data.items[name] = undefined; // Discard the current prop near the character.

          var pos = this._actor.node.worldPosition;
          Level.Instance.addDrop(name, pos); // Clears the value of the equipment list for the current index mapping.

          data[curIndex] = ''; // Replace the default equipment.

          this._actor._data.current_equipment_index = 0;
          (_this$_actor$_actorEq3 = this._actor._actorEquipment) == null ? void 0 : _this$_actor$_actorEq3.equip(0); // The total number of bags used decreases.

          this._usageCount--;
          return true;
        }
        /**
         * This method is used to create bag items.
         * @param equipData Current equip data.
         * @param name The name of the bag prop that needs to be created.
         */
        ;

        _proto.createItem = function createItem(equipData, name) {
          var newItems = {
            'name': name,
            'actor': this._actor,
            'stackable': equipData.stackable === undefined ? false : true,
            'count': 1,
            'data': equipData,
            'bulletClipCount': equipData.bullet_clip_count,
            'bulletCount': equipData.bullet_count,
            'lastUseTime': game.totalTime
          };
          this._actor._data.items[name] = newItems;
        }
        /**
         * This method is used to update the number of stackable props.
         * @param bagItems Current backpack information.
         */
        ;

        _proto.stackItem = function stackItem(bagItems) {
          bagItems.count++;
          bagItems.bulletCount += bagItems.data.bullet_count;
        };

        return ActorBag;
      }()); // The bag item data interface.

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-base.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './action.ts', './local.ts', './msg.ts', './res-cache.ts', './util.ts', './level.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, ParticleSystem, Vec3, Component, ActionActor, Local, Msg, ResCache, UtilNode, UtilVec3, Level;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem = module.ParticleSystem;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      ActionActor = module.ActionActor;
    }, function (module) {
      Local = module.Local;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      UtilNode = module.UtilNode;
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      Level = module.Level;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d0fffR4zwBGa7zh9DgsAkms", "actor-base", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorBase = exports('ActorBase', (_dec = ccclass('ActorBase'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorBase, _Component);

        function ActorBase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._action = void 0;
          _this._data = {};
          _this._updates = [];
          _this._dir = new Vec3(0, 0, 0);
          _this._curDir = new Vec3(0, 0, 0);
          _this._angleVertical = 0;
          _this._groupIndex = -1;
          _this.isPlayer = false;
          _this._anim = void 0;
          _this._animationGraph = void 0;
          _this._view = void 0;

          _this._actionUpdate = function () {};

          return _this;
        }

        var _proto = ActorBase.prototype;

        _proto.init = function init(actionName) {
          Object.assign(this._data, ResCache.Instance.getJson(actionName).json);
          this._action = new ActionActor(this._data.action, this);
          this._view = UtilNode.find(this.node, 'view');
          this.onBind();
          this.initView();
        };

        _proto.initView = function initView() {};

        _proto.onBind = function onBind() {
          this.node.on('do', this["do"], this);
        };

        _proto.offBind = function offBind() {
          this.node.off('do', this["do"], this);
        };

        _proto.onUpdate = function onUpdate() {};

        _proto.offUpdate = function offUpdate() {
          this._updates = [];
        };

        _proto.updateAttribute = function updateAttribute() {};

        _proto.onDestroy = function onDestroy() {
          this.offBind();
        };

        _proto["do"] = function _do(name) {
          if (this._action) this._action.on(name);
        };

        _proto.update = function update(deltaTime) {
          if (this._action) this._action.update(deltaTime);
          var count = this._updates.length;

          for (var i = 0; i < count; i++) this._updates[i](deltaTime);
        };

        _proto.setActive = function setActive(data) {
          var _this$node;

          var activeNode = this.node.getChildByName(data.key);
          if (activeNode) activeNode.active = data.value;else console.warn(" You want set undefined node active. " + ((_this$node = this.node) == null ? void 0 : _this$node.name) + "/" + data.key);
        };

        _proto.setFx = function setFx(data) {
          var pNode = UtilNode.find(this.node, data.key); //this.node.getChildByName(data.key);

          var particles = pNode == null ? void 0 : pNode.getComponentsInChildren(ParticleSystem);
          if (particles === undefined) return;

          for (var i = 0; i < particles.length; i++) {
            var p = particles[i];
            p.loop = data.value;
            if (data.value) p.play();
          }
        };

        _proto.onFx = function onFx(data) {
          var pNode = UtilNode.find(this.node, data); //this.node.getChildByName(data);

          var particles = pNode == null ? void 0 : pNode.getComponentsInChildren(ParticleSystem);
          if (particles === undefined) return;

          for (var i = 0; i < particles.length; i++) {
            var p = particles[i];
            p.play();
          }
        };

        _proto.actionEnd = function actionEnd() {};

        _proto.setDir = function setDir(dir) {
          UtilVec3.copy(this._dir, dir);
        };

        _proto.updateHP = function updateHP() {
          var percent_hp = this._data.hp / this._data.max_hp;
          this._data.is_low_hp = percent_hp < 0.5;
          Msg.emit('fil_hp', percent_hp);
        };

        _proto.onDead = function onDead() {
          var _this$node2;

          if (this._groupIndex !== -1) {
            Level.Instance.removeEnemy(this.node);
            Msg.emit('msg_remove_enemy', this._groupIndex);
            Msg.emit('msg_tips', "" + Local.Instance.get('killed_one'));
          }

          (_this$node2 = this.node) == null ? void 0 : _this$node2.destroy();
        };

        return ActorBase;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-brain.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './sensor-rays-angle.ts', './util.ts', './navigation-system.ts', './actor-input-brain.ts', './level.ts', './actor.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, random, game, Vec3, math, randomRange, randomRangeInt, Component, SensorRaysAngle, UtilVec3, NavSystem, ActorInputBrain, Level, Actor;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      random = module.random;
      game = module.game;
      Vec3 = module.Vec3;
      math = module.math;
      randomRange = module.randomRange;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
    }, function (module) {
      SensorRaysAngle = module.SensorRaysAngle;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      NavSystem = module.NavSystem;
    }, function (module) {
      ActorInputBrain = module.ActorInputBrain;
    }, function (module) {
      Level = module.Level;
    }, function (module) {
      Actor = module.Actor;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2fdf6FtIJFKYJiADMcY5lJ3", "actor-brain", undefined);

      var ccclass = _decorator.ccclass;
      var tempRotationSideVector = v3(0, 0, 0);
      var ActorBrain = exports('ActorBrain', (_dec = ccclass('ActorBrain'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorBrain, _Component);

        function ActorBrain() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._actor = void 0;
          _this._wayPoints = new Array();
          _this._moveDir = v3(0, 0, 0);
          _this.targetDirection = v3(0, 0, 0);
          _this.input = void 0;
          _this.sensorRays = void 0;
          _this.isFollowWayPointsMove = false;
          _this.currentWaypointsIndex = 1;
          _this.closestNavigationPon = -1;
          _this._targetNode = void 0;
          _this.targetPosition = v3(0, 0, 0);
          _this.waypointsFireIndex = -1;
          _this.waypointsFire = new Array();
          _this.fireDirection = v3(0, 0, 0);
          _this.reloadTime = 0;
          _this.followPathsDirection = 1;
          _this.fireWaitTime = 5;
          return _this;
        }

        var _proto = ActorBrain.prototype;

        _proto.start = function start() {
          this._actor = this.getComponent(Actor);
          this.input = this.getComponent(ActorInputBrain);
          var sensorNode = this.node.getChildByName('sensor_target');
          this.sensorRays = sensorNode.getComponent(SensorRaysAngle);
          this.closestNavigationPon = this._actor._data.nearest;

          if (this._actor === undefined || this.input === undefined || this.sensorRays === undefined) {
            throw new Error(this.node.name + " node lose components : ActorBase or ActorInputBrain.");
          }
        };

        _proto.onMove = function onMove() {
          this.input.onMove(this._moveDir);
          this.input.onRotation(this.targetDirection.x, this.targetDirection.z);
          this.input.onRun(random() < 0.05);
        };

        _proto.onJump = function onJump() {
          var _this$input;

          (_this$input = this.input) == null ? void 0 : _this$input.onJump();
        };

        _proto.onCrouch = function onCrouch() {
          var _this$input2;

          (_this$input2 = this.input) == null ? void 0 : _this$input2.onCrouch();
        };

        _proto.onProne = function onProne() {
          var _this$input3;

          (_this$input3 = this.input) == null ? void 0 : _this$input3.onProne();
        };

        _proto.onFire = function onFire() {
          var _this$input4;

          (_this$input4 = this.input) == null ? void 0 : _this$input4.onFire();
        };

        _proto.update = function update(deltaTime) {
          var _this$_actor, _Level$Instance$_play;

          if (Level.Instance.stop) return; // Not ready returns do not execute the following logic.

          if (!this._actor.isReady) return; // If you die, you will return without executing the logic of your brain.

          if ((_this$_actor = this._actor) != null && _this$_actor._data.is_dead) return; // Returns without executing brain logic if the player dies.

          var player = Level.Instance._player;
          if (!player || (_Level$Instance$_play = Level.Instance._player) != null && _Level$Instance$_play._data.is_dead) return; // Check near has player.

          this.checkNearPlayer(); // Test to open and close enemy fire.
          //this._targetNode = undefined;
          //console.log('target node:', this._targetNode);
          // Go target position.
          // Find target look at target and shoot.

          if (this._targetNode !== undefined) {
            this.shootFire();
          } else {
            var _this$input5; // Random move and find target.


            this.randomMove();
            (_this$input5 = this.input) == null ? void 0 : _this$input5.onAim(false);
          }
        };

        _proto.shootFire = function shootFire() {
          var _this$_actor2, _this$_actor2$_actorE, _this$_actor2$_actorE2, _this$input7;

          var angle = this.checkPlayerAngle(); // Fire move.

          this.moveFire(angle); // Wait reload weapon.

          if (this.reloadTime > 0) {
            this.reloadTime -= game.deltaTime;
            return;
          } // Check bullet empty.


          if ((_this$_actor2 = this._actor) != null && (_this$_actor2$_actorE = _this$_actor2._actorEquipment) != null && (_this$_actor2$_actorE2 = _this$_actor2$_actorE.currentEquip) != null && _this$_actor2$_actorE2.isBulletEmpty) {
            var _this$input6; // Reload Bullet.


            (_this$input6 = this.input) == null ? void 0 : _this$input6.onReload();
            this.reloadTime = 3;
            return;
          }

          (_this$input7 = this.input) == null ? void 0 : _this$input7.onAim(true); // Check fire.

          this.checkFire(angle);
        };

        _proto.randomMove = function randomMove() {
          this.waypointsFireIndex = -1;

          if (this.isFollowWayPointsMove) {
            this.PathsFollowing();
          } else {
            this.calculateNextPosition();
          }
        };

        _proto.PathsFollowing = function PathsFollowing() {
          if (this.isFollowWayPointsMove) {
            this._actor._actorMove.faceMove = true;
            var worldPosition = this._actor.node.worldPosition;
            var target = this._wayPoints[this.currentWaypointsIndex];
            UtilVec3.copy(this.targetPosition, target); // Detect distance to target point.

            if (Vec3.distance(worldPosition, target) <= 1) {
              // Arrive current node.
              this.currentWaypointsIndex += this.followPathsDirection;
              if (this.currentWaypointsIndex >= this._wayPoints.length || this.currentWaypointsIndex < 0) this.isFollowWayPointsMove = false;else this.closestNavigationPon = this._wayPoints[this.currentWaypointsIndex].id;
            } else {
              var _this$sensorRays; // Detects if there is a character ahead.


              if ((_this$sensorRays = this.sensorRays) != null && _this$sensorRays.checkedNode) {
                //this.followPathsDirection = -1;
                //Calculate checked node direction.
                UtilVec3.copy(this.targetDirection, this.sensorRays.checkedNode.worldPosition);
                this.targetDirection.y = this.node.worldPosition.y;
                var checkDirection = this.targetDirection.clone();
                checkDirection.subtract(this.node.worldPosition); //Calculate checked node side.

                var side = -this.targetDirection.clone().cross(this.node.forward).y; //Calculate normal vector.

                var normal = checkDirection.clone();
                normal.cross(side > 0 ? v3(0, -1, 0) : v3(0, 1, 0)); //Calculate new target direction.

                this.targetDirection.add(normal);
              } else {
                // Calculate move direction.
                UtilVec3.copy(this.targetDirection, this.targetPosition); //this.followPathsDirection = 1;
              }

              this.targetDirection.y = worldPosition.y;
              this.targetDirection.subtract(worldPosition).normalize(); // Set target move.

              this._moveDir.x = -this.targetDirection.x;
              this._moveDir.y = 0;
              this._moveDir.z = -this.targetDirection.z; // Calculates the rotation angle of the target.

              this.lookAtTarget(this._moveDir);
              this._moveDir.x = 0;
              this._moveDir.y = 0;
              this._moveDir.z = 1; // 

              this.onMove(); // Random Jump.
              //if (random() < 0.05) this.onJump();
            }
          }
        };

        _proto.followTargetPaths = function followTargetPaths() {};

        _proto.lookAtTarget = function lookAtTarget(lookAtDirection) {
          UtilVec3.copy(tempRotationSideVector, lookAtDirection);
          var angle = Math.abs(Vec3.angle(lookAtDirection, this.node.forward));

          if (angle > 0.001) {
            var side = Math.sign(-tempRotationSideVector.cross(this.node.forward).y);
            this.targetDirection.x = side * angle; // game.deltaTime;

            this.targetDirection.z = 0;
          }
        };

        _proto.moveFire = function moveFire(angle) {
          this._actor._actorMove.faceMove = false;

          if (this.waypointsFireIndex === -1) {
            this.closestNavigationPon = NavSystem.findNearest(this._actor.node.worldPosition);
            NavSystem.randomFirePath(this.waypointsFire, this.closestNavigationPon);
            this.waypointsFireIndex = 0;
          }

          var worldPosition = this._actor.node.worldPosition;
          var target = this.waypointsFire[this.waypointsFireIndex];
          UtilVec3.copy(this.targetPosition, target);
          var targetDistance = Vec3.distance(worldPosition, target); //console.log('target distance:', targetDistance);

          if (targetDistance <= 1) {
            // Next way
            this.waypointsFireIndex++;

            if (this.waypointsFireIndex >= this.waypointsFire.length) {
              this.closestNavigationPon = NavSystem.findNearest(this._actor.node.worldPosition);
              NavSystem.randomFirePath(this.waypointsFire, this.closestNavigationPon);
              this.waypointsFireIndex = 0;
              target = this.waypointsFire[this.waypointsFireIndex];
            }
          } // Calculate move direction.


          UtilVec3.copy(this.targetDirection, this.targetPosition);
          this.targetDirection.y = worldPosition.y; // Calculate angle speed.

          var angleSpeed = angle < 5 ? 0.5 : 1.5;
          this.targetDirection.subtract(worldPosition).normalize().multiplyScalar(angleSpeed);
          this._moveDir.x = -this.targetDirection.x;
          this._moveDir.y = 0;
          this._moveDir.z = -this.targetDirection.z; // Look at direction.

          var player = Level.Instance._player;
          UtilVec3.copy(this.targetDirection, worldPosition);
          this.targetDirection.y += player._data.is_crouch ? 0.3 : 1;
          this.targetDirection.subtract(player.node.worldPosition).normalize();
          this.lookAtTarget(this.targetDirection);
          this.onMove(); //if (random() < 0.1) this.onJump();
        };

        _proto.checkPlayerAngle = function checkPlayerAngle() {
          var _this$_actor3; // Check shoot angle.


          var player = Level.Instance._player;
          var forward = (_this$_actor3 = this._actor) == null ? void 0 : _this$_actor3.node.forward; //this._actor?._forwardNode!.forward!;

          UtilVec3.copy(this.fireDirection, player.node.worldPosition);
          this.fireDirection.subtract(this._actor.node.worldPosition);
          var angle = math.toDegree(Vec3.angle(forward, this.fireDirection));
          return angle;
        };

        _proto.checkFire = function checkFire(angle) {
          // Brain wait fire logic.
          this.fireWaitTime -= game.deltaTime;
          if (this.fireWaitTime > 0) return;
          this.fireWaitTime = randomRange(0.3, 1.3);
          if (angle < 10) this.onFire();
        };

        _proto.freePathMove = function freePathMove() {
          NavSystem.randomPaths(this._wayPoints, this._actor.node.worldPosition, randomRangeInt(5, 10), this.closestNavigationPon); //Navigation.calculateRandomPoint(this._actor!.node.worldPosition);

          console.log('this._wayPoints:', this._wayPoints);
          this.isFollowWayPointsMove = true;
          this.currentWaypointsIndex = 0;
        };

        _proto.fleeTarget = function fleeTarget() {// calculate flee.
        };

        _proto.followTarget = function followTarget() {
          // calculate target.
          NavSystem.findPaths(this._wayPoints, this._actor.node.worldPosition, this.closestNavigationPon, Level.Instance._player.node.worldPosition);
        };

        _proto.checkNearPlayer = function checkNearPlayer() {
          var player = Level.Instance._player;
          if (!player) return undefined;
          var data = this._actor._data;
          var distance = Vec3.distance(player.node.worldPosition, this._actor.node.worldPosition); //console.log('target distance:', distance, ' nearby distance:', data._ai_nearby_distance);

          if (distance < data.ai_nearby_distance) {
            this._targetNode = player.node;
          } else {
            this._targetNode = undefined;
          }
        };

        _proto.calculateNextPosition = function calculateNextPosition() {
          NavSystem.randomPaths(this._wayPoints, this._actor.node.worldPosition, randomRangeInt(5, 10));

          if (this._wayPoints.length === 0) {
            console.warn(this.node.name + " can not find path");
            return;
          } //console.log('this._wayPoints:', this._wayPoints);


          this.isFollowWayPointsMove = true;
          this.currentWaypointsIndex = 0;
        };

        return ActorBrain;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-crossbow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-equip-base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, ActorEquipBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      ActorEquipBase = module.ActorEquipBase;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5e88bG7rXpPQpQXM9RcthFZ", "actor-crossbow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorCrossbow = exports('ActorCrossbow', (_dec = ccclass('ActorCrossbow'), _dec(_class = /*#__PURE__*/function (_ActorEquipBase) {
        _inheritsLoose(ActorCrossbow, _ActorEquipBase);

        function ActorCrossbow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ActorEquipBase.call.apply(_ActorEquipBase, [this].concat(args)) || this;
          _this._pointShoot = void 0;
          return _this;
        }

        var _proto = ActorCrossbow.prototype;

        _proto.start = function start() {
          this._pointShoot = this.node.getChildByName('point_shoot');
        };

        _proto.onDestroy = function onDestroy() {};

        _proto.update = function update(deltaTime) {};

        return ActorCrossbow;
      }(ActorEquipBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-enemy-gun.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-equip-base.ts', './damage-core.ts', './util.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, geometry, PhysicsSystem, ActorEquipBase, calculateDamage, UtilVec3;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      PhysicsSystem = module.PhysicsSystem;
    }, function (module) {
      ActorEquipBase = module.ActorEquipBase;
    }, function (module) {
      calculateDamage = module.calculateDamage;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e3635TDq7ZKc7JAm2Ip1xHk", "actor-enemy-gun", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ray = new geometry.Ray();
      var ActorEnemyGun = exports('ActorEnemyGun', (_dec = ccclass('ActorEnemyGun'), _dec(_class = /*#__PURE__*/function (_ActorEquipBase) {
        _inheritsLoose(ActorEnemyGun, _ActorEquipBase);

        function ActorEnemyGun() {
          return _ActorEquipBase.apply(this, arguments) || this;
        }

        var _proto = ActorEnemyGun.prototype;
        /**
         * Execute fire.
         */

        _proto.onFire = function onFire() {
          var _this$_actor;

          if (!((_this$_actor = this._actor) != null && _this$_actor._forwardNode)) return; // The number of bullets is reduced by one.

          this._bagData.bulletCount--; // Get the weapon shooting direction node.

          var forwardNode = this._actor._forwardNode; // Get Weapon Shooting Points

          var origin = forwardNode.worldPosition; // Get the weapon shooting direction.

          var shootDirection = forwardNode.forward; // Set physical ray detection parameters.

          UtilVec3.copy(ray.o, origin);
          UtilVec3.copy(ray.d, shootDirection); // Get weapon range.

          var distance = this._data.damage.distance; // Start physical shot detection.

          var hit;

          if (PhysicsSystem.instance.raycastClosest(ray, this.mask, distance)) {
            hit = PhysicsSystem.instance.raycastClosestResult;
          } // Show Tracer line.


          this.showTracer(hit, shootDirection); // Calculates shot damage.

          calculateDamage(this._data, hit);
        };

        return ActorEnemyGun;
      }(ActorEquipBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-equip-base.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './action.ts', './util.ts', './msg.ts', './fx-base.ts', './fx.ts', './local.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, game, randomRange, Component, ActionActorEquip, UtilNode, UtilVec3, Msg, FxBase, fx, Local;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      game = module.game;
      randomRange = module.randomRange;
      Component = module.Component;
    }, function (module) {
      ActionActorEquip = module.ActionActorEquip;
    }, function (module) {
      UtilNode = module.UtilNode;
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      FxBase = module.FxBase;
    }, function (module) {
      fx = module.fx;
    }, function (module) {
      Local = module.Local;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e03a7kAZPFDNqTbtmPEpmKL", "actor-equip-base", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var tracerEndPosition = v3(0, 0, 0);
      var ActorEquipBase = exports('ActorEquipBase', (_dec = ccclass('ActorEquipBase'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorEquipBase, _Component);

        function ActorEquipBase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.point_shoot = void 0;
          _this._animationGraph = void 0;
          _this._view = void 0;
          _this._bagData = void 0;
          _this._data = {};
          _this._action = void 0;
          _this._actor = void 0;
          _this.isPlayer = false;
          _this.fxMuzzle = void 0;
          _this.isBulletEmpty = false;
          _this.mask = 1 << 2 | 1 << 3 | 1 << 4;
          return _this;
        }

        var _proto = ActorEquipBase.prototype;

        _proto.__preload = function __preload() {
          this.point_shoot = this.node.getChildByName('point_shoot');
          this.fxMuzzle = UtilNode.find(this.node, 'fx_muzzle').getComponent(FxBase);
          this._view = this.node.getChildByName('view');
          this.node.on('do', this["do"], this);
          this.node.on('init', this.init, this);
        };

        _proto.init = function init(bagData) {
          this._actor = bagData.actor;
          this._bagData = bagData;
          this._data = this._bagData.data;
          this._action = new ActionActorEquip(this._data.action, this);
          this._bagData.lastUseTime = game.totalTime / 1000;
          this.isPlayer = this._actor.isPlayer;
          this._animationGraph = this._actor._animationGraph;
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off('do', this["do"], this);
          this.node.off('init', this.init, this);
        };

        _proto["do"] = function _do(name) {
          if (this._action) {
            if (name === 'fire' && !this.checkUse()) return;

            this._action.on(name);
          }
        };

        _proto.checkAutoFire = function checkAutoFire() {
          var _this$_actor;

          if ((_this$_actor = this._actor) != null && _this$_actor._data.is_auto_fire) {
            this["do"]("fire");
          }
        };

        _proto.update = function update(deltaTime) {
          var _this$_action;

          (_this$_action = this._action) == null ? void 0 : _this$_action.update(deltaTime);
        };

        _proto.setActive = function setActive(data) {
          var _this$node;

          var activeNode = this.node.getChildByName(data.key);
          if (activeNode) activeNode.active = data.value;else console.warn(" You want set undefined node active. " + ((_this$node = this.node) == null ? void 0 : _this$node.name) + "/" + data.key);
        };

        _proto.hiddenNode = function hiddenNode() {
          this.node.active = false;
        };

        _proto.setFx = function setFx(data) {
          fx.playLoop(this.node, data.key, data.value);
        };

        _proto.showMuzzle = function showMuzzle() {
          var _this$fxMuzzle;

          (_this$fxMuzzle = this.fxMuzzle) == null ? void 0 : _this$fxMuzzle.play();
        };

        _proto.onFx = function onFx(name) {
          fx.play(this.node, name);
        }
        /**
         * Weapon recoil method
         */
        ;

        _proto.onRecoil = function onRecoil() {
          var _this$_actor2; // Get the recoil ratio.
          // Aim state gets a specific value based on the gun's data, non-Aim state defaults to one.


          var recoil_rate = this._actor._data.is_aim ? this._data.recoil_aim_rate : 1; // Random recoil offset is performed.

          var recoilX = randomRange(this._data.recoil_x[0], this._data.recoil_x[1]) * recoil_rate;
          var recoilY = randomRange(this._data.recoil_y[0], this._data.recoil_y[1]) * recoil_rate; // Set the offset of the recoil.

          (_this$_actor2 = this._actor) == null ? void 0 : _this$_actor2.onRotation(recoilX, recoilY);
        }
        /**
         * Display the current infrared tracking path.
         * @param hit The location of the detection point.
         * @param dir The direction of the target point.
         */
        ;

        _proto.showTracer = function showTracer(hit, dir) {
          // Get the world coordinates of the firing point.
          var origin = this.fxMuzzle.node.worldPosition; // The physical hit point exists set as the end coordinate.

          if (hit != null && hit.hitPoint) {
            UtilVec3.copy(tracerEndPosition, hit.hitPoint);
          } else {
            // If the physical hit point does not exist, the end point is extended by 100 units in the direction of fire.
            UtilVec3.copy(tracerEndPosition, origin);
            tracerEndPosition.add3f(dir.x * 100, dir.y * 100, dir.z * 100);
          } //console.log(origin, dir, tracerEndPosition);


          Msg.emit('msg_set_tracer', {
            start: origin,
            end: tracerEndPosition
          });
        };

        _proto.actionEnd = function actionEnd() {};

        _proto.checkUse = function checkUse() {
          // Check bullet count.
          this.isBulletEmpty = this._bagData.bulletCount <= 0 && this._bagData.data.bullet_count !== -1;

          if (this.isBulletEmpty) {
            this["do"]('fire_empty');
            return false;
          }

          var lastUseTime = this._bagData.lastUseTime;
          var timeSpace = (game.totalTime - lastUseTime) / 1000;
          return timeSpace >= this._data.damage.cooling;
        };

        _proto.updateCooling = function updateCooling() {
          this._bagData.lastUseTime = game.totalTime;
        };

        _proto.checkFullBullet = function checkFullBullet() {
          var _this$_bagData;

          if (this._bagData.bulletCount == ((_this$_bagData = this._bagData) == null ? void 0 : _this$_bagData.data.bullet_count)) {
            Msg.emit('msg_tips', "" + Local.Instance.get('bullet_is_full'));
            return true;
          }

          return false;
        };

        _proto.onReload = function onReload() {
          if (!this._actor) return;

          if (this._actor.bulletBox > 0) {
            var _this$_bagData2; //this._bagData!.bulletClipCount--;


            this._actor.bulletBox--;
            if (this._actor.bulletBox < 0) this._actor.bulletBox = 0;
            this._bagData.bulletCount = (_this$_bagData2 = this._bagData) == null ? void 0 : _this$_bagData2.data.bullet_count;
            this.isBulletEmpty = false;
          } else {
            Msg.emit('msg_tips', "" + Local.Instance.get('clip_is_null'));
          }
        };

        _proto.onUse = function onUse() {};

        return ActorEquipBase;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-equipment.ts", ['cc', './msg.ts', './res.ts', './res-cache.ts', './util.ts', './fun.ts', './actor-equip-base.ts'], function (exports) {
  'use strict';

  var cclegacy, math, game, Msg, Res, ResCache, UtilNode, fun, ActorEquipBase;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      math = module.math;
      game = module.game;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      UtilNode = module.UtilNode;
    }, function (module) {
      fun = module.fun;
    }, function (module) {
      ActorEquipBase = module.ActorEquipBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "74f98UsRHZC9pmTPSWWn7y/", "actor-equipment", undefined);

      var ActorEquipment = exports('ActorEquipment', /*#__PURE__*/function () {
        // The character object to which the current equipment belongs.
        // A pool of cached equipment objects.
        //The purpose is to avoid the creation and destruction of objects at runtime.
        // Dictionary of weapon skeleton nodes for mounted equipment.
        // Current equipment node.
        // bag information of current equipment.
        // The component object of the current weapon.
        // The stability value of the equipment.
        // The purpose is to describe the stability value of the shot.
        // This value affects the size of the aiming area of the shot.
        function ActorEquipment(actor) {
          this._actor = void 0;
          this.equipPool = {};
          this.equipBoneNode = {};
          this.currentEquipNode = void 0;
          this.currentEquipItem = void 0;
          this.currentEquip = void 0;
          this.stableValue = 1; // Initialize the Actor object corresponding to the equipment manager passed in.

          this._actor = actor; // Get all node maps with the name 'weapon_root'.

          this.equipBoneNode = UtilNode.getChildrenByNameBlur(this._actor.node, 'weapon_root'); // Initialize the cache pool for the equipment list.

          var equipmentList = this._actor._data.cache_equipment_list; // Get the length of the equipment list.

          var length = equipmentList.length;

          for (var i = 0; i < length; i++) {
            // Get the equipment name from the current index.
            var weaponName = equipmentList[i]; // Get the prefab of the equipment from the resource buffer pool.

            var prefab = ResCache.Instance.getPrefab(weaponName + '_tps'); // Get the bone node of the equipment.

            var bindNode = this.equipBoneNode[this._actor._data.weapon_bone]; // Instantiate the game object and set the parent node to the bone node.

            var nodePrefab = Res.inst(prefab, bindNode); // Set the object pool key to map to this instantiated weapon object.

            this.equipPool[weaponName] = nodePrefab; // Set the activity of this cache object to false.

            nodePrefab.active = false;
          } // Equip the default weapon.


          this.equip(actor._data.default_equip_index);
        }

        var _proto = ActorEquipment.prototype;

        _proto.equip = function equip(replaceEquipmentIndex) {
          var _this = this; // Get the current bag equipment index.


          var currentEquipmentIndex = this._actor._data.current_equipment_index; // If the current bag index is the same as the updated bag index, 
          // true is no need to switch weapons, false is need to switch weapons.

          if (currentEquipmentIndex !== replaceEquipmentIndex) {
            // Get bag equipment name list from player data.
            var equipment_name_list = this._actor._data.equipment_name_list; // Get the name of the equipment name to be switched from the equipment list.

            var changeEquipmentName = equipment_name_list[replaceEquipmentIndex]; // Return false if the equipment does not exist or is not empty to cancel switching equipment.

            if (!changeEquipmentName || changeEquipmentName.length <= 0) return false; // Uninstall current equipment.

            this.unEquip(); // Replace new equipment data and models.
            // Here you need to do a time delay with the animation.

            var self = this;
            fun.delay(function () {
              var _self$currentEquipNod;

              var items = self._actor._data.items;
              self.currentEquipNode = self.equipPool[changeEquipmentName];
              self.currentEquipItem = items[changeEquipmentName];
              self.currentEquipNode.active = true;
              self.currentEquipNode.emit('init', _this.currentEquipItem);
              self.currentEquipNode.emit('do', 'take_out');
              self._actor._data.current_equipment_index = replaceEquipmentIndex;
              self.currentEquip = (_self$currentEquipNod = self.currentEquipNode) == null ? void 0 : _self$currentEquipNod.getComponent(ActorEquipBase);

              if (_this._actor.isPlayer) {
                //const mainCamera = CameraSetting.main?.camera;
                //if(mainCamera) mainCamera.fov = this.currentEquipItem!.fov;
                Msg.emit('msg_change_equip');
                Msg.emit('msg_update_equip_info');
              }
            }, 0.3);
            return true;
          } else {
            return false;
          }
        }
        /**
         * Uninstall current equipment.
         */
        ;

        _proto.unEquip = function unEquip() {
          //Get the index of the current equipment.s
          var currentEquipmentIndex = this._actor._data.current_equipment_index; // Compare whether the current equipment index value is -1.
          // An index of -1 means no current equipment, skip setting.

          if (currentEquipmentIndex !== -1) {
            // Get a list of equipment names.
            var equipment_name_list = this._actor._data.equipment_name_list; // Get the current equipment name.

            var currentEquipmentName = equipment_name_list[currentEquipmentIndex]; // Whether the current equipment name exists.
            // false means it does not exist, the return function does not uninstall the equipment

            if (!currentEquipmentName) {
              var _this$_actor;

              console.warn("The equipment index that does not exist, the index id is " + currentEquipmentIndex + ", the object is " + ((_this$_actor = this._actor) == null ? void 0 : _this$_actor.node.name));
              return;
            } // Get the current equipment object node from the equipment object pool.


            var currentEquipmentNode = this.equipPool[currentEquipmentName]; //Whether the object pool contains equipment objects.

            if (currentEquipmentNode) {
              // Notify the equipment node to perform recovery behavior.
              currentEquipmentNode.emit('do', 'take_back');
            } else {
              console.warn("");
            }
          }
        }
        /**
         * Execution equipment action.
         * @param action Name of the execution action.
         */
        ;

        _proto["do"] = function _do(action) {
          var _this$currentEquipNod; // Execute the current equipment action.


          (_this$currentEquipNod = this.currentEquipNode) == null ? void 0 : _this$currentEquipNod.emit('do', action);
        }
        /**
         * Update to set the range of Aim.
         * @param normalizeCharacterMoveSpeed Normalized character movement speed.
         * @param toMax The aim range is set to the maximum value: true is set, false is not set. 
         */
        ;

        _proto.updateAim = function updateAim(normalizeCharacterMoveSpeed, toMax) {
          if (toMax === void 0) {
            toMax = false;
          }

          if (this.currentEquipItem === undefined) {
            if (this.stableValue !== 0) {
              this.stableValue = 0;
              if (this._actor.isPlayer) Msg.emit('msg_update_aim', this.stableValue);
            }
          } else {
            var equipData = this.currentEquipItem.data;
            var equipStable = equipData.stable_max_value;
            var currentStable = 0;

            if (toMax) {
              this.stableValue = equipData.stable_max_value;
              currentStable = equipData.stable_max_value;
            } else {
              if (equipStable !== 0) {
                currentStable = Math.abs(normalizeCharacterMoveSpeed) <= 0.001 ? equipData.stable_min_value : equipData.stable_max_value * normalizeCharacterMoveSpeed;
                currentStable = Math.max(equipData.stable_min_value, currentStable);
              }

              this.stableValue = math.lerp(this.stableValue, currentStable, game.deltaTime * equipData.stable_smooth);
            }

            if (this._actor.isPlayer) Msg.emit('msg_update_aim', this.stableValue);
          }
        };

        return ActorEquipment;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-face.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './actor-move.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCFloat, v3, math, Component, UtilVec3, ActorMove;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCFloat = module.CCFloat;
      v3 = module.v3;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      ActorMove = module.ActorMove;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "d7147wbmLFMe7umNHco0sw5", "actor-face", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorFace = exports('ActorFace', (_dec = ccclass('ActorFace'), _dec2 = property(Node), _dec3 = property({
        type: ActorMove,
        tooltip: 'Test actor move.'
      }), _dec4 = property(CCFloat), _dec5 = property(CCFloat), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorFace, _Component);

        function ActorFace() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "rotationNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "actorMove", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smoothAngle", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smoothHeight", _descriptor4, _assertThisInitialized(_this));

          _this.targetAngle = v3(0, 0, 0);
          _this.currentAngle = v3(0, 0, 0);
          _this.targetPosition = v3(0, 0, 0);
          _this.currentPosition = v3(0, 0, 0);
          return _this;
        }

        var _proto = ActorFace.prototype;

        _proto.start = function start() {
          UtilVec3.copy(this.targetAngle, this.rotationNode.eulerAngles);
          UtilVec3.copy(this.currentAngle, this.targetAngle);
          UtilVec3.copy(this.targetPosition, this.rotationNode.position);
          UtilVec3.copy(this.currentAngle, this.targetPosition);
        };

        _proto.update = function update(deltaTime) {
          var _this$rotationNode, _this$rotationNode2;

          this.rotationX(this.actorMove.angleVertical);
          this.currentAngle.x = math.lerp(this.currentAngle.x, this.targetAngle.x, this.smoothAngle * deltaTime);
          (_this$rotationNode = this.rotationNode) == null ? void 0 : _this$rotationNode.setRotationFromEuler(this.currentAngle);
          this.currentPosition.y = math.lerp(this.currentPosition.y, this.targetPosition.y, this.smoothHeight * deltaTime);
          (_this$rotationNode2 = this.rotationNode) == null ? void 0 : _this$rotationNode2.setPosition(this.currentPosition);
        };

        _proto.rotationX = function rotationX(angleX) {
          this.targetAngle.x = angleX;
        };

        _proto.setRootY = function setRootY(height) {
          this.targetPosition.y = height;
        };

        return ActorFace;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "rotationNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "actorMove", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "smoothAngle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "smoothHeight", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-follow-path-move.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "11a17e44/ZM8pmh7+TPj4bj", "actor-follow-path-move", undefined);

      var ccclass = _decorator.ccclass;
      var ActorFollowPathMove = exports('ActorFollowPathMove', (_dec = ccclass('ActorFollowPathMove'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorFollowPathMove, _Component);

        function ActorFollowPathMove() {
          return _Component.apply(this, arguments) || this;
        }

        return ActorFollowPathMove;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-grenade.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-equip-base.ts', './res.ts', './res-cache.ts', './projectile-grenade.ts', './level.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, ActorEquipBase, Res, ResCache, ProjectileGrenade, Level;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
    }, function (module) {
      ActorEquipBase = module.ActorEquipBase;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      ProjectileGrenade = module.ProjectileGrenade;
    }, function (module) {
      Level = module.Level;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "aeef2VVpNJLY5ylnl63G0o0", "actor-grenade", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorGrenade = exports('ActorGrenade', (_dec = ccclass('ActorGrenade'), _dec(_class = /*#__PURE__*/function (_ActorEquipBase) {
        _inheritsLoose(ActorGrenade, _ActorEquipBase);

        function ActorGrenade() {
          return _ActorEquipBase.apply(this, arguments) || this;
        }

        var _proto = ActorGrenade.prototype;

        _proto.onFire = function onFire() {
          var forwardNode = this._actor._forwardNode;
          var origin = forwardNode.worldPosition;
          var dir = forwardNode.forward;
          var prefab = ResCache.Instance.getPrefab(this._data.projectile_res);
          var position = v3(origin.x, origin.y, origin.z);
          position.add(dir);
          var projectile = Res.instNode(prefab, Level.Instance._objectNode, position);
          var projectileGrenade = projectile.getComponent(ProjectileGrenade);
          var throwDir = dir.multiplyScalar(10);
          projectileGrenade == null ? void 0 : projectileGrenade.onThrow(this._data, throwDir, this._actor);
        };

        return ActorGrenade;
      }(ActorEquipBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-handgun.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-equip-base.ts', './damage-core.ts', './util.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, geometry, PhysicsSystem, ActorEquipBase, calculateDamage, UtilVec3;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      PhysicsSystem = module.PhysicsSystem;
    }, function (module) {
      ActorEquipBase = module.ActorEquipBase;
    }, function (module) {
      calculateDamage = module.calculateDamage;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "84405vmlmBO84kE1VAOHbv6", "actor-handgun", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ray = new geometry.Ray();
      var ActorHandgun = exports('ActorHandgun', (_dec = ccclass('ActorHandgun'), _dec(_class = /*#__PURE__*/function (_ActorEquipBase) {
        _inheritsLoose(ActorHandgun, _ActorEquipBase);

        function ActorHandgun() {
          return _ActorEquipBase.apply(this, arguments) || this;
        }

        var _proto = ActorHandgun.prototype;

        _proto.onFire = function onFire() {
          this._bagData.bulletCount--;
          var forwardNode = this._actor._forwardNode;
          var origin = forwardNode.worldPosition;
          var dir = forwardNode.forward;
          UtilVec3.copy(ray.o, origin);
          UtilVec3.copy(ray.d, dir);
          var distance = this._data.damage.distance;
          var hit;

          if (PhysicsSystem.instance.raycastClosest(ray, this.mask, distance)) {
            hit = PhysicsSystem.instance.raycastClosestResult;
          }

          this.showTracer(hit, dir);
          calculateDamage(this._data, hit, this._actor);
        };

        return ActorHandgun;
      }(ActorEquipBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-input-brain.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, Actor;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Actor = module.Actor;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9a7794VGPBGDpf47jYvUBqo", "actor-input-brain", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorInputBrain = exports('ActorInputBrain', (_dec = ccclass('ActorInputBrain'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorInputBrain, _Component);

        function ActorInputBrain() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._actor = void 0;
          _this._isPause = false;
          return _this;
        }

        var _proto = ActorInputBrain.prototype;

        _proto.start = function start() {
          this._actor = this.getComponent(Actor);

          if (this._actor === null) {
            throw new Error(this.node.name + " node can not find ActorEnemy");
          }
        };

        _proto.onMove = function onMove(move) {
          var _this$_actor;

          (_this$_actor = this._actor) == null ? void 0 : _this$_actor.onMove(move);
        };

        _proto.onRotation = function onRotation(x, y) {
          var _this$_actor2;

          (_this$_actor2 = this._actor) == null ? void 0 : _this$_actor2.onRotation(x, y);
        };

        _proto.onDir = function onDir(x, y) {
          var _this$_actor3;

          (_this$_actor3 = this._actor) == null ? void 0 : _this$_actor3.onDir(x, y);
        };

        _proto.onJump = function onJump() {
          var _this$_actor4;

          (_this$_actor4 = this._actor) == null ? void 0 : _this$_actor4.onJump();
        };

        _proto.onRun = function onRun(isRun) {
          var _this$_actor5;

          (_this$_actor5 = this._actor) == null ? void 0 : _this$_actor5.onRun(isRun);
        };

        _proto.onCrouch = function onCrouch() {
          var _this$_actor6;

          (_this$_actor6 = this._actor) == null ? void 0 : _this$_actor6.onCrouch();
        };

        _proto.onProne = function onProne() {//this._actor?.onProne();
        };

        _proto.onAim = function onAim(isAim) {
          var _this$_actor7;

          (_this$_actor7 = this._actor) == null ? void 0 : _this$_actor7.onAim(isAim);
        };

        _proto.onChangeEquips = function onChangeEquips() {
          throw new Error('Method not implemented.');
        };

        _proto.onFire = function onFire() {
          var _this$_actor8;

          (_this$_actor8 = this._actor) == null ? void 0 : _this$_actor8.onFire();
        };

        _proto.onEquip = function onEquip(index) {
          var _this$_actor9;

          (_this$_actor9 = this._actor) == null ? void 0 : _this$_actor9.onEquip(index);
        };

        _proto.onPick = function onPick() {
          var _this$_actor10;

          (_this$_actor10 = this._actor) == null ? void 0 : _this$_actor10.onPick();
        };

        _proto.onReload = function onReload() {
          var _this$_actor11;

          (_this$_actor11 = this._actor) == null ? void 0 : _this$_actor11.onReload();
        };

        _proto.onDrop = function onDrop() {
          var _this$_actor12;

          (_this$_actor12 = this._actor) == null ? void 0 : _this$_actor12.onDrop();
        };

        _proto.onPause = function onPause() {};

        return ActorInputBrain;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-input.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './level.ts', './msg.ts', './ui.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, Component, Level, Msg, UI;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      Level = module.Level;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      UI = module.UI;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "01c09MbFBBOMaVVPRCTuZwT", "actor-input", undefined);

      var ccclass = _decorator.ccclass;
      var ActorInput = exports('ActorInput', (_dec = ccclass('ActorInput'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorInput, _Component);

        function ActorInput() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._actor = void 0;
          _this._isPause = false;
          _this._isOpenEquips = false;
          return _this;
        }

        var _proto = ActorInput.prototype;

        _proto.start = function start() {
          Msg.on('msg_set_input_active', this.setActive.bind(this));
          ActorInput.inst = this;
          Msg.on('msg_exit_pointer', this.exitPointer.bind(this));
        };

        _proto.exitPointer = function exitPointer() {
          document.exitPointerLock();
        };

        _proto.onDestroy = function onDestroy() {
          Msg.off('msg_set_input_active', this.setActive.bind(this));
          Msg.off('msg_exit_pointer', this.exitPointer.bind(this));

          if (sys.platform === sys.Platform.MOBILE_BROWSER || sys.platform === sys.Platform.ANDROID || sys.platform === sys.Platform.IOS) {
            UI.Instance.off('ui_joystick');
          }
        };

        _proto.setActive = function setActive(isShow) {
          if (isShow) {
            this.initInput();
          } else {
            for (var i = 0; i < this.node.children.length; i++) this.node.children[i].active = false;

            UI.Instance.off('ui_joystick');
          }
        };

        _proto.initInput = function initInput() {
          this._actor = Level.Instance._player; // Select the type of input device enabled based on the platform.

          if (sys.platform === sys.Platform.MOBILE_BROWSER || sys.platform === sys.Platform.ANDROID || sys.platform === sys.Platform.IOS) {
            UI.Instance.on('ui_joystick');
          } else {
            this.node.children[1].active = true;
            this.node.children[0].active = true; //UI.Instance.on('ui_joystick');
          }
        };

        _proto.onMove = function onMove(move) {
          var _this$_actor;

          (_this$_actor = this._actor) == null ? void 0 : _this$_actor.onMove(move);
        };

        _proto.onRotation = function onRotation(x, y) {
          var _this$_actor2;

          (_this$_actor2 = this._actor) == null ? void 0 : _this$_actor2.onRotation(x, y);
        };

        _proto.onJump = function onJump() {
          var _this$_actor3;

          (_this$_actor3 = this._actor) == null ? void 0 : _this$_actor3.onJump();
        };

        _proto.onRun = function onRun(isRun) {
          var _this$_actor4;

          (_this$_actor4 = this._actor) == null ? void 0 : _this$_actor4.onRun(isRun);
        };

        _proto.onCrouch = function onCrouch() {
          var _this$_actor5;

          (_this$_actor5 = this._actor) == null ? void 0 : _this$_actor5.onCrouch();
        };

        _proto.onAim = function onAim() {
          var _this$_actor6;

          (_this$_actor6 = this._actor) == null ? void 0 : _this$_actor6.onAim(undefined);
        };

        _proto.onFire = function onFire() {
          var _this$_actor7;

          (_this$_actor7 = this._actor) == null ? void 0 : _this$_actor7.onFire();
        };

        _proto.onAutoFire = function onAutoFire(isAutoFire) {
          var _this$_actor8;

          (_this$_actor8 = this._actor) == null ? void 0 : _this$_actor8.onAutoFire(isAutoFire);
        };

        _proto.onEquip = function onEquip(index) {
          var _this$_actor9;

          (_this$_actor9 = this._actor) == null ? void 0 : _this$_actor9.onEquip(index);
        };

        _proto.onPick = function onPick() {
          var _this$_actor10;

          (_this$_actor10 = this._actor) == null ? void 0 : _this$_actor10.onPick();
        };

        _proto.onReload = function onReload() {
          var _this$_actor11;

          (_this$_actor11 = this._actor) == null ? void 0 : _this$_actor11.onReload();
        };

        _proto.onDrop = function onDrop() {
          var _this$_actor12;

          (_this$_actor12 = this._actor) == null ? void 0 : _this$_actor12.onDrop();
        };

        _proto.onDir = function onDir(x, y) {};

        _proto.onPause = function onPause() {
          this._isPause = !this._isPause;
          Msg.emit('push', 'level_pause');
        };

        _proto.onChangeEquips = function onChangeEquips() {
          Msg.emit('push', 'select_equips');
          return true;
        };

        return ActorInput;
      }(Component), _class2.inst = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-interface.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "92104FiaI1OLrtZm0vpahcL", "actor-interface", undefined);

      var DamageData = exports('DamageData', function DamageData() {
        this.hitPart = void 0;
        this.hitDistance = void 0;
        this.fireData = void 0;
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-items.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bccb4KGCkdLp4PwckmEAX8R", "actor-items", undefined);

      var ccclass = _decorator.ccclass;
      var ActorItem = exports('ActorItem', (_dec = ccclass('ActorItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorItem, _Component);

        function ActorItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.data = void 0;
          _this.item = void 0;
          return _this;
        }

        var _proto = ActorItem.prototype;

        _proto.start = function start() {};

        return ActorItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-lookat.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component, UtilNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      UtilNode = module.UtilNode;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "9a855v+MrJGRJngc67wZaM9", "actor-lookat", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorLookAt = exports('ActorLookAt', (_dec = ccclass('ActorLookAt'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorLookAt, _Component);

        function ActorLookAt() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bone_name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bone_head", _descriptor2, _assertThisInitialized(_this));

          _this._angle = 0;
          _this._dir = 1;
          return _this;
        }

        var _proto = ActorLookAt.prototype;

        _proto.start = function start() {
          this.bone_head = UtilNode.find(this.node, this.bone_name);
        };

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          var _this$bone_head;

          (_this$bone_head = this.bone_head) == null ? void 0 : _this$bone_head.setRotationFromEuler(this._angle, 0, 0);
        };

        return ActorLookAt;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bone_name", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'bone_root';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bone_head", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return Object.create(null);
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-machine-gun.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-equip-base.ts', './damage-core.ts', './util.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, geometry, PhysicsSystem, ActorEquipBase, calculateDamage, UtilVec3;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      PhysicsSystem = module.PhysicsSystem;
    }, function (module) {
      ActorEquipBase = module.ActorEquipBase;
    }, function (module) {
      calculateDamage = module.calculateDamage;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d1de3133u1FBqWbaaiwq/Dy", "actor-machine-gun", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ray = new geometry.Ray();
      var ActorMachineGun = exports('ActorMachineGun', (_dec = ccclass('ActorMachineGun'), _dec(_class = /*#__PURE__*/function (_ActorEquipBase) {
        _inheritsLoose(ActorMachineGun, _ActorEquipBase);

        function ActorMachineGun() {
          return _ActorEquipBase.apply(this, arguments) || this;
        }

        var _proto = ActorMachineGun.prototype;

        _proto.onFire = function onFire() {
          this._bagData.bulletCount--;
          var forwardNode = this._actor._forwardNode;
          var origin = forwardNode.worldPosition;
          var dir = forwardNode.forward;
          UtilVec3.copy(ray.o, origin);
          UtilVec3.copy(ray.d, dir);
          var distance = this._data.damage.distance;
          var hit;

          if (PhysicsSystem.instance.raycastClosest(ray, this.mask, distance)) {
            hit = PhysicsSystem.instance.raycastClosestResult;
          }

          this.showTracer(hit, dir);
          calculateDamage(this._data, hit, this._actor);
        };

        return ActorMachineGun;
      }(ActorEquipBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-main.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "fa586se66dJFL/MRNNbvyZO", "actor-main", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorMain = exports('ActorMain', (_dec = ccclass('ActorMain'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorMain, _Component);

        function ActorMain() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = ActorMain.prototype;

        _proto.start = function start() {
          ActorMain.target = this.node;
        };

        _proto.update = function update(deltaTime) {};

        return ActorMain;
      }(Component), _class2.target = Object.create(null), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-melee-weapon.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-equip-base.ts', './damage-core.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, geometry, PhysicsSystem, ActorEquipBase, calculateDamage;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      PhysicsSystem = module.PhysicsSystem;
    }, function (module) {
      ActorEquipBase = module.ActorEquipBase;
    }, function (module) {
      calculateDamage = module.calculateDamage;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4bb2849/HJC6rO7tSJB+h0F", "actor-melee-weapon", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorMeleeWeapon = exports('ActorMeleeWeapon', (_dec = ccclass('ActorMeleeWeapon'), _dec(_class = /*#__PURE__*/function (_ActorEquipBase) {
        _inheritsLoose(ActorMeleeWeapon, _ActorEquipBase);

        function ActorMeleeWeapon() {
          return _ActorEquipBase.apply(this, arguments) || this;
        }

        var _proto = ActorMeleeWeapon.prototype;

        _proto.onFire = function onFire() {
          this._bagData.bulletCount--;
          var forwardNode = this._actor._forwardNode;
          var origin = forwardNode.worldPosition;
          var dir = forwardNode.forward;
          var ray = new geometry.Ray(origin.x, origin.y, origin.z, dir.x, dir.y, dir.z);
          var mask = 1 << 3 | 1 << 4;
          var distance = this._data.damage.distance;
          var hit = undefined;

          if (PhysicsSystem.instance.raycastClosest(ray, mask, distance)) {
            hit = PhysicsSystem.instance.raycastClosestResult;
          }

          calculateDamage(this._data, hit, this._actor);
        };

        return ActorMeleeWeapon;
      }(ActorEquipBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-move-slope.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Vec3, v3, PhysicsSystem, geometry, Component, UtilVec3;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      v3 = module.v3;
      PhysicsSystem = module.PhysicsSystem;
      geometry = module.geometry;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ab95dwRddFBYan4djoZ8kId", "actor-move-slope", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorMoveSlope = exports('ActorMoveSlope', (_dec = ccclass('ActorMoveSlope'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorMoveSlope, _Component);

        function ActorMoveSlope() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.ray = new geometry.Ray();
          _this.mask = 0;
          _this.distance = 0.4;
          _this.p0 = v3(0, 0, 0);
          _this.p1 = v3(0, 0, 0);
          _this.direction = v3(0, 0, 0);
          return _this;
        }

        var _proto = ActorMoveSlope.prototype;

        _proto.start = function start() {
          this.mask = 1 << 3 | 1 << 4;
          UtilVec3.copy(this.ray.d, Vec3.ZERO);
          this.ray.d = v3(0, -1, 0);
          this.distance = 0.3;
        };

        _proto.updateSlope = function updateSlope(moveDirection) {
          var moveLength = moveDirection.length();
          if (moveLength === 0) return Vec3.ZERO;
          UtilVec3.copy(this.ray.o, this.node.worldPosition);
          UtilVec3.copy(this.direction, moveDirection);

          if (PhysicsSystem.instance.raycastClosest(this.ray, this.mask, this.distance)) {
            var hit1 = PhysicsSystem.instance.raycastClosestResult;
            UtilVec3.copy(this.p0, hit1.hitPoint);
            this.ray.o.add(moveDirection.normalize().multiplyScalar(0.03));

            if (PhysicsSystem.instance.raycastClosest(this.ray, this.mask, this.distance)) {
              var hit2 = PhysicsSystem.instance.raycastClosestResult;
              UtilVec3.copy(this.direction, hit2.hitPoint);
              this.direction.subtract(this.p0).normalize().multiplyScalar(moveLength);
            }
          }

          return this.direction;
        };

        return ActorMoveSlope;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-move.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './sensor-slope.ts', './sensor-ground.ts', './level.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, CCFloat, Vec3, RigidBody, math, Component, UtilVec3, SensorSlope, SensorGround, Level;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      CCFloat = module.CCFloat;
      Vec3 = module.Vec3;
      RigidBody = module.RigidBody;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      SensorSlope = module.SensorSlope;
    }, function (module) {
      SensorGround = module.SensorGround;
    }, function (module) {
      Level = module.Level;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "b31a5kDRyND84FJnozP5Ljo", "actor-move", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var tempRotationSideVector = v3(0, 0, 0);
      var ActorMove = exports('ActorMove', (_dec = ccclass('ActorMove'), _dec2 = property({
        type: CCFloat,
        tooltip: 'Move Speed. '
      }), _dec3 = property({
        tooltip: 'Jump Force.'
      }), _dec4 = property({
        type: CCFloat,
        tooltip: 'Move smooth value.'
      }), _dec5 = property({
        type: CCFloat,
        tooltip: 'Default angle value'
      }), _dec6 = property({
        type: SensorSlope,
        tooltip: ' Sensor slope.'
      }), _dec7 = property({
        type: SensorGround,
        tooltip: ' Sensor ground.'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorMove, _Component);

        function ActorMove() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "speed", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "jumpForce", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smoothMove", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "angleVertical", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sensorSlop", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sensorGround", _descriptor6, _assertThisInitialized(_this));

          _this.velocity = v3(0, 0, 0);
          _this.velocityLocal = v3(0, 0, 0);
          _this.currentVelocity = v3(0, 0, 0);
          _this.moveVec3 = new Vec3(0, 0, 0);
          _this.currentDirection = v3(0, 0, 0);
          _this.direction = v3(0, 0, 0);
          _this.angleHead = 0;
          _this.rigid = void 0;

          _initializerDefineProperty(_this, "angleVerticalMax", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "angleVerticalMin", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "faceMove", _descriptor9, _assertThisInitialized(_this));

          _this.angle = 0;
          _this.isJump = false;
          _this.isStopMove = false;
          return _this;
        }

        var _proto = ActorMove.prototype;

        _proto.start = function start() {
          this.rigid = this.getComponent(RigidBody);
          this.sensorSlop = this.getComponent(SensorSlope);
          this.sensorGround = this.getComponent(SensorGround);
          this.node.setRotationFromEuler(0, 180, 0);
          this.onRotation(180, 0);
        };

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          if (Level.Instance.stop) {
            this.stop();
            return;
          }

          if (this.isStopMove) return;
          this.movePosition(deltaTime);
          this.moveRotation();
        };

        _proto.movePosition = function movePosition(deltaTime) {
          var _this$rigid, _this$sensorGround, _this$rigid2; //Lerp velocity.


          Vec3.lerp(this.velocityLocal, this.velocityLocal, this.moveVec3, deltaTime * this.smoothMove);
          UtilVec3.copy(this.velocity, this.velocityLocal); //rotate y.

          if (this.faceMove) Vec3.rotateY(this.velocity, this.velocity, Vec3.ZERO, math.toRadian(this.node.eulerAngles.y));
          (_this$rigid = this.rigid) == null ? void 0 : _this$rigid.getLinearVelocity(this.currentVelocity);
          this.velocity.y = this.currentVelocity.y;

          if ((_this$sensorGround = this.sensorGround) != null && _this$sensorGround._isGround && this.sensorSlop.checkSlope(this.velocity)) {
            var moveLength = this.velocity.length();
            UtilVec3.copy(this.velocity, this.sensorSlop.vectorSlop);
            this.velocity.normalize().multiplyScalar(moveLength);
          }

          (_this$rigid2 = this.rigid) == null ? void 0 : _this$rigid2.setLinearVelocity(this.velocity);
        };

        _proto.moveRotation = function moveRotation() {
          UtilVec3.copy(this.currentDirection, this.direction);
          this.angle = Math.abs(Vec3.angle(this.currentDirection, this.node.forward));

          if (this.angle > 0.001) {
            UtilVec3.copy(tempRotationSideVector, this.currentDirection);
            var side = Math.sign(-tempRotationSideVector.cross(this.node.forward).y);
            var angle = side * this.angle * 20 + this.node.eulerAngles.y;
            this.node.setRotationFromEuler(0, angle, 0);
          }
        };

        _proto.moveDirection = function moveDirection(direction) {
          UtilVec3.copy(this.moveVec3, direction);
          this.moveVec3.multiplyScalar(this.speed);
        };

        _proto.jump = function jump() {
          var _this$rigid3, _this$rigid4; //this.rigid?.applyImpulse(this.jumpForce);


          (_this$rigid3 = this.rigid) == null ? void 0 : _this$rigid3.getLinearVelocity(this.currentVelocity);
          this.currentVelocity.y = 7;
          (_this$rigid4 = this.rigid) == null ? void 0 : _this$rigid4.setLinearVelocity(this.currentVelocity);
        };

        _proto.onRotation = function onRotation(x, y) {
          this.angleHead += x;
          this.direction.z = -Math.cos(Math.PI / 180.0 * this.angleHead);
          this.direction.x = Math.sin(Math.PI / 180.0 * this.angleHead);
          this.angleVertical -= y;
          if (this.angleVertical >= this.angleVerticalMax) this.angleVertical = this.angleVerticalMax;
          if (this.angleVertical <= this.angleVerticalMin) this.angleVertical = this.angleVerticalMin;
        };

        _proto.onDirection = function onDirection(x, y, z) {
          this.direction.x = x;
          this.direction.z = z;
          this.angleVertical = y;
          if (this.angleVertical >= this.angleVerticalMax) this.angleVertical = this.angleVerticalMax;
          if (this.angleVertical <= this.angleVerticalMin) this.angleVertical = this.angleVerticalMin;
        };

        _proto.stop = function stop() {
          this.rigid.getLinearVelocity(this.velocity);
          this.velocity.x = 0;
          this.velocity.z = 0;
          this.velocity.y = 0;
          this.rigid.setLinearVelocity(this.velocity);
        };

        return ActorMove;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "speed", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "jumpForce", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 6.0, 0);
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "smoothMove", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "angleVertical", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sensorSlop", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "sensorGround", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "angleVerticalMax", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "angleVerticalMin", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -30;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "faceMove", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-part.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-base.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, ActorBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      ActorBase = module.ActorBase;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "f8ec2rpJ9BFXYzAmFMC0kiU", "actor-part", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorPart = exports('ActorPart', (_dec = ccclass('ActorPart'), _dec2 = property({
        type: ActorBase
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorPart, _Component);

        function ActorPart() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "actor", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "part", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        return ActorPart;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "actor", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "part", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'body';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-physical-skin.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './sensor-rays-angle.ts', './util.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, RigidBody, v3, Component, SensorRaysAngle, UtilNode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RigidBody = module.RigidBody;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      SensorRaysAngle = module.SensorRaysAngle;
    }, function (module) {
      UtilNode = module.UtilNode;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cc90b2jDw1Fy5MH+dH/0Us+", "actor-physical-skin", undefined);

      var ccclass = _decorator.ccclass;
      var ActorPhysicalSkin = exports('ActorPhysicalSkin', (_dec = ccclass('ActorPhysicalSkin'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorPhysicalSkin, _Component);

        function ActorPhysicalSkin() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.sensor = void 0;
          _this.rigid = void 0;
          _this.velocity = v3(0, 0, 0);
          _this.dir = v3(0, 0, 0);
          _this.velocityPlane = v3(0, 0, 0);
          _this.inverseForce = v3(0, 0, 0);
          return _this;
        }

        var _proto = ActorPhysicalSkin.prototype;

        _proto.start = function start() {
          this.sensor = UtilNode.getChildComponent(this.node, 'skin', SensorRaysAngle); //this.node.getChildByName('skin').getComponent(SensorRaysAngle);

          this.rigid = UtilNode.getComponent(this.node, RigidBody); //this.getComponent(RigidBody);

          this.velocity = v3(0, 0, 0);
        };

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          /*
          if (this.sensor!.checked) {
              this.rigid!.getLinearVelocity(this.velocity); 
              // change move direction.
              const position = this.node.worldPosition;
              this.dir.x = this.sensor!.hitPoint.x - position.x;
              this.dir.z = this.sensor!.hitPoint.z - position.z;
               this.velocityPlane.x = this.velocity.x;
              this.velocityPlane.z = this.velocity.z;
               if (Vec3.angle(this.dir, this.velocityPlane) < 10) {
                  //this.velocity.x = 0;
                  //this.velocity.z = 0;
                  this.velocity = this.velocity.normalize().multiplyScalar(3);
                  this.rigid!.setLinearVelocity(this.velocity);
                  // add inverse force.
                  //this.inverseForce.x = -this.velocity.x;
                  //this.inverseForce.z = -this.velocity.z;
                  //this.rigid.applyImpulse(this.inverseForce.normalize().multiplyScalar(1));
               }
           }
          */
        };

        return ActorPhysicalSkin;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-piranha.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-base.ts', './brain.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, ActorBase, Brain;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      ActorBase = module.ActorBase;
    }, function (module) {
      Brain = module.Brain;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "88d40zFkp1NQbbgrHIqus64", "actor-piranha", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorPiranha = exports('ActorPiranha', (_dec = ccclass('ActorPiranha'), _dec(_class = /*#__PURE__*/function (_ActorBase) {
        _inheritsLoose(ActorPiranha, _ActorBase);

        function ActorPiranha() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ActorBase.call.apply(_ActorBase, [this].concat(args)) || this;
          _this._brain = void 0;
          return _this;
        }

        var _proto = ActorPiranha.prototype;

        _proto.start = function start() {
          this.init('actor-piranha');
          this._brain = new Brain(this._data.brain, this);
        };

        _proto.update = function update(deltaTime) {} //#region condition
        ;

        _proto.noFoundPlayer = function noFoundPlayer() {};

        _proto.foundPlayer = function foundPlayer() {};

        _proto.nearPlayer = function nearPlayer() {};

        _proto.canEatPlayer = function canEatPlayer() {};

        _proto.fleePlayer = function fleePlayer() {};

        _proto.feedPlayer = function feedPlayer() {} //#endregion
        ;

        _proto.idle = function idle() {};

        _proto.move = function move() {};

        _proto.jump = function jump() {};

        _proto.crossRoad = function crossRoad() {};

        _proto.forcePrepareJump = function forcePrepareJump() {};

        return ActorPiranha;
      }(ActorBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-sensor-drop-item.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './sensor-rays.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, Msg, SensorRays;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      SensorRays = module.SensorRays;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d3508eOQZhLSJm3wolQq1en", "actor-sensor-drop-item", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorSensorDropItem = exports('ActorSensorDropItem', (_dec = ccclass('ActorSensorDropItem'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorSensorDropItem, _Component);

        function ActorSensorDropItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "num", _descriptor, _assertThisInitialized(_this));

          _this.sensor = void 0;
          _this.pickedNode = void 0;
          _this.state = -1;
          _this.curState = -1;
          return _this;
        }

        var _proto = ActorSensorDropItem.prototype;

        _proto.start = function start() {
          this.sensor = this.getComponent(SensorRays);

          if (this.sensor === null) {
            throw new Error(this.node.name + " node can not find 'SensorRays' component.");
          }
        };

        _proto.update = function update(deltaTime) {
          if (this.sensor.checked) {
            this.pickedNode = this.sensor.checkedNode;
            var dropName = this.pickedNode.name;
            this.curState = 255;
            console.log('check drop name:', dropName);
          } else {
            this.curState = 0;
            this.pickedNode = undefined;
          }

          if (this.state !== this.curState) {
            this.state = this.curState;
            Msg.emit('msg_grp_take_info', this.state);
          }
        };

        _proto.getPicked = function getPicked() {
          if (this.pickedNode != undefined) {
            return this.pickedNode;
          }
        };

        return ActorSensorDropItem;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "num", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-shotgun.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-equip-base.ts', './actor-part.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, geometry, PhysicsSystem, ActorEquipBase, ActorPart;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      PhysicsSystem = module.PhysicsSystem;
    }, function (module) {
      ActorEquipBase = module.ActorEquipBase;
    }, function (module) {
      ActorPart = module.ActorPart;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1f1b9uZSClHnYl0aIaVtp6I", "actor-shotgun", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorShotgun = exports('ActorShotgun', (_dec = ccclass('ActorShotgun'), _dec(_class = /*#__PURE__*/function (_ActorEquipBase) {
        _inheritsLoose(ActorShotgun, _ActorEquipBase);

        function ActorShotgun() {
          return _ActorEquipBase.apply(this, arguments) || this;
        }

        var _proto = ActorShotgun.prototype;

        _proto.onFire = function onFire() {
          this._bagData.bulletCount--;
          var forwardNode = this._actor._forwardNode;
          var origin = forwardNode.worldPosition;
          var dir = forwardNode.forward;
          var ray = new geometry.Ray(origin.x, origin.y, origin.z, dir.x, dir.y, dir.z);
          var mask = 1 << 3;
          var distance = this._data.damage.distance;

          if (PhysicsSystem.instance.raycastClosest(ray, mask, distance)) {
            var res = PhysicsSystem.instance.raycastClosestResult;
            var hitName = res.collider.node.name;
            console.log("handgun fire hit " + hitName);

            if (hitName.concat('actor')) {
              var actorPart = res.collider.node.getComponent(ActorPart);

              if (!actorPart) {
                console.error(" damage part can not add actor part component. " + actorPart);
              }

              var actor = actorPart.actor;
              var damage = this._data.damage[hitName];

              if (damage === undefined) {
                console.error("hit part undefind " + hitName);
              }

              actor._data.hp -= damage;

              if (actor._data.hp <= 0) {
                this._actor._data.hp = 1;
                actor["do"]('dead');
              }
            }
          } else {
            console.log('empty shoot.');
          }
        };

        return ActorShotgun;
      }(ActorEquipBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-sound.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './sound.ts', './msg.ts', './actor.ts', './data-core.ts', './level.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, randomRangeInt, Component, Sound, Msg, Actor, DataSoundInst, Level;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
    }, function (module) {
      Sound = module.Sound;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Actor = module.Actor;
    }, function (module) {
      DataSoundInst = module.DataSoundInst;
    }, function (module) {
      Level = module.Level;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f7156vNNEhMz6XwfCtXaUup", "actor-sound", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorSound = exports('ActorSound', (_dec = ccclass('ActorSound'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorSound, _Component);

        function ActorSound() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "stepLength", _descriptor, _assertThisInitialized(_this));

          _this._currentStepLength = 0;
          _this._data = {};
          _this.actor = void 0;
          return _this;
        }

        var _proto = ActorSound.prototype;

        _proto.start = function start() {
          this.actor = this.getComponent(Actor);
          this._data = this.actor._data;
          Msg.on('msg_walk_sfx', this.walkSfx.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          Msg.off('msg_walk_sfx', this.walkSfx.bind(this));
        };

        _proto.update = function update(deltaTime) {
          var _velocityLocal; // If Level is stop return.


          if (Level.Instance.stop) return;
          if (this._data.is_ground) this._currentStepLength += Math.abs(deltaTime * ((_velocityLocal = this.actor._actorMove.velocityLocal) == null ? void 0 : _velocityLocal.length()));

          if (this._currentStepLength >= this.stepLength) {
            this.walkSfx();
            this._currentStepLength -= this.stepLength;
          }
        };

        _proto.walkSfx = function walkSfx() {
          var type = "walk_" + this._data.walk_in_type;
          var soundList = DataSoundInst.get(type);
          var index = randomRangeInt(0, soundList.length);
          Sound.on(soundList[index]);
        };

        return ActorSound;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "stepLength", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.2;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-statistics.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor.ts', './msg.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, Component, Actor, Msg;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      Actor = module.Actor;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6dcabE6lv9PrasfsU70ClZn", "actor-statistics", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ActorStatistics = exports('ActorStatistics', (_dec = ccclass('ActorStatistics'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ActorStatistics, _Component);

        function ActorStatistics() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.actor = void 0;
          _this._velocity = v3(0, 0, 0);
          _this._statisticsTime = 1;
          _this._moveDistance = 0;
          _this._runDistance = 0;
          return _this;
        }

        var _proto = ActorStatistics.prototype;

        _proto.start = function start() {
          this.actor = this.getComponent(Actor);
        };

        _proto.update = function update(deltaTime) {
          var _this$actor, _this$actor$_actorMov, _this$actor$_actorMov2;

          (_this$actor = this.actor) == null ? void 0 : (_this$actor$_actorMov = _this$actor._actorMove) == null ? void 0 : (_this$actor$_actorMov2 = _this$actor$_actorMov.rigid) == null ? void 0 : _this$actor$_actorMov2.getLinearVelocity(this._velocity);
          this._velocity.y = 0;

          var length = this._velocity.length();

          if (length > 0.1) {
            var _this$actor2;

            var distance = length * deltaTime;
            this._moveDistance += distance;

            if ((_this$actor2 = this.actor) != null && _this$actor2._data.isRun) {
              this._runDistance += distance;
            }

            this._statisticsTime -= deltaTime;

            if (this._statisticsTime <= 0) {
              this._statisticsTime = 1;
              Msg.emit('msg_stat_distance', {
                key: 'move',
                distance: this._moveDistance
              });
              if (this._runDistance > 0) Msg.emit('msg_stat_distance', {
                key: 'run',
                distance: this._runDistance
              });
              this._moveDistance = 0;
              this._runDistance = 0;
            }
          }
        };

        return ActorStatistics;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-task-go-target.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-tasks.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Vec3, TaskBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
    }, function (module) {
      TaskBase = module.TaskBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1cc27kllUFEX45C6T+8JuXj", "actor-task-go-target", undefined);

      var ActorTaskGoTarget = exports('ActorTaskGoTarget', /*#__PURE__*/function (_TaskBase) {
        _inheritsLoose(ActorTaskGoTarget, _TaskBase);

        function ActorTaskGoTarget() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _TaskBase.call.apply(_TaskBase, [this].concat(args)) || this;
          _this.name = 'ActorActionWay';
          _this.actor = void 0;
          _this.index = 0;
          _this.waypoints = [];
          _this.isStart = false;
          return _this;
        }

        var _proto = ActorTaskGoTarget.prototype;

        _proto.init = function init(_actor) {
          this.actor = _actor;
        };

        _proto.initWayPoints = function initWayPoints(_waypoints) {
          this.index = 0;
          this.waypoints = _waypoints;
        };

        _proto.update = function update() {
          if (!this.isStart) return;
          if (!this.isWait) return; // check arrived

          if (Vec3.distance(this.actor._data.pos, this.waypoints[this.index].pos) < 0.1) {
            if (this.index >= this.waypoints.length) {
              this.end();
              return;
            } // check actor direction.


            var dir = this.waypoints[this.index + 1].clone();
            dir.subtract(this.actor._data.pos);
            this.actor.setDir(dir); // check action.

            this.onAction(this.waypoints[this.index].action);
          }
        };

        _proto.onAction = function onAction(action) {
          this.actor["do"](action);
        };

        return ActorTaskGoTarget;
      }(TaskBase));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor-tasks.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, game;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1c3d5DTGRlHz5SLFikzWo7F", "actor-tasks", undefined);

      var TaskBase = exports('TaskBase', /*#__PURE__*/function () {
        function TaskBase() {
          this.name = '';
          this.isStart = false;
          this.isWait = false;
          this.tasks = [];
          this.onCompleteFun = undefined;
        }

        var _proto = TaskBase.prototype;

        _proto.add = function add() {
          for (var i = 0; i < arguments.length; i++) {
            this.tasks.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);
          }
        };

        _proto.start = function start() {
          this.isStart = true;
        };

        _proto.sequence = function sequence(task) {
          var sequence = new TaskSequence();
          sequence.add(task);
          this.tasks.push(sequence);
          return sequence;
        };

        _proto.parallel = function parallel(task) {
          var parallel = new TaskParallel();
          parallel.add(task);
          this.tasks.push(parallel);
          return parallel;
        };

        _proto.update = function update() {
          if (!this.isStart) return;
          if (this.isWait) return;
          this.end();
        };

        _proto.end = function end() {
          this.isStart = false;
          this.isWait = false;

          if (this.onCompleteFun !== null) {
            this.onCompleteFun();
            console.log('on complete:', this);
          }

          this.onCompleteFun = undefined;
          console.log('on end:', this.name, game.frameTime);
        };

        _proto["break"] = function _break() {
          for (var i = 0; i < this.tasks.length; i++) {
            this.tasks[i]["break"]();
          }
        };

        _proto.onComplete = function onComplete(call) {
          this.onCompleteFun = call;
        };

        return TaskBase;
      }());
      var TaskSequence = exports('TaskSequence', /*#__PURE__*/function (_TaskBase) {
        _inheritsLoose(TaskSequence, _TaskBase);

        function TaskSequence() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _TaskBase.call.apply(_TaskBase, [this].concat(args)) || this;
          _this.index = 0;
          return _this;
        }

        var _proto2 = TaskSequence.prototype;

        _proto2.start = function start() {
          _TaskBase.prototype.start.call(this);

          this.index = 0;
          this.tasks[this.index].start();
        };

        _proto2.update = function update() {
          if (!this.isStart) return;
          if (this.isWait) return;

          if (!this.tasks[this.index].isStart) {
            this.next();
          } else {
            this.tasks[this.index].update();
          }
        };

        _proto2.next = function next() {
          this.index++;

          if (this.index >= this.tasks.length) {
            this.end();
          } else {
            this.tasks[this.index].start();
          }
        };

        _proto2.end = function end() {
          _TaskBase.prototype.end.call(this);
        };

        return TaskSequence;
      }(TaskBase));
      var TaskParallel = exports('TaskParallel', /*#__PURE__*/function (_TaskBase2) {
        _inheritsLoose(TaskParallel, _TaskBase2);

        function TaskParallel() {
          return _TaskBase2.apply(this, arguments) || this;
        }

        var _proto3 = TaskParallel.prototype;

        _proto3.start = function start() {
          _TaskBase2.prototype.start.call(this);

          for (var i = 0; i < this.tasks.length; i++) {
            this.tasks[i].start();
          }
        };

        _proto3.update = function update() {
          if (!this.isStart) return;
          if (this.isWait) return;

          for (var i = 0; i < this.tasks.length; i++) {
            this.tasks[i].update();
          } // check all task is end.


          for (var _i = 0; _i < this.tasks.length; _i++) {
            if (this.tasks[_i].isStart) return;
          }

          this.end();
        };

        _proto3.end = function end() {
          _TaskBase2.prototype.end.call(this);
        };

        return TaskParallel;
      }(TaskBase));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/actor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-base.ts', './local.ts', './msg.ts', './util.ts', './actor-animation-graph.ts', './actor-bag.ts', './actor-equipment.ts', './actor-sensor-drop-item.ts', './actor-move.ts', './sensor-ground.ts', './actor-face.ts', './sound.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, v3, game, Vec3, math, ActorBase, Local, Msg, UtilNode, UtilVec3, ActorAnimationGraph, ActorBag, ActorEquipment, ActorSensorDropItem, ActorMove, SensorGround, ActorFace, Sound;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      game = module.game;
      Vec3 = module.Vec3;
      math = module.math;
    }, function (module) {
      ActorBase = module.ActorBase;
    }, function (module) {
      Local = module.Local;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      UtilNode = module.UtilNode;
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      ActorAnimationGraph = module.ActorAnimationGraph;
    }, function (module) {
      ActorBag = module.ActorBag;
    }, function (module) {
      ActorEquipment = module.ActorEquipment;
    }, function (module) {
      ActorSensorDropItem = module.ActorSensorDropItem;
    }, function (module) {
      ActorMove = module.ActorMove;
    }, function (module) {
      SensorGround = module.SensorGround;
    }, function (module) {
      ActorFace = module.ActorFace;
    }, function (module) {
      Sound = module.Sound;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "93422/IafpK0ZdI10gHw4yr", "actor", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var tempLinearVelocity = v3(0, 0, 0);
      var tempAngleVelocity = v3(0, 0, 0);
      var Actor = exports('Actor', (_dec = ccclass('Actor'), _dec2 = property({
        type: ActorSensorDropItem
      }), _dec3 = property({
        type: ActorFace
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_ActorBase) {
        _inheritsLoose(Actor, _ActorBase);

        function Actor() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ActorBase.call.apply(_ActorBase, [this].concat(args)) || this;
          _this._move = v3(0, 0, 0);
          _this._actorBag = void 0;
          _this._actorEquipment = void 0;

          _initializerDefineProperty(_this, "actorSensorDropItem", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_actorFace", _descriptor2, _assertThisInitialized(_this));

          _this._actorSensorGround = void 0;
          _this._actorMove = void 0;
          _this._viewNoWeapon = Object.create(null);
          _this._forwardNode = void 0;
          _this._viewRoot = void 0;
          _this.forward = v3(0, 0, 0);
          _this._fps = 0;
          _this.isReady = false;
          _this.bulletBox = 2;
          return _this;
        }

        var _proto = Actor.prototype;

        _proto.initView = function initView() {
          _ActorBase.prototype.initView.call(this);

          this._actorBag = new ActorBag(this);
          this._actorEquipment = new ActorEquipment(this);
          this._actorSensorGround = this.node.getComponent(SensorGround);
          this._actorMove = this.getComponent(ActorMove);
          this._forwardNode = UtilNode.find(this.node, 'forwardNode');
          this._viewRoot = UtilNode.find(this.node, 'animation_view');
          this._animationGraph = this._viewRoot.getComponent(ActorAnimationGraph);
          this["do"]('play');
        };

        _proto.onUpdate = function onUpdate() {
          _ActorBase.prototype.onUpdate.call(this);

          this._updates.push(this.updateAction.bind(this));
        };

        _proto["do"] = function _do(name) {
          if (this.noAction) return;

          _ActorBase.prototype["do"].call(this, name);
        };

        _proto.updateAction = function updateAction(deltaTime) {
          var _this$_actorEquipment, _this$_forwardNode;

          this._fps = game.frameRate;

          if (this._data.hit_recover > 0) {
            var _this$_actorMove;

            this._data.hit_recover -= deltaTime;
            this._actorMove.isStopMove = true;
            (_this$_actorMove = this._actorMove) == null ? void 0 : _this$_actorMove.stop();
          } else {
            this._actorMove.isStopMove = false;
          } // Check run strength


          var canRun = this.calculateRunStrength(deltaTime);
          this._actorMove.speed = canRun ? -this._data.run_speed.z : -this._data.move_speed.z;
          var normalizeSpeed = Math.abs(this._actorMove.velocity.length() / this._actorMove.speed);
          (_this$_actorEquipment = this._actorEquipment) == null ? void 0 : _this$_actorEquipment.updateAim(normalizeSpeed);
          this.recoverStrength(); // Update forward info.

          if (this._forwardNode) UtilVec3.copy(this.forward, (_this$_forwardNode = this._forwardNode) == null ? void 0 : _this$_forwardNode.forward);
        };

        _proto.onJump = function onJump() {
          if (this._actorSensorGround._isGround === false) return;

          if (this._data.strength >= this._data.cost_jump_strength) {
            this._data.strength -= this._data.cost_jump_strength;
          }

          this["do"]('jump');
        };

        _proto.onGround = function onGround() {
          this["do"]('on_ground');
        };

        _proto.offGround = function offGround() {
          this["do"]('off_ground');
        };

        _proto.onWin = function onWin() {};

        _proto.jump = function jump() {
          var _this$_actorMove2;

          (_this$_actorMove2 = this._actorMove) == null ? void 0 : _this$_actorMove2.jump();
        };

        _proto.onMove = function onMove(move) {
          var _this$_actorMove3;

          (_this$_actorMove3 = this._actorMove) == null ? void 0 : _this$_actorMove3.moveDirection(move);
        };

        _proto.onRotation = function onRotation(x, y) {
          var _this$_actorMove4;

          if (x > 90) x = 90;
          if (x < -90) x = -90;
          (_this$_actorMove4 = this._actorMove) == null ? void 0 : _this$_actorMove4.onRotation(x, y);
        };

        _proto.onDir = function onDir(x, z) {
          this._dir.z = z;
          this._dir.x = x;
        };

        _proto.onPause = function onPause() {};

        _proto.onRun = function onRun(isRun) {
          this._data.is_run = isRun;
        };

        _proto.onPick = function onPick() {
          var _this$actorSensorDrop;

          var pickedNode = (_this$actorSensorDrop = this.actorSensorDropItem) == null ? void 0 : _this$actorSensorDrop.getPicked();

          if (pickedNode !== undefined) {
            var _this$_actorBag, _this$_actorBag3; // Picked health.


            if (pickedNode.name == 'medkit') {
              var recoverHP = this._data.max_hp - this._data.hp;

              if (recoverHP <= 0) {
                Msg.emit('msg_tips', "" + Local.Instance.get('full_hp'));
                return;
              }

              this._data.hp = this._data.max_hp;
              Sound.on('sfx_recovery_hp');
              this.updateHP();
              Msg.emit('msg_tips', Local.Instance.get('recovery_hp') + "  " + recoverHP);
              pickedNode.emit('picked');
              return;
            } // Picked same weapon increase clip.


            if ((_this$_actorBag = this._actorBag) != null && _this$_actorBag.pickedSameWeaponIncreaseClips(pickedNode.name)) {
              pickedNode.emit('picked');
              Msg.emit('msg_tips', Local.Instance.get('picked_clip') + "  " + pickedNode.name + "  x 1");
              Msg.emit('msg_update_bag');
              Msg.emit('msg_update_equip_info');
              return;
            } // Picked bullet box.


            if (pickedNode.name === 'bullet_box') {
              var _this$_actorBag2;

              (_this$_actorBag2 = this._actorBag) == null ? void 0 : _this$_actorBag2.pickedBulletBox();
              pickedNode.emit('picked');
              Msg.emit('msg_tips', "" + Local.Instance.get('picked_bullet_box'));
              Msg.emit('msg_update_equip_info');
              return;
            } // Picked items


            if ((_this$_actorBag3 = this._actorBag) != null && _this$_actorBag3.pickedItem(pickedNode.name)) {
              pickedNode.emit('picked');
              Msg.emit('msg_tips', Local.Instance.get('picked') + "  " + Local.Instance.get(pickedNode.name) + "  x 1");
              this.bulletBox++;
              Msg.emit('msg_update_bag');
              Msg.emit('msg_update_equip_info');
            } else {
              Msg.emit('msg_tips', "" + Local.Instance.get('bag_is_full'));
            }
          }
        };

        _proto.onDrop = function onDrop() {
          var _this$_actorBag4;

          if ((_this$_actorBag4 = this._actorBag) != null && _this$_actorBag4.dropItem()) {
            Msg.emit('msg_update_bag');
          }
        };

        _proto.onCrouch = function onCrouch() {
          var _this$_animationGraph;

          this._data.is_crouch = this._data.is_crouch ? false : true; // set view height.
          // set physic collider height.
          // set hit part height.

          (_this$_animationGraph = this._animationGraph) == null ? void 0 : _this$_animationGraph.play('bool_crouch', this._data.is_crouch);
          Msg.emit('msg_change_tps_camera_height', this._data.is_crouch ? this._data.stand_camera_height : this._data.crouch_camera_height);
        };

        _proto.onAim = function onAim(isAim) {
          if (isAim === undefined) {
            this._data.is_aim = this._data.is_aim ? false : true;
          } else {
            if (isAim == this._data.is_aim) return;
            this._data.is_aim = isAim;
          } // Get aim state.


          this["do"](this._data.is_aim ? 'on_aim' : 'off_aim');
          if (this.isPlayer) Msg.emit('msg_change_tps_camera_target', this._data.is_aim ? 1 : 0);
        }
        /**
         * Open fire interface. 
         * @returns 
         */
        ;

        _proto.onFire = function onFire() {
          var _currentEquip, _this$_actorEquipment2, _this$_actorEquipment3; // Determines if the current equipment is ready to fire.
          // Includes the number of rounds in the magazine and the firing cooldown.


          if (((_currentEquip = this._actorEquipment.currentEquip) == null ? void 0 : _currentEquip.checkUse()) == false) return; // Execute the fir action.

          (_this$_actorEquipment2 = this._actorEquipment) == null ? void 0 : _this$_actorEquipment2["do"]('fire'); // Sets the aim stable value to the maximum.

          (_this$_actorEquipment3 = this._actorEquipment) == null ? void 0 : _this$_actorEquipment3.updateAim(1, true);
          /*
          const canUseEquip = this.calculateStrengthUseEquip();
          if (canUseEquip) {}
          */
        }
        /**
         * Set Auto fire state.
         * @param isAutoFire Auto fire state.
         */
        ;

        _proto.onAutoFire = function onAutoFire(isAutoFire) {
          this._data.is_auto_fire = isAutoFire;
        };

        _proto.onReload = function onReload() {
          var _this$_actorEquipment4, _this$_actorEquipment5, _this$_actorEquipment6;

          if ((_this$_actorEquipment4 = this._actorEquipment) != null && (_this$_actorEquipment5 = _this$_actorEquipment4.currentEquip) != null && _this$_actorEquipment5.checkFullBullet()) return;
          (_this$_actorEquipment6 = this._actorEquipment) == null ? void 0 : _this$_actorEquipment6["do"]('reload');
        };

        _proto.onEquip = function onEquip(index) {
          var _this$_actorEquipment7;

          if ((_this$_actorEquipment7 = this._actorEquipment) != null && _this$_actorEquipment7.equip(index)) {
            if (this._data.has_multi_res) this._viewNoWeapon.active = false;
          } else {
            if (this._data.has_multi_res) this._viewNoWeapon.active = true;
          }
        };

        _proto.onChangeEquips = function onChangeEquips() {
          return false;
        };

        _proto.calculateStrengthUseEquip = function calculateStrengthUseEquip() {
          var canUseEquip = this._data.strength >= this._data.cost_use_equip_strength;

          if (canUseEquip) {
            this._data.strength -= this._data.cost_use_equip_strength;
            this._data.strength = Math.max(this._data.strength, 0);
          }

          return canUseEquip;
        };

        _proto.calculateRunStrength = function calculateRunStrength(deltaTime) {
          var canRun = this._data.is_run && this._data.strength >= this._data.cost_run_strength;

          if (canRun) {
            this._data.strength -= this._data.cost_run_strength * deltaTime;
            this._data.strength = Math.max(this._data.strength, 0);
          }

          return canRun;
        };

        _proto.recoverStrength = function recoverStrength() {
          if (this._data.is_ground === false) return;
          if (this._data.is_run) return;
          this._data.strength += this._data.recover_ground_strength * game.deltaTime;
          if (this._data.strength > this._data.max_strength) this._data.strength = this._data.max_strength;
          var percent_value = this._data.strength / this._data.max_strength;

          if (this.isPlayer) {
            Msg.emit('fil_strength', percent_value);
          }
        };

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          var _this$_actorMove5, _this$_animationGraph2, _this$_animationGraph3, _this$_animationGraph4;

          if (this._actorMove == undefined) return; // Synchronize animation setup data.

          var rigidBody = (_this$_actorMove5 = this._actorMove) == null ? void 0 : _this$_actorMove5.rigid;
          rigidBody.getLinearVelocity(tempLinearVelocity);
          tempLinearVelocity.y = 0;
          var linearVelocityLength = tempLinearVelocity.length();
          var eulerAnglesY = this.node.eulerAngles.y; //rotate y.

          Vec3.rotateY(tempLinearVelocity, tempLinearVelocity, Vec3.ZERO, math.toRadian(-eulerAnglesY));
          var num_velocity_x = tempLinearVelocity.x;
          var num_velocity_y = tempLinearVelocity.z;
          var moveSpeed = linearVelocityLength * this._data.linear_velocity_animation_rate; // Check rotation.

          var angleSpeed = this._actorMove.angle;

          if (linearVelocityLength < 0.01 && angleSpeed > 2) {
            moveSpeed = angleSpeed * this._data.angle_velocity_animation_rate;
            num_velocity_x = angleSpeed / this._data.angle_velocity_animation_scale;
          }

          (_this$_animationGraph2 = this._animationGraph) == null ? void 0 : _this$_animationGraph2.setValue('num_velocity_x', num_velocity_x);
          (_this$_animationGraph3 = this._animationGraph) == null ? void 0 : _this$_animationGraph3.setValue('num_velocity_y', -num_velocity_y);
          (_this$_animationGraph4 = this._animationGraph) == null ? void 0 : _this$_animationGraph4.setValue('num_move_speed', moveSpeed);
        };

        _createClass(Actor, [{
          key: "noAction",
          get: function get() {
            return this._data.is_dead || this._data.is_win;
          }
        }]);

        return Actor;
      }(ActorBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "actorSensorDropItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_actorFace", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/aim-control.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './math-util.ts', './aim-ik.ts', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Quat, Node, math, game, Component, MathUtil, AimIK, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Node = module.Node;
      math = module.math;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      MathUtil = module.default;
    }, function (module) {
      AimIK = module.default;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17;

      cclegacy._RF.push({}, "adfa7JrNT5IuKAHSExYQS6b", "aim-control", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var _tempVec3 = new Vec3();

      var _tempVec3_2 = new Vec3();

      var _tempQuat = new Quat();

      var _tempQuat_2 = new Quat();

      var tempPivot = new Vec3();
      var AimControl = exports('default', (_dec = ccclass('AimControl'), _dec2 = property({
        type: AimIK,
        tooltip: 'Reference to the AimIK component.'
      }), _dec3 = property({
        tooltip: 'Master weight of the IK solver.'
      }), _dec4 = property({
        type: Node,
        tooltip: 'The target to aim at. Do not use the Target transform that is assigned to AimIK. Set to null if you wish to stop aiming.'
      }), _dec5 = property({
        tooltip: 'The time it takes to switch targets.'
      }), _dec6 = property({
        tooltip: 'The time it takes to blend in/out of AimIK weight.'
      }), _dec7 = property({
        tooltip: 'Enables smooth turning towards the target according to the parameters under this header.'
      }), _dec8 = property({
        tooltip: 'Speed of turning towards the target using Vector3.RotateTowards.'
      }), _dec9 = property({
        tooltip: 'Speed of moving towards the target using Vector3.RotateTowards.'
      }), _dec10 = property({
        tooltip: 'Speed of slerping towards the target.'
      }), _dec11 = property({
        tooltip: 'The position of the pivot that the aim target is rotated around relative to the root of the character.'
      }), _dec12 = property({
        tooltip: 'Minimum distance of aiming from the first bone. Keeps the solver from failing if the target is too close.'
      }), _dec13 = property({
        tooltip: 'Offset applied to the target in world space. Convenient for scripting aiming inaccuracy.'
      }), _dec14 = property({
        tooltip: 'Character root will be rotate around the Y axis to keep root forward within this angle from the aiming direction.'
      }), _dec15 = property({
        tooltip: 'If enabled, aligns the root forward to target direction after Max Root Angle has been exceeded.'
      }), _dec16 = property({
        tooltip: 'The time of turning towards the target direction if Max Root Angle has been exceeded and Turn To Target is enabled.'
      }), _dec17 = property({
        tooltip: 'If true, AimIK will consider whatever the current direction of the weapon to be the forward aiming direction and work additively on top of that. This enables you to use recoil and reloading animations seamlessly with AimIK. Adjust the Vector3 value below if the weapon is not aiming perfectly forward in the aiming animation clip.'
      }), _dec18 = property({
        tooltip: 'The direction of the animated weapon aiming in character space. Tweak this value to adjust the aiming. Use Animated Aim Direction must be enabled for this property to work.'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AimControl, _Component);

        function AimControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ik", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "weight", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "target", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "targetSwitchSmoothTime", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "weightSmoothTime", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smoothTurnTowardsTarget", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxRadiansDelta", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxMagnitudeDelta", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slerpSpeed", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pivotOffsetFromRoot", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minDistance", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "offset", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxRootAngle", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "turnToTarget", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "turnToTargetTime", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "useAnimatedAimDirection", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animatedAimDirection", _descriptor17, _assertThisInitialized(_this));

          _this._lastTarget = null;
          _this._switchWeight = 0;
          _this._switchWeightV = 0;
          _this._weightV = 0;
          _this._lastPosition = new Vec3();
          _this._dir = new Vec3();
          _this._lastSmoothTowardsTarget = false;
          _this.turningToTarget = false;
          _this.turnToTargetMlp = 1.0;
          _this.turnToTargetMlpV = 0.0;
          _this._interval = void 0;
          return _this;
        }

        var _proto = AimControl.prototype;

        _proto.start = function start() {
          this._lastPosition = Vec3.clone(this.ik.solver.ikPosition);
          Vec3.subtract(this._dir, this.ik.solver.ikPosition, this._getPivot());
          this.ik.solver.target = this.target;
        };

        _proto.lateUpdate = function lateUpdate() {
          // If target has changed...
          if (this.target != this._lastTarget) {
            if (this._lastTarget == null && this.target != null && this.ik.solver.ikPositionWeight <= 0.0) {
              this._lastPosition = Vec3.clone(this.target.getWorldPosition());
              Vec3.subtract(this._dir, this.target.getWorldPosition(), this._getPivot());
              Vec3.add(this.ik.solver.ikPosition, this.target.getWorldPosition(), this.offset);
            } else {
              this._lastPosition = Vec3.clone(this.ik.solver.ikPosition);
              Vec3.subtract(this._dir, this.ik.solver.ikPosition, this._getPivot());
            }

            this._switchWeight = 0.0;
            this._lastTarget = this.target;
          } // Smooth weight


          var outValue = {
            value: this._weightV
          };
          this.ik.solver.ikPositionWeight = MathUtil.smoothDamp(this.ik.solver.ikPositionWeight, this.target != null ? this.weight : 0, outValue, this.weightSmoothTime);
          this._weightV = outValue.value;
          if (this.ik.solver.ikPositionWeight >= 0.999) this.ik.solver.ikPositionWeight = 1.0;
          if (this.ik.solver.ikPositionWeight <= 0.001) this.ik.solver.ikPositionWeight = 0.0;
          if (this.ik.solver.ikPositionWeight <= 0.0) return; // Smooth target switching

          outValue.value = this._switchWeightV;
          this._switchWeight = MathUtil.smoothDamp(this._switchWeight, 1.0, outValue, this.targetSwitchSmoothTime);
          this._switchWeightV = outValue.value;
          if (this._switchWeight >= 0.99) this._switchWeight = 1.0;

          if (this.target != null) {
            Vec3.add(_tempVec3, this.target.getWorldPosition(), this.offset);
            Vec3.lerp(this.ik.solver.ikPosition, this._lastPosition, _tempVec3, this._switchWeight);
          } // Smooth turn towards target


          if (this.smoothTurnTowardsTarget != this._lastSmoothTowardsTarget) {
            Vec3.subtract(this._dir, this.ik.solver.ikPosition, this._getPivot());
            this._lastSmoothTowardsTarget = this.smoothTurnTowardsTarget;
          } // fromViewUp


          if (this.smoothTurnTowardsTarget) {
            // Vector3 targetDir = ik.solver.ikPosition - pivot;
            // dir = Vector3.Slerp(dir, targetDir, Time.deltaTime * slerpSpeed);
            // dir = Vector3.RotateTowards(dir, targetDir, Time.deltaTime * maxRadiansDelta, maxMagnitudeDelta);
            // ik.solver.ikPosition = pivot + dir;
            // get targetDir
            Vec3.subtract(_tempVec3, this.ik.solver.ikPosition, this._getPivot());
            Quat.fromViewUp(_tempQuat, _tempVec3, new Vec3(0, 1, 0));
            Quat.toEuler(this._dir, _tempQuat);
            Vec3.add(this.ik.solver.ikPosition, this._getPivot(), this._dir); //console.log('ikPosition:',this.ik!.solver.ikPosition);
          } // Min distance from the pivot


          this._applyMinDistance(); // Root rotation


          this._rootRotation(); // Offset mode


          if (this.useAnimatedAimDirection) {
            Vec3.transformQuat(_tempVec3, this.animatedAimDirection, this.ik.rootNode.getWorldRotation()); // MathUtil.directionToNodeSpace(this.ik!.solver.axis, _tempVec3, this.ik!.solver!.aimNode!);

            this.ik.rootNode.inverseTransformPoint(this.ik.solver.axis, _tempVec3);
          }
        };

        _proto._getPivot = function _getPivot() {
          //   this.ik!.transform.position + this.ik!.transform.rotation * this.pivotOffsetFromRoot;
          //let tempVec3 = new Vec3();
          Vec3.transformQuat(tempPivot, this.pivotOffsetFromRoot, this.ik.rootNode.getWorldRotation());
          Vec3.add(tempPivot, tempPivot, this.ik.rootNode.getWorldPosition());
          return tempPivot; //Vec3.clone(this.tempPivot);
        } // Make sure aiming target is not too close (might make the solver instable when the target is closer to the first bone than the last bone is).
        ;

        _proto._applyMinDistance = function _applyMinDistance() {
          //_tempVec3 = this._getPivot();
          UtilVec3.copy(_tempVec3, this._getPivot());
          Vec3.subtract(_tempVec3_2, this.ik.solver.ikPosition, _tempVec3);
          var distance = Math.max(_tempVec3_2.length(), this.minDistance);

          _tempVec3_2.normalize();

          _tempVec3_2.multiplyScalar(distance);

          Vec3.add(this.ik.solver.ikPosition, _tempVec3, _tempVec3_2);
        } // Character root will be rotate around the Y axis to keep root forward within this angle from the aiming direction.
        ;

        _proto._rootRotation = function _rootRotation() {
          var maxRootAngle = this.ik.enableAim ? this.maxRootAngle : 0;
          var max = math.lerp(180.0, maxRootAngle * this.turnToTargetMlp, this.ik.solver.ikPositionWeight);

          if (max < 180.0) {
            Quat.invert(_tempQuat, this.ik.rootNode.getWorldRotation());
            Vec3.subtract(_tempVec3, this.ik.solver.ikPosition, this._getPivot());
            Vec3.transformQuat(_tempVec3, _tempVec3, _tempQuat);
            var angle = math.toDegree(Math.atan2(_tempVec3.x, _tempVec3.z));
            var rotation = 0.0;

            if (angle > max) {
              rotation = angle - max;
              if (!this.turningToTarget && this.turnToTarget) this._startCoroutine(this._turnToTarget.bind(this));
            }

            if (angle < -max) {
              rotation = angle + max;
              if (!this.turningToTarget && this.turnToTarget) this._startCoroutine(this._turnToTarget.bind(this));
            } // Quaternion.AngleAxis(rotation, ik.transform.up) * ik.transform.rotation;
            // let character = this.ik!.getComponent("CharacterOrientation") as CharacterOrientation;
            // character!.getUpdirection(_tempVec3);


            Quat.fromAxisAngle(_tempQuat, Vec3.UP, math.toRadian(rotation));
            Quat.multiply(_tempQuat, _tempQuat, this.ik.rootNode.getWorldRotation()); //this.ik!.rootNode!.setWorldRotation(_tempQuat);
          }
        } // // Aligns the root forward to target direction after "Max Root Angle" has been exceeded.
        ;

        _proto._turnToTarget = function _turnToTarget() {
          this.turningToTarget = true;

          while (this.turnToTargetMlp > 0.0) {
            // this.turnToTargetMlp = Mathf.SmoothDamp(turnToTargetMlp, 0f, ref turnToTargetMlpV, turnToTargetTime);
            this.turnToTargetMlp -= game.deltaTime;
            if (this.turnToTargetMlp < 0.01) this.turnToTargetMlp = 0.0;
            return;
          }

          clearInterval(this._interval);
          this._interval = null;
          this.turnToTargetMlp = 1;
        };

        _proto._startCoroutine = function _startCoroutine(fb) {
          if (this._interval) {
            clearInterval(this._interval);
          }

          this._interval = setInterval(fb);
        };

        return AimControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ik", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "weight", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "targetSwitchSmoothTime", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "weightSmoothTime", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "smoothTurnTowardsTarget", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "maxRadiansDelta", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "maxMagnitudeDelta", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "slerpSpeed", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3.0;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "pivotOffsetFromRoot", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 0, 0);
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "minDistance", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.0;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "offset", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 0, 0);
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "maxRootAngle", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 45.0;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "turnToTarget", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "turnToTargetTime", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "useAnimatedAimDirection", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "animatedAimDirection", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 0, 1);
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/aim-ik.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ik-bone.ts', './ik-solver-aim.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCFloat, Component, Bone, IKSolverAim;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCFloat = module.CCFloat;
      Component = module.Component;
    }, function (module) {
      Bone = module.default;
    }, function (module) {
      IKSolverAim = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "4022do3adVMFotSYiH8nDlE", "aim-ik", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AimIK = exports('default', (_dec = ccclass('AimIK'), _dec2 = property({
        type: Node,
        tooltip: 'this node that we want to aim at ikPosition.'
      }), _dec3 = property({
        type: Node,
        tooltip: 'this node that we want to aim at ikPosition.'
      }), _dec4 = property({
        type: [Node],
        tooltip: 'bones node'
      }), _dec5 = property({
        type: [CCFloat],
        tooltip: 'bones weight'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AimIK, _Component);

        function AimIK() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.solver = new IKSolverAim(_this.node);

          _initializerDefineProperty(_this, "rootNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "aimNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boneNodes", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boneWeights", _descriptor4, _assertThisInitialized(_this));

          _this.enableAim = true;
          return _this;
        }

        var _proto = AimIK.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.boneNodes.forEach(function (node, index) {
            _this2.solver.bones.push(new Bone(node, _this2.boneWeights[index]));
          });
          this.solver.rootNode = this.rootNode;
          this.solver.aimNode = this.aimNode;
        };

        _proto.update = function update() {
          this.enableAim && this.solver.update();
        };

        _proto.lateUpdate = function lateUpdate() {
          this.enableAim && this.solver.lateUpdate();
        };

        return AimIK;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "rootNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "aimNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "boneNodes", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "boneWeights", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/animation-to-oribit.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './orbit-camera.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Quat, Animation, input, Input, Component, OrbitCamera;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Quat = module.Quat;
      Animation = module.Animation;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
    }, function (module) {
      OrbitCamera = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "9c9cbHvoP9DX5EFtWceqQFo", "animation-to-oribit", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var tempQuat = new Quat();
      var animation_to_oribit = exports('animation_to_oribit', (_dec = ccclass('animation_to_oribit'), _dec2 = property(Animation), _dec3 = property(OrbitCamera), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(animation_to_oribit, _Component);

        function animation_to_oribit() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ani", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "orbit", _descriptor2, _assertThisInitialized(_this));

          _this.touched = false;
          _this.timeoutID = undefined;
          return _this;
        }

        var _proto = animation_to_oribit.prototype;

        _proto.start = function start() {
          // this.ani = this.getComponent(Animation)
          // this.orbit = this.getComponent(OrbitCamera)
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
        };

        _proto.onTouchStart = function onTouchStart() {
          if (!this.orbit || !this.ani) {
            return;
          }

          this.touched = true;

          if (this.timeoutID) {
            clearTimeout(this.timeoutID);
          }

          this.ani.enabled = false;
          this.orbit.enabled = true;
        };

        _proto.onTouchEnd = function onTouchEnd() {
          var _this2 = this;

          if (!this.orbit || !this.ani) {
            return;
          }

          this.orbit.enabled = false;
          this.timeoutID = setTimeout(function () {
            _this2.touched = false;
            _this2.ani.enabled = true;
            _this2.timeoutID = undefined;
          }, 1000);
        };

        _proto.update = function update(dt) {
          if (this.orbit && !this.touched) {
            Quat.slerp(tempQuat, this.orbit.node.rotation, Quat.IDENTITY, dt * 7);
            this.orbit.node.rotation = tempQuat;
          }
        };

        return animation_to_oribit;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ani", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "orbit", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/animationgraph-move.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _applyDecoratedDescriptor, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, animation, Msg;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      animation = module.animation;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "4cc78tsgRFOp6z9sZ05BwP4", "animationgraph-move", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimationGraphMove = exports('AnimationGraphMove', (_dec = ccclass("AnimationGraphMove"), _dec(_class = (_class2 = /*#__PURE__*/function (_animation$StateMachi) {
        _inheritsLoose(AnimationGraphMove, _animation$StateMachi);

        function AnimationGraphMove() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _animation$StateMachi.call.apply(_animation$StateMachi, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "time", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "msg", _descriptor2, _assertThisInitialized(_this));

          _this._triggered = false;
          return _this;
        }

        var _proto = AnimationGraphMove.prototype;
        /**
         * Called right after a motion state is entered.
         * @param controller The animation controller it within.
         * @param motionStateStatus The status of the motion.
         */

        _proto.onMotionStateEnter = function onMotionStateEnter(controller, motionStateStatus) {// Can be overrode
        }
        /**
         * Called when a motion state is about to exit.
         * @param controller The animation controller it within.
         * @param motionStateStatus The status of the motion.
         */
        ;

        _proto.onMotionStateExit = function onMotionStateExit(controller, motionStateStatus) {
          // Can be overrode
          this._triggered = false;
        }
        /**
         * Called when a motion state updated except for the first and last frame.
         * @param controller The animation controller it within.
         * @param motionStateStatus The status of the motion.
         */
        ;

        _proto.onMotionStateUpdate = function onMotionStateUpdate(controller, motionStateStatus) {
          // Can be overrode
          if (motionStateStatus.progress > this.time && !this._triggered) {
            // 触发事件
            this._triggered = true;
            Msg.emit(this.msg);
          } else if (motionStateStatus.progress < this.time && this._triggered) {
            this._triggered = false;
          }
        }
        /**
         * Called right after a state machine is entered.
         * @param controller The animation controller it within.
         */
        ;

        _proto.onStateMachineEnter = function onStateMachineEnter(controller) {// Can be overrode
        }
        /**
         * Called right after a state machine is entered.
         * @param controller The animation controller it within.
         */
        ;

        _proto.onStateMachineExit = function onStateMachineExit(controller) {// Can be overrode
        };

        return AnimationGraphMove;
      }(animation.StateMachineComponent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "time", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "msg", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'msg_walk_sfx';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/astar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './singleton.ts', './data-structure.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, instantiate, Singleton, Stack;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      instantiate = module.instantiate;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      Stack = module.Stack;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9adba4beKpHbrekEG1z+Xiv", "astar", undefined);

      var AStar = exports('AStar', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(AStar, _Singleton);

        function AStar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this.map = void 0;
          _this.start_pos = void 0;
          _this.end_pos = void 0;
          _this.closeTable = [];
          _this.openTable = void 0;
          _this.max_x = 0;
          _this.max_z = 0;
          _this.dir = [[-1, 1], [0, 1], [1, 0], [-1, 0], [1, 0], [-1, -1], [0, -1], [1, -1]];
          _this._tempNode = void 0;
          _this._stop = true;
          return _this;
        }

        var _proto = AStar.prototype;

        _proto.initMap = function initMap(_map) {
          this.map = [];
          this.max_x = _map.length;
          this.max_z = _map[0].length; // init map

          for (var i = 0; i < this.max_x; i++) {
            var m = [];

            for (var j = 0; j < this.max_z; j++) {
              var v = {
                'f': -1,
                'state': _map[i][j]
              };
              m.push(v);
            }

            this.map.push(m);
          }

          console.log(this.map);
          this.openTable = new Stack(20);
          this.closeTable = this.createTable(this.max_x, this.max_z, 0);
          this.copyTable(this.closeTable, this.map);
        };

        _proto.setTestNode = function setTestNode(node) {
          this._tempNode = node;
        };

        _proto.testNode = function testNode(pos) {
          var inst = instantiate(this._tempNode);
          inst.parent = this._tempNode.parent;
          inst.setPosition(pos[0], 0, pos[1]);
        };

        _proto.find = function find(start_pos, end_pos) {
          console.log('start:', start_pos, 'end:', end_pos);
          this._stop = false;
          this.start_pos = start_pos;
          this.end_pos = end_pos; // Set start pos into open table.

          this.openTable.push([start_pos.x, start_pos.z]);
          this.checkCurrent(start_pos);
        };

        _proto.update = function update() {
          if (this._stop) return;

          if (this.openTable.size() > 0) {
            var np = this.openTable.pop();
            this.testNode(np);
            this.checkCurrent({
              'x': np[0],
              'z': np[1]
            });
          } else {
            console.log('can not find target pos.');
          }
        };

        _proto.checkCurrent = function checkCurrent(pos) {
          // Check is end pos.
          if (pos.x === this.end_pos.x && pos.z === this.end_pos.z) {
            console.log('find end pos.');
            this._stop = true;
            return;
          } // Set remove state in open table.


          this.map[pos.x][pos.z].state = 0;
          this.openTable.pop(); // Set current pos in close table.

          this.closeTable[pos.x][pos.z] = 1; // Calculate around

          for (var i = 0; i < this.dir.length; i++) {
            var nx = pos.x + this.dir[i][0];
            var nz = pos.z + this.dir[i][1]; // Check bounder.

            if (nx < 0 || nz < 0 || nx >= this.max_x || nz >= this.max_z) {
              continue;
            } // Check is not close table.


            if (this.closeTable[nx][nz] === 1) continue; // Check is dir cost.

            var f = this.f_cost({
              'x': nx,
              'z': nz
            }, this.end_pos);
            this.map[nx][nz].cost = f; // Push new check point into open table.

            this.openTable.push([nx, nz]);
          }
        };

        _proto.f_cost = function f_cost(cur_pos, end_pos) {
          return Math.abs(cur_pos.x - end_pos.x) + Math.abs(cur_pos.z - end_pos.z);
        };

        _proto.createTable = function createTable(x, y, value) {
          var l0 = x;
          var l1 = y;
          var table = [];

          for (var i = 0; i < l0; i++) {
            var m = [];

            for (var j = 0; j < l1; j++) {
              m.push(value);
            }

            table.push(m);
          }

          return table;
        };

        _proto.copyTable = function copyTable(target, source) {
          var l0 = this.max_x;
          var l1 = this.max_z;

          for (var i = 0; i < l0; i++) {
            for (var j = 0; j < l1; j++) {
              target[i][j] = source[i][j];
            }
          }
        };

        _proto.clearTable = function clearTable(table) {
          var l0 = table.length;
          var l1 = table[0].length;

          for (var i = 0; i < l0; i++) {
            for (var j = 0; j < l1; j++) {
              table[i][j] = 0;
            }
          }
        };

        return AStar;
      }(Singleton));
      /*
           findMinCostPoint(cur_pos) {
               var min_cost_pos = { 'x': -1, 'z': -1 };
               // Calculate f_cost
              for(let i = 0; i < this.dir.length; i++) {
                  var nx = cur_pos.x + this.dir[i][0];
                  var nz = cur_pos.z + this.dir[i][1];
                   // Check bounder.
                  if (nx < 0 || nz < 0 || nx >= this.max_x || nz >= this.max_z) {
                      continue;
                  }
                   // Check is not close table.
                  if (this.closeTable[nx][nz] === 1) continue;
                   // Check is 
               }
               if (min_cost_pos.x === -1) {
                  console.error(' can not find min cost pos:', cur_pos);
              }
               //for()
           }
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/base-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './env', './href-setting.ts', './pass-utils.ts', './utils2.ts', './setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _createClass, _initializerDefineProperty, cclegacy, _decorator, CCString, Node, director, Vec2, gfx, EDITOR, HrefSetting, passUtils, getCameraUniqueID, getRenderArea, settings;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _createClass = module.createClass;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Node = module.Node;
      director = module.director;
      Vec2 = module.Vec2;
      gfx = module.gfx;
    }, function (module) {
      EDITOR = module.EDITOR;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }, function (module) {
      passUtils = module.passUtils;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
      getRenderArea = module.getRenderArea;
    }, function (module) {
      settings = module.settings;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;

      cclegacy._RF.push({}, "a5cad28rH1GHouQWrQfoVu6", "base-stage", undefined);

      var ccclass = _decorator.ccclass,
          type = _decorator.type,
          property = _decorator.property;
      var _BaseStageID = 0;
      var BaseStage = exports('BaseStage', (_dec = ccclass('BaseStage'), _dec2 = property(CCString), _dec3 = type(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function () {
        function BaseStage() {
          this._id = 0;
          this._materialName = 'blit-screen';

          _initializerDefineProperty(this, "enable", _descriptor, this);

          _initializerDefineProperty(this, "name", _descriptor2, this);

          _initializerDefineProperty(this, "shadingScale", _descriptor3, this);

          _initializerDefineProperty(this, "customSize", _descriptor4, this);

          _initializerDefineProperty(this, "outputNames", _descriptor5, this);

          _initializerDefineProperty(this, "targetStageNode", _descriptor6, this);

          this.useCustomSize = false;
          this.renderToScreen = false;
          this.rtCount = 1;
          this.renderTextures = [];
          this._rect = new gfx.Rect(0, 0, 1, 1);
          this.clearColors = [new gfx.Color(0, 0, 0, 1)];
          this.requestDepth = false;
          this.lastStage = void 0;
          this.uniqueStage = false;
          this._renderArea = new gfx.Rect();
          this._id = _BaseStageID++;
        } // auto load material name


        var _proto = BaseStage.prototype;

        _proto.slotName = function slotName(camera, index) {
          if (index === void 0) {
            index = 0;
          }

          var name = this.outputNames[index] + this.name;

          if (this.uniqueStage) {
            return name;
          }

          return name + "_" + this._id + "_" + getCameraUniqueID(camera);
        };

        _proto.finalShadingScale = function finalShadingScale() {
          return this.shadingScale * director.root.pipeline.pipelineSceneData.shadingScale;
        };

        _proto.checkEnable = function checkEnable() {
          return this.enable;
        };

        _proto.renderProfiler = function renderProfiler(camera) {
          if (HrefSetting.showFps && settings.renderProfiler && !EDITOR) {
            passUtils.pass.showStatistics = true;
            settings.renderProfiler = false;
          }
        } // protected _finalShadingSize = new Vec2;
        // finalShadingSize (camera: renderer.scene.Camera) {
        //     let shadingScale = this.finalShadingScale();
        //     let width = game.canvas!.width;
        //     let height = game.canvas!.height;
        //     if (this.useCustomSize) {
        //         width = this.customSize.x;
        //         height = this.customSize.y;
        //     }
        //     this._finalShadingSize.set(
        //         Math.floor(width * shadingScale),
        //         Math.floor(height * shadingScale)
        //     )
        //     return this._finalShadingSize;
        // }
        ;

        _proto.getRenderArea = function getRenderArea$1(camera) {
          var shadingScale = this.finalShadingScale();
          var area = getRenderArea(this._renderArea, camera, camera.window.width * shadingScale, camera.window.height * shadingScale);
          area.width = Math.floor(area.width);
          area.height = Math.floor(area.height);
          return area;
        };

        _proto.destroy = function destroy() {};

        _proto.render = function render(camera, ppl) {};

        _createClass(BaseStage, [{
          key: "materialName",
          get: function get() {
            return this._materialName;
          }
        }, {
          key: "material",
          get: function get() {
            return globalThis.pipelineAssets.getMaterial(this._materialName);
          }
        }, {
          key: "outputTexture",
          get: function get() {
            return null;
          }
        }]);

        return BaseStage;
      }(), _class3.outputMap = new Map(), _class3.stages = new Map(), _class3.forwardStage = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "enable", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "name", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'BaseStage';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "shadingScale", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "customSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec2(1024, 1024);
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "outputNames", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "targetStageNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/bind.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './singleton.ts', './local.ts', './GameQuality.ts', './sound.ts', './res-cache.ts', './level.ts', './save.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Msg, Singleton, Local, GameQuality, Sound, ResCache, Level, Save;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      Local = module.Local;
    }, function (module) {
      GameQuality = module.GameQuality;
    }, function (module) {
      Sound = module.Sound;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      Level = module.Level;
    }, function (module) {
      Save = module.Save;
    }],
    execute: function () {
      cclegacy._RF.push({}, "87dbck8mEZM4qc/S2vmPPG8", "bind", undefined);

      var Bind = exports('Bind', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(Bind, _Singleton);

        function Bind() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this._map = {};
          _this.totalEvents = 0;
          return _this;
        }

        var _proto = Bind.prototype;

        _proto.init = function init() {
          // Registered events are used to count the total number of events.
          Msg.on('msg_count_events', this.countEvents.bind(this)); // Bind the skill detail 0.

          this._map['txt_upgrade_life_detail'] = function () {
            return Level.Instance.getUpgradeCardInfo(0);
          }; // Bind the skill detail 1.


          this._map['txt_upgrade_attack_detail'] = function () {
            return Level.Instance.getUpgradeCardInfo(1);
          }; // Bind the skill detail 2.


          this._map['txt_upgrade_defense_detail'] = function () {
            return Level.Instance.getUpgradeCardInfo(2);
          }; // Bind the button event of skill upgrade tab 0.


          this._map['btn_select_upgrade_0'] = function () {
            Level.Instance.upgradePlayerAttributes(0);
            Msg.emit('back');
          }; // Bind the button event of skill upgrade tab 1.


          this._map['btn_select_upgrade_1'] = function () {
            Level.Instance.upgradePlayerAttributes(1);
            Msg.emit('back');
          }; // Bind the button event of skill upgrade tab 2.


          this._map['btn_select_upgrade_2'] = function () {
            Level.Instance.upgradePlayerAttributes(2);
            Msg.emit('back');
          }; // Bind the current language name.


          this._map['txt_language'] = function () {
            return Local.Instance.getShowName();
          }; // Bind the current game quality name.


          this._map['txt_game_quality'] = function () {
            return GameQuality.Instance.getShowName();
          }; // Bind the current volume value.


          this._map['sli_sound'] = function () {
            return Sound.volumeSound;
          }; // Bind the current music volume value.


          this._map['sli_music'] = function () {
            return Sound.volumeMusic;
          }; // Bind game result score.


          this._map['spr_score'] = function () {
            var imgSrc = "txt_score_" + Level.Instance.getLevelScore();
            return ResCache.Instance.getSprite(imgSrc);
          }; // Bind level over killed value.


          this._map['txt_killed'] = function () {
            return Save.Instance.getStatistics('killedTimes');
          }; // Bind level over hit value.


          this._map['txt_hit_head'] = function () {
            return Save.Instance.getStatistics('hit_headTimes');
          }; // Bind level over Hit Rate.


          this._map['txt_hsp'] = function () {
            return (Save.Instance.getStatistics('hit_rate') * 100).toFixed(2) + " %";
          }; // Bind level over hit value.


          this._map['txt_be_hit'] = function () {
            return Save.Instance.getStatistics('be_hit_times');
          }; // Bind dodge rate.


          this._map['txt_dodge'] = function () {
            return (Save.Instance.getStatistics('dodge_rate') * 100).toFixed(2) + " %";
          }; // Bind level score.


          this._map['txt_level_score'] = function () {
            return "" + Save.Instance.getStatistics('level_score');
          }; // Bind day value.


          this._map['txt_day_num'] = function () {
            return "" + Save.Instance.get('day');
          };
        }
        /**
         * The method is used to initialize the event binder.
         * @param data The data is game events mapping.
         */
        ;

        _proto.initData = function initData(data) {
          var _this2 = this;

          this.init();
          data.forEach(function (events) {
            var name = events.name;
            var event = events.event;
            var data = events.data;
            if (!events.data) data = undefined;

            _this2._map[name] = function () {
              Msg.emit(event, data);
            };
          });
        }
        /**
         * This method is used to execute specific events by key.
         * @param key The name of the event to execute.
         */
        ;

        _proto.on = function on(key) {
          var event = this._map[key];

          if (event) {
            event();
            this.countEvents();
          } else {
            console.warn('Can not find key:' + key);
          }
        }
        /**
         * This method is to get this event and return the result of executing the method.
         * @param key The key is event to execute.
         * @returns 
         */
        ;

        _proto.get = function get(key) {
          return this._map[key]();
        }
        /**
         * This method is used to determine if the event is mapped or not.
         * @param key The key of the event to be judged.
         * @returns 
         */
        ;

        _proto.hasBind = function hasBind(key) {
          return this._map[key] !== undefined;
        }
        /**
         * Current frame event execution statistics.
         */
        ;

        _proto.countEvents = function countEvents() {
          this.totalEvents++;
        }
        /**
         * Check if the count needs to be refreshed according to the current frame.
         */
        ;

        _proto.checkRefresh = function checkRefresh() {
          if (this.totalEvents > 0) {
            Msg.emit("refresh_ui");
            this.totalEvents = 0;
          }
        }
        /**
         * This method is an update function for each frame.
         * @param deltaTime This value is the execution time per frame.
         */
        ;

        _proto.update = function update(deltaTime) {
          // Check if a refresh is needed.
          this.checkRefresh();
        };

        return Bind;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/blit-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './base-stage.ts', './utils2.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, rendering, gfx, BaseStage, getLoadOpOfClearFlag;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      rendering = module.rendering;
      gfx = module.gfx;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      getLoadOpOfClearFlag = module.getLoadOpOfClearFlag;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "162c50lqCVDC7q2n+oadaN7", "blit-stage", undefined);

      var type = _decorator.type,
          property = _decorator.property,
          ccclass = _decorator.ccclass;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var BlitStage = exports('BlitStage', (_dec = ccclass('BlitStage'), _dec2 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(BlitStage, _BaseStage);

        function BlitStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._materialName = 'blit-screen';

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "textureFormat", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BlitStage.prototype;

        _proto.render = function render(camera, ppl) {
          if (!this.material) {
            return;
          }

          var area = this.getRenderArea(camera);
          var width = area.width;
          var height = area.height;
          var isOffScreen = !this.renderToScreen;
          var slot0 = this.slotName(camera, 0);

          if (!ppl.containsResource(slot0)) {
            if (!isOffScreen) {
              ppl.addRenderTexture(slot0, this.textureFormat, width, height, camera.window);
            } else {
              ppl.addRenderTarget(slot0, this.textureFormat, width, height, ResourceResidency.MANAGED);
            }
          }

          var pass = ppl.addRasterPass(width, height, 'Blit');
          pass.name = slot0 + "_Pass";
          var inputName = this.lastStage.slotName(camera, 0);

          if (ppl.containsResource(inputName)) {
            var cv = new ComputeView();
            cv.name = 'inputTexture';
            pass.addComputeView(inputName, cv);
          }

          var passView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, isOffScreen ? LoadOp.CLEAR : getLoadOpOfClearFlag(camera.clearFlag, AttachmentType.RENDER_TARGET), StoreOp.STORE, camera.clearFlag, new Color(camera.clearColor.x, camera.clearColor.y, camera.clearColor.z, camera.clearColor.w));
          pass.addRasterView(slot0, passView);

          if (!isOffScreen) {
            // pass.addQueue(QueueHint.NONE).addFullscreenQuad(
            //     this.material, 0, SceneFlags.NONE,
            // );
            pass.addQueue(QueueHint.RENDER_TRANSPARENT).addCameraQuad(camera, this.material, 0, SceneFlags.NONE);
          }
        };

        return BlitStage;
      }(BaseStage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'BlitStage';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "textureFormat", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return gfx.Format.RGBA8;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/bloom-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './base-stage.ts', './utils2.ts', './bloom.ts', './pass-utils.ts', './setting.ts', './href-setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, rendering, gfx, Vec4, BaseStage, getCameraUniqueID, BloomSetting, passUtils, settings, HrefSetting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      rendering = module.rendering;
      gfx = module.gfx;
      Vec4 = module.Vec4;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
    }, function (module) {
      BloomSetting = module.BloomSetting;
    }, function (module) {
      passUtils = module.passUtils;
    }, function (module) {
      settings = module.settings;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "8939f1rzhVPHK+0SSc+e69d", "bloom-stage", undefined);

      var type = _decorator.type,
          property = _decorator.property,
          ccclass = _decorator.ccclass;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var MAX_BLOOM_FILTER_PASS_NUM = exports('MAX_BLOOM_FILTER_PASS_NUM', 6);
      var BLOOM_PREFILTERPASS_INDEX = exports('BLOOM_PREFILTERPASS_INDEX', 0);
      var BLOOM_DOWNSAMPLEPASS_INDEX = exports('BLOOM_DOWNSAMPLEPASS_INDEX', 1);
      var BLOOM_UPSAMPLEPASS_INDEX = exports('BLOOM_UPSAMPLEPASS_INDEX', BLOOM_DOWNSAMPLEPASS_INDEX + MAX_BLOOM_FILTER_PASS_NUM);
      var BLOOM_COMBINEPASS_INDEX = exports('BLOOM_COMBINEPASS_INDEX', BLOOM_UPSAMPLEPASS_INDEX + MAX_BLOOM_FILTER_PASS_NUM);
      var defaultSetting = {
        enable: true,
        threshold: 1,
        iterations: 2,
        intensity: 0.2,
        blurRadius: 1
      };
      var tempVec4 = new Vec4();
      var clampSampler = new gfx.Sampler(new gfx.SamplerInfo(gfx.Filter.LINEAR, gfx.Filter.LINEAR, undefined, gfx.Address.CLAMP, gfx.Address.CLAMP), 0);
      var BloomStage = exports('BloomStage', (_dec = ccclass('custom.BloomStage'), _dec2 = property({
        override: true
      }), _dec3 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(BloomStage, _BaseStage);

        function BloomStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._materialName = 'blit-screen';
          _this.uniqueStage = true;

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "outputNames", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BloomStage.prototype;

        _proto.checkEnable = function checkEnable() {
          var setting = BloomSetting.instance || defaultSetting;
          return this.enable && setting.enable && !settings.bakingReflection && !!HrefSetting.bloom;
        };

        _proto.render = function render(camera, ppl) {
          // passUtils.clearFlag = gfx.ClearFlagBit.NONE;
          passUtils.clearFlag = gfx.ClearFlagBit.COLOR;
          Vec4.set(passUtils.clearColor, 0, 0, 0, 1);
          var material = globalThis.pipelineAssets.getMaterial('bloom');
          passUtils.material = material;
          var setting = BloomSetting.instance || defaultSetting;
          var format = Format.RGBA16F;
          var cameraID = getCameraUniqueID(camera);
          var cameraName = "Camera" + cameraID;
          var area = this.getRenderArea(camera);
          var width = area.width;
          var height = area.height; // Start bloom
          // ==== Bloom prefilter ===

          var bloomPassPrefilterRTName = "dsBloomPassPrefilterColor" + cameraName;
          width >>= 1;
          height >>= 1;
          material.setProperty('texSize', new Vec4(0, 0, setting.threshold, 0), BLOOM_PREFILTERPASS_INDEX);
          var input0 = this.lastStage.slotName(camera, 0);
          passUtils.addRasterPass(width, height, 'bloom-prefilter', "CameraBloomPrefilterPass" + cameraID).setViewport(area.x, area.y, width, height).setPassInput(input0, 'outputResultMap').addRasterView(bloomPassPrefilterRTName, format).blitScreen(BLOOM_PREFILTERPASS_INDEX).version(); // === Bloom downSampler ===

          var inputName = bloomPassPrefilterRTName;
          var iterations = setting.iterations;
          var downIndex = 0;

          for (var i = 0; i < iterations; ++i) {
            width >>= 1;
            height >>= 1;

            for (var j = 0; j < 2; j++) {
              var params = new Vec4();
              var bloomPassDownSampleRTName = "dsBloomPassDownSampleColor" + cameraName + downIndex;

              if (j) {
                params.set(0, setting.blurRadius / width);
              } else {
                params.set(setting.blurRadius / width, 0);
              }

              material.setProperty('texSize', params, BLOOM_DOWNSAMPLEPASS_INDEX + downIndex);
              var layoutName = "bloom-downsample" + downIndex;
              passUtils.addRasterPass(width, height, layoutName, "CameraBloomDownSamplePass" + cameraID + downIndex).setViewport(area.x, area.y, width, height).setPassInput(inputName, 'bloomTexture').addRasterView(bloomPassDownSampleRTName, format).blitScreen(BLOOM_DOWNSAMPLEPASS_INDEX + downIndex).version(); // let setter = (passUtils.pass as any);
              // setter.addConstant('BloomUBO', layoutName);
              // setter.setSampler('bloomTexture', clampSampler)

              inputName = bloomPassDownSampleRTName;
              downIndex++;
            }
          } // === Bloom upSampler ===


          for (var _i = iterations - 2; _i >= 0; --_i) {
            width <<= 1;
            height <<= 1;
            material.setProperty('texSize', new Vec4(1, 1, 0, 0), BLOOM_UPSAMPLEPASS_INDEX + _i);
            var bloomPassUpSampleRTName = "dsBloomPassUpSampleColor" + cameraName + _i;
            passUtils.addRasterPass(width, height, "bloom-upsample" + _i, "CameraBloomUpSamplePass" + cameraID + _i).setViewport(area.x, area.y, width, height).setPassInput(inputName, 'outputResultMap').setPassInput("dsBloomPassDownSampleColor" + cameraName + (_i * 2 + 1), 'bloomTexture').addRasterView(bloomPassUpSampleRTName, format).blitScreen(BLOOM_UPSAMPLEPASS_INDEX + _i).version();
            inputName = bloomPassUpSampleRTName;
          } // === Bloom Combine Pass ===


          var slot0 = this.slotName(camera, 0);
          material.setProperty('texSize', new Vec4(setting.intensity, 1, 0, 0), BLOOM_COMBINEPASS_INDEX);
          passUtils.addRasterPass(area.width, area.height, 'bloom-combine', "CameraBloomCombinePass" + cameraID).setPassInput(input0, 'outputResultMap').setPassInput(inputName, 'bloomTexture').addRasterView(slot0, format).blitScreen(BLOOM_COMBINEPASS_INDEX).version();
        };

        return BloomStage;
      }(BaseStage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'BloomStage';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "outputNames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ['BloomPassCombineColor'];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/bloom.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;

      cclegacy._RF.push({}, "99a2aAEXIlGU6gxUaHh/fuz", "bloom", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var BloomSetting = exports('BloomSetting', (_dec = ccclass('BloomSetting'), _dec(_class = executeInEditMode(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BloomSetting, _Component);

        function BloomSetting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "enable", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "threshold", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iterations", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "intensity", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "blurRadius", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BloomSetting.prototype;

        _proto.onEnable = function onEnable() {
          BloomSetting.instance = this;
        };

        _proto.onDisable = function onDisable() {
          if (BloomSetting.instance === this) {
            BloomSetting.instance = undefined;
          }
        };

        return BloomSetting;
      }(Component), _class3.instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "enable", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "threshold", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iterations", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "intensity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.8;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "blurRadius", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/brain.ts", ['cc', './res-cache.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, random, ResCache;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      random = module.random;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e413cJPsaZPVKZ581gpLPn+", "brain", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Brain = exports('Brain', /*#__PURE__*/function () {
        function Brain(dataPath, actor) {
          this.data = {};
          this.actor = void 0;
          this.data = ResCache.Instance.getJson(dataPath).json;
          this.actor = actor;
        }

        var _proto = Brain.prototype;

        _proto.update = function update(deltaTime) {};

        _proto.runNode = function runNode(data) {
          // find action.
          if (data.children === undefined) {
            this.action(data.action);
          } else {
            console.log('run node:', data.node);
            this[data.node](data.children);
          }
        };

        _proto.random = function random$1(data) {
          var rand = random();

          for (var i = 0; i < data.length; i++) {
            var info = data[i];

            if (info.value < rand) {
              this.runNode(info);
              return;
            }
          }

          console.error('bad config data:', data);
        };

        _proto.condition = function condition(data) {
          console.log('condition:', data);

          for (var i = 0; i < data.length; i++) {
            var info = data[i];

            if (info.value === 'canEatPlayer') {
              this.runNode(info);
              return;
            }
          }

          console.log('bad logic design:', data);
        };

        _proto.sequence = function sequence(data) {
          console.log('sequence:', data);

          for (var i = 0; i < data.length; i++) {
            var info = data[i];
            this.runNode(info);
          }
        };

        _proto.action = function action(data) {
          console.log('do action:', data);
          this.actor["do"](data);
        };

        return Brain;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/buff.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './singleton.ts', './res-cache.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Singleton, ResCache;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      cclegacy._RF.push({}, "052977TCF5GD7IVf1w0O4Bf", "buff", undefined);

      var Buff = exports('Buff', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(Buff, _Singleton);

        function Buff() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this._data = {};
          return _this;
        }

        var _proto = Buff.prototype;

        _proto.init = function init() {
          this._data = ResCache.Instance.getJson('data-buff').json;
        };

        _proto.get = function get(key) {
          if (this._data[key]) {
            return this._data[key];
          } else {
            console.error('can not find buff:', key);
          }
        };

        return Buff;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/camera-auto-bind-occlusion.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './static-occlusion-culling.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, find, Camera, Component, StaticOcclusionCulling;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      find = module.find;
      Camera = module.Camera;
      Component = module.Component;
    }, function (module) {
      StaticOcclusionCulling = module.StaticOcclusionCulling;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "37314AQD1xLKIBSq2DoJyqP", "camera-auto-bind-occlusion", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CameraAutoBindOcclusion = exports('CameraAutoBindOcclusion', (_dec = ccclass('CameraAutoBindOcclusion'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CameraAutoBindOcclusion, _Component);

        function CameraAutoBindOcclusion() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = CameraAutoBindOcclusion.prototype;

        _proto.onEnable = function onEnable() {
          var culling = find('static-occlusion-culling');

          if (culling === undefined || culling === null) {
            console.warn("Can not find static-occlusion-culling.");
            return;
          }

          var occlusionCulling = culling.getComponent(StaticOcclusionCulling);
          if (occlusionCulling === null) throw new Error("culling node not find 'StaticOcclusionCulling'");
          occlusionCulling.camera = this.getComponent(Camera);
        };

        return CameraAutoBindOcclusion;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/camera-controller.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './g-math.ts', './util.ts', './smooth-local-z.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, v3, find, Component, Msg, GVec3, UtilVec3, SmoothLocalZ;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      v3 = module.v3;
      find = module.find;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      GVec3 = module.GVec3;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      SmoothLocalZ = module.SmoothLocalZ;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "ea461kUoi5AnrnPwoN0wJvS", "camera-controller", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CameraController = exports('CameraController', (_dec = ccclass('CameraController'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CameraController, _Component);

        function CameraController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "smooth", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxOffsetZ", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "target", _descriptor3, _assertThisInitialized(_this));

          _this._velocity = new Vec3(0, 0, 0);
          _this._followTarget = Object.create(null);
          _this._offsetZ = 0;
          _this._offsetZScale = 1;
          _this._target = v3(0, 0, 0);
          _this._dir = v3(0, 0, 0);
          _this._pos = v3(0, 0, 0);
          _this.controlZ = Object.create(null);
          return _this;
        }

        var _proto = CameraController.prototype;

        _proto.start = function start() {
          this._followTarget = find(this.target);
          this._target = this._followTarget.position.clone();
          UtilVec3.copy(this._pos, this._target);
          this.node.setWorldPosition(this._target);
          this.controlZ = this.node.children[0].children[0].getComponent(SmoothLocalZ);
          Msg.bind('set_camera_len', this.setLen, this);
          Msg.bind('set_offset_scale', this.setOffsetScale, this);
          console.log('camera controller:', this.node.worldPosition);
        };

        _proto.onDestroy = function onDestroy() {
          Msg.off('set_camera_len', this.setLen);
          Msg.off('set_offset_scale', this.setOffsetScale);
        };

        _proto.setLen = function setLen(offset) {
          this.controlZ.setOffset(offset);
        };

        _proto.setOffsetScale = function setOffsetScale(scale) {//this._offsetZScale = 1 - scale;
        };

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          this.smoothDamp(deltaTime);
        };

        _proto.smoothDamp = function smoothDamp(deltaTime) {
          //UtilVec3.copy(this._pos, this.node.position);
          UtilVec3.copy(this._target, this._followTarget.position);
          UtilVec3.copy(this._dir, this._followTarget.forward);
          if (this._offsetZScale > 0) this._target.add(this._dir.multiplyScalar(this._offsetZ * this._offsetZScale));
          GVec3.smoothDamp(this._pos, this._target, this._velocity, this.smooth, deltaTime); //this._pos = val[0];
          //this._velocity = val[1];

          this.node.setWorldPosition(this._pos);
        };

        return CameraController;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "smooth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "maxOffsetZ", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "target", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'actor';
        }
      })), _class2)) || _class));
      /*
      smoothLerp(deltaTime: number) {
          var pos = this.node.worldPosition;
          var target = this._followTarget.worldPosition;
          Vec3.lerp(pos, this._followTarget.worldPosition, pos, deltaTime * this.smooth);
      }
      */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/camera-fps.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-base.ts', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, v3, Component, ActorBase, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      ActorBase = module.ActorBase;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "893ddTfpyVCPq006JFECGnc", "camera-fps", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var camera_fps = exports('camera_fps', (_dec = ccclass('camera_fps'), _dec2 = property(Node), _dec3 = property(ActorBase), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(camera_fps, _Component);

        function camera_fps() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.angle = v3(0, 0, 0);

          _initializerDefineProperty(_this, "root", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_actor", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = camera_fps.prototype;

        _proto.start = function start() {
          var _this$root;

          this._actor = (_this$root = this.root) == null ? void 0 : _this$root.getComponent(ActorBase);
        };

        _proto.update = function update(deltaTime) {
          this.updateAngle();
        };

        _proto.updateAngle = function updateAngle() {
          UtilVec3.copy(this.angle, this.node.eulerAngles);
          this.angle.x = this._actor._angleVertical;
          this.node.setRotationFromEuler(this.angle);
        };

        return camera_fps;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_actor", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/camera-move-target.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './msg.ts', './sensor-ray-node-to-node.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCFloat, v3, Vec3, Component, UtilVec3, Msg, SensorRayNodeToNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCFloat = module.CCFloat;
      v3 = module.v3;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      SensorRayNodeToNode = module.SensorRayNodeToNode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "d4de4av0rlIV6iZZOG0ZmJ+", "camera-move-target", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CameraMoveTarget = exports('CameraMoveTarget', (_dec = ccclass('CameraMoveTarget'), _dec2 = property({
        type: Node,
        tooltip: 'Target Node'
      }), _dec3 = property({
        type: CCFloat,
        tooltip: 'Smooth position move.'
      }), _dec4 = property({
        type: CCFloat,
        tooltip: 'Smooth angle.'
      }), _dec5 = property({
        type: CCFloat,
        tooltip: 'Smooth position move.'
      }), _dec6 = property({
        type: Node,
        tooltip: 'Camera Node.'
      }), _dec7 = property({
        type: [Node],
        tooltip: 'Target node list.'
      }), _dec8 = property({
        type: CCFloat,
        tooltip: 'Start the waiting time.'
      }), _dec9 = property({
        type: Node,
        tooltip: 'Look at target node.'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CameraMoveTarget, _Component);

        function CameraMoveTarget() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "targetNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smoothSlowMove", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smoothAngle", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smoothFastMove", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "cameraNode", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "targets", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "waitTime", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lookAtTarget", _descriptor8, _assertThisInitialized(_this));

          _this.currentPosition = v3(0, 0, 0);
          _this.currentAngle = v3(0, 0, 0);
          _this.sensor = void 0;
          _this.movePosition = v3(0, 0, 0);
          _this.smoothMove = 5.0;
          return _this;
        }

        var _proto = CameraMoveTarget.prototype;

        _proto.start = function start() {
          Msg.on('msg_change_tps_camera_target', this.setTarget.bind(this));
          UtilVec3.copy(this.currentPosition, this.cameraNode.position);
          UtilVec3.copy(this.currentAngle, this.cameraNode.eulerAngles);
          this.sensor = this.getComponent(SensorRayNodeToNode);
        };

        _proto.onDestroy = function onDestroy() {
          Msg.off('msg_change_tps_camera_target', this.setTarget.bind(this));
        };

        _proto.update = function update(deltaTime) {
          var _this$cameraNode, _this$cameraNode2, _this$lookAtTarget;

          if (this.waitTime > 0) {
            this.waitTime -= deltaTime;
            return;
          }

          if (!this.targetNode) return; // Calculate move position.

          if (this.sensor.hitPoint.length() > 0) {
            UtilVec3.copy(this.movePosition, this.sensor.hitPoint);
            this.movePosition.subtract(this.node.worldPosition);
            var length = this.movePosition.length();
            UtilVec3.copy(this.movePosition, this.targetNode.position);
            this.movePosition.subtract(this.node.position).normalize().multiplyScalar(length);
            this.smoothMove = this.smoothFastMove;
          } else {
            UtilVec3.copy(this.movePosition, this.targetNode.position);
            this.smoothMove = this.smoothSlowMove;
          } //const targetPosition = this.sensor!.hitPoint.length() > 0 ? this.sensor!.hitPoint : this.targetNode.position;
          // Smooth move position.


          Vec3.lerp(this.currentPosition, this.currentPosition, this.movePosition, this.smoothMove * deltaTime);
          (_this$cameraNode = this.cameraNode) == null ? void 0 : _this$cameraNode.setPosition(this.currentPosition); // Smooth move angle.

          Vec3.lerp(this.currentAngle, this.currentAngle, this.targetNode.eulerAngles, this.smoothAngle * deltaTime);
          (_this$cameraNode2 = this.cameraNode) == null ? void 0 : _this$cameraNode2.setRotationFromEuler(this.currentAngle); // Set Look at point.

          (_this$lookAtTarget = this.lookAtTarget) == null ? void 0 : _this$lookAtTarget.setPosition(0, 0, -this.cameraNode.position.z - 5);
        };

        _proto.setTarget = function setTarget(index) {
          this.targetNode = this.targets[index];
          this.sensor.endNode = this.targetNode;
        };

        return CameraMoveTarget;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "smoothSlowMove", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5.0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "smoothAngle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5.0;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "smoothFastMove", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "cameraNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "targets", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "waitTime", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lookAtTarget", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/camera-msg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './static-occlusion-culling.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Camera, find, Component, Msg, StaticOcclusionCulling;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      find = module.find;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      StaticOcclusionCulling = module.StaticOcclusionCulling;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "6ec11Syo3ZN5J5QUf/RVjXg", "camera-msg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CameraMsg = exports('CameraMsg', (_dec = ccclass('CameraMsg'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CameraMsg, _Component);

        function CameraMsg() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "msg", _descriptor, _assertThisInitialized(_this));

          _this._cameraNode = void 0;
          _this._camera = void 0;
          return _this;
        }

        var _proto = CameraMsg.prototype;

        _proto.start = function start() {
          Msg.bind(this.msg, this.setCamera, this);
          this._cameraNode = this.node.children[0];
          this._camera = this._cameraNode.getComponent(Camera);
        };

        _proto.setCamera = function setCamera(active) {
          this._cameraNode.active = active;

          if (active) {
            var culling = find('static-occlusion-culling');

            if (culling === undefined || culling === null) {
              console.warn("Can not find static-occlusion-culling.");
              return;
            }

            var occlusionCulling = culling.getComponent(StaticOcclusionCulling);
            if (occlusionCulling === null) throw new Error("culling node not find 'StaticOcclusionCulling'");
            if (this._camera) occlusionCulling.camera = this._camera;
          }
        };

        return CameraMsg;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "msg", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "msg_set_camera";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/camera-setting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './npm.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Camera, Component, InPlayMode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Camera = module.Camera;
      Component = module.Component;
    }, function (module) {
      InPlayMode = module.InPlayMode;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "52b2fAWR29Md4fbcmUHQI+k", "camera-setting", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var CameraSetting = exports('CameraSetting', (_dec = ccclass('CameraSetting'), _dec(_class = executeInEditMode(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CameraSetting, _Component);

        function CameraSetting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.camera = void 0;

          _initializerDefineProperty(_this, "isMainCamera", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pipeline", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CameraSetting.prototype;

        _proto.__preload = function __preload() {
          this.camera = this.getComponent(Camera);
        };

        _createClass(CameraSetting, null, [{
          key: "mainCamera",
          get: function get() {
            if (!InPlayMode) {
              return globalThis.cce.Camera._camera;
            }

            if (this.main) {
              return this.main.camera;
            }

            return null;
          }
        }]);

        return CameraSetting;
      }(Component), _class3.main = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isMainCamera", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pipeline", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'main';
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/camera-tps.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './actor-move.ts', './msg.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCFloat, v3, math, Component, UtilVec3, ActorMove, Msg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCFloat = module.CCFloat;
      v3 = module.v3;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      ActorMove = module.ActorMove;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "d925fkhBbFMlpxpYVQ/aIgE", "camera-tps", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CameraTps = exports('CameraTps', (_dec = ccclass('CameraTps'), _dec2 = property(Node), _dec3 = property({
        type: ActorMove,
        tooltip: 'Test actor move.'
      }), _dec4 = property(CCFloat), _dec5 = property(CCFloat), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CameraTps, _Component);

        function CameraTps() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "rotationNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "actorMove", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smoothAngle", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smoothHeight", _descriptor4, _assertThisInitialized(_this));

          _this.targetAngle = v3(0, 0, 0);
          _this.currentAngle = v3(0, 0, 0);
          _this.targetPosition = v3(0, 0, 0);
          _this.currentPosition = v3(0, 0, 0);
          return _this;
        }

        var _proto = CameraTps.prototype;

        _proto.start = function start() {
          UtilVec3.copy(this.targetAngle, this.rotationNode.eulerAngles);
          UtilVec3.copy(this.currentAngle, this.targetAngle);
          UtilVec3.copy(this.targetPosition, this.rotationNode.position);
          UtilVec3.copy(this.currentAngle, this.targetPosition);
          Msg.on('msg_change_tps_camera_height', this.setRootY.bind(this));
        };

        _proto.update = function update(deltaTime) {
          var _this$rotationNode, _this$rotationNode2;

          this.rotationX(this.actorMove.angleVertical);
          this.currentAngle.x = math.lerp(this.currentAngle.x, this.targetAngle.x, this.smoothAngle * deltaTime);
          (_this$rotationNode = this.rotationNode) == null ? void 0 : _this$rotationNode.setRotationFromEuler(this.currentAngle);
          this.currentPosition.y = math.lerp(this.currentPosition.y, this.targetPosition.y, this.smoothHeight * deltaTime);
          (_this$rotationNode2 = this.rotationNode) == null ? void 0 : _this$rotationNode2.setPosition(this.currentPosition);
        };

        _proto.rotationX = function rotationX(angleX) {
          this.targetAngle.x = angleX;
        };

        _proto.setRootY = function setRootY(height) {
          this.targetPosition.y = height;
        };

        return CameraTps;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "rotationNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "actorMove", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "smoothAngle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "smoothHeight", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/check-auto-pick.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, Component, Actor;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      Actor = module.Actor;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "52239TQ3/pDRZ1hvSKAC236", "check-auto-pick", undefined);

      var ccclass = _decorator.ccclass;
      var CheckAutoPick = exports('CheckAutoPick', (_dec = ccclass('CheckAutoPick'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CheckAutoPick, _Component);

        function CheckAutoPick() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._actor = void 0;
          _this.checkAutoPickTime = 1;
          _this.isAutoPick = false;
          return _this;
        }

        var _proto = CheckAutoPick.prototype;

        _proto.start = function start() {
          this._actor = this.getComponent(Actor);
          this.isAutoPick = sys.platform === sys.Platform.MOBILE_BROWSER || sys.platform === sys.Platform.ANDROID || sys.platform === sys.Platform.IOS;
        };

        _proto.update = function update(deltaTime) {
          var _this$_actor;

          if (!this.isAutoPick) return;
          this.checkAutoPickTime -= deltaTime;
          if (this.checkAutoPickTime > 0) return;
          this.checkAutoPickTime = 1;
          (_this$_actor = this._actor) == null ? void 0 : _this$_actor.onPick();
        };

        return CheckAutoPick;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/collider-group.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Collider, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider = module.Collider;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "53e802WyhxI6L/WgGE2nM54", "collider-group", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ColliderGroup = exports('ColliderGroup', (_dec = ccclass('ColliderGroup'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ColliderGroup, _Component);

        function ColliderGroup() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "group", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ColliderGroup.prototype;

        _proto.onEnable = function onEnable() {
          var _this$node$getCompone;

          (_this$node$getCompone = this.node.getComponent(Collider)) == null ? void 0 : _this$node$getCompone.setGroup(1 << this.group);
        };

        return ColliderGroup;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "group", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/damage-core.ts", ['cc', './sound.ts', './fx.ts', './local.ts', './msg.ts', './actor-part.ts', './data-core.ts'], function (exports) {
  'use strict';

  var cclegacy, Sound, fx, Local, Msg, ActorPart, DataLevelInst;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Sound = module.Sound;
    }, function (module) {
      fx = module.fx;
    }, function (module) {
      Local = module.Local;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      ActorPart = module.ActorPart;
    }, function (module) {
      DataLevelInst = module.DataLevelInst;
    }],
    execute: function () {
      exports({
        calculateDamage: calculateDamage,
        calculateDamageNode: calculateDamageNode
      });

      cclegacy._RF.push({}, "d8d6avZExlO5Yj1hlbjXg5L", "damage-core", undefined);

      function calculateDamageNode(data, node, hitPoint, shootActor) {
        var hitName = node.name.split('_')[0];
        var hitTag = "hit_" + hitName;
        var damage = data.damage;
        var actorPart = node.getComponent(ActorPart);
        if (shootActor != null && shootActor.isPlayer) Msg.emit('msg_stat_times', "enemy_fire");

        if (actorPart) {
          var actorBodyName = actorPart.part;
          var part_damage = damage[actorBodyName];
          if (part_damage === undefined) throw new Error(node.name + " node hit part undefine '" + actorBodyName + "'");
          var actor = actorPart.actor;
          if (actor === undefined) throw new Error(node.name + " node hit part '" + actorBodyName + "' undefine actor");

          if (shootActor != null && shootActor.isPlayer) {
            Msg.emit('msg_stat_times', "hit_" + actorBodyName);
          }

          if (actor.isPlayer) {
            Msg.emit('msg_stat_times', "be_hit_" + actorBodyName);
          }

          actor._data.hp -= part_damage;

          if (actor._data.hp <= 0) {
            actor._data.hp = 0;
            fx.on(DataLevelInst._data.fx_dead, actor.node.worldPosition);
            if (actor.isPlayer) Msg.emit('msg_stat_times', 'killed');
            actor["do"]('dead');
          } else {
            actor["do"]('hit_gun');
          }

          if (actor.isPlayer) actor.updateHP();
          hitTag = 'hit_body';
        }

        calculateDamageView(damage[hitTag], hitPoint);
      }

      function calculateDamage(data, hit, shootActor) {
        if (shootActor != null && shootActor.isPlayer) Msg.emit('msg_stat_times', "enemy_fire");

        if (hit === undefined) {
          Msg.emit('msg_tips', "" + Local.Instance.get('hit_nothing'));
          return;
        }

        var node = hit.collider.node;
        var hitName = node.name.split('_')[0];
        var hitTag = "hit_" + hitName;
        var damage = data.damage;
        var actorPart = node.getComponent(ActorPart);

        if (actorPart) {
          var actorBodyName = actorPart.part;
          var part_damage = damage[actorBodyName];
          if (part_damage === undefined) throw new Error(node.name + " node hit part undefine '" + actorBodyName + "'");
          var actor = actorPart.actor;
          if (actor === undefined) throw new Error(node.name + " node hit part '" + actorBodyName + "' undefine actor");

          if (shootActor != null && shootActor.isPlayer) {
            Msg.emit('msg_stat_times', "hit_" + actorBodyName);
          }

          if (actor.isPlayer) {
            Msg.emit('msg_stat_times', "be_hit_" + actorBodyName);
          }

          actor._data.hp -= part_damage;

          if (actor._data.hp <= 0) {
            actor._data.hp = 1;
            fx.on(DataLevelInst._data.fx_dead, actor.node.worldPosition);
            if (shootActor != null && shootActor.isPlayer) Msg.emit('msg_stat_times', 'killed');
            actor["do"]('dead');
          } else {
            actor["do"]('hit_gun');
          }

          hitTag = 'hit_body';
          if (actor.isPlayer) actor.updateHP();
        }

        calculateDamageView(damage[hitTag], hit.hitPoint);
      }

      function calculateDamageView(damage, hitPoint) {
        if (damage === undefined) return;
        if (damage.fx) fx.on(damage.fx, hitPoint);
        if (damage.sfx) Sound.on(damage.sfx);

        if (damage.notify === undefined) {
          var showMsg = damage['notify'];
          if (showMsg == undefined) return;
          Msg.emit('msg_tips', "" + Local.Instance.get(damage['notify']));
        }
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/data-base.ts", ['cc', './res-cache.ts'], function (exports) {
  'use strict';

  var cclegacy, ResCache;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cec941+DThBWIDIZ/fyveHN", "data-base", undefined);

      var DataBase = exports('DataBase', /*#__PURE__*/function () {
        function DataBase() {
          this._data = {};
          this._name = '';
        }

        var _proto = DataBase.prototype;

        _proto.init = function init(name) {
          this._name = name;
          this._data = ResCache.Instance.getJson(name).json;
          this.bind();
        };

        _proto.bind = function bind() {};

        _proto.get = function get(name) {
          var item = this._data[name];

          if (item === undefined) {
            throw new Error(this._name + " database not find " + name + ".");
          }

          return item;
        };

        return DataBase;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/data-camera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './data-base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, DataBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DataBase = module.DataBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "45947iRzi1JkJqDd47P8Fr3", "data-camera", undefined);

      var DataCamera = exports('DataCamera', /*#__PURE__*/function (_DataBase) {
        _inheritsLoose(DataCamera, _DataBase);

        function DataCamera() {
          return _DataBase.apply(this, arguments) || this;
        }

        return DataCamera;
      }(DataBase));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/data-core.ts", ['cc', './data-equip.ts', './data-sound.ts', './data-camera.ts', './data-game.ts', './data-level.ts', './data-navigation.ts', './data-upgrade-card.ts'], function (exports) {
  'use strict';

  var cclegacy, DataEquip, DataSound, DataCamera, DataGame, DataLevel, DataNavigation, DataUpgradeCard;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DataEquip = module.DataEquip;
    }, function (module) {
      DataSound = module.DataSound;
    }, function (module) {
      DataCamera = module.DataCamera;
    }, function (module) {
      DataGame = module.DataGame;
    }, function (module) {
      DataLevel = module.DataLevel;
    }, function (module) {
      DataNavigation = module.DataNavigation;
    }, function (module) {
      DataUpgradeCard = module.DataUpgradeCard;
    }],
    execute: function () {
      exports('Init', Init);

      cclegacy._RF.push({}, "d7e08WdljRJZouEfdSMymQu", "data-core", undefined);

      var DataEquipInst = exports('DataEquipInst', new DataEquip());
      var DataSoundInst = exports('DataSoundInst', new DataSound());
      var DataCameraInst = exports('DataCameraInst', new DataCamera());
      var DataNavigationInst = exports('DataNavigationInst', new DataNavigation());
      var DataUpgradeCardInst = exports('DataUpgradeCardInst', new DataUpgradeCard());
      var DataGameInst = exports('DataGameInst', new DataGame());
      var DataLevelInst = exports('DataLevelInst', new DataLevel());

      function Init() {
        //Init data.
        DataEquipInst.init('data-equips');
        DataSoundInst.init('data-sound');
        DataCameraInst.init('data-camera');
        DataNavigationInst.init('data-navigation');
        DataUpgradeCardInst.init('data-upgrade-card');
        DataGameInst.init('data-game');
        DataLevelInst.init('data-level');
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/data-equip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './data-base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, DataBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DataBase = module.DataBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a9ecbFdZo9FcqxVL5Oz8g4M", "data-equip", undefined);

      var DataEquip = exports('DataEquip', /*#__PURE__*/function (_DataBase) {
        _inheritsLoose(DataEquip, _DataBase);

        function DataEquip() {
          return _DataBase.apply(this, arguments) || this;
        }

        return DataEquip;
      }(DataBase));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/data-game.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './data-base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, DataBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DataBase = module.DataBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bf4147VFJRPUonMb12JXCxD", "data-game", undefined);

      var DataGame = exports('DataGame', /*#__PURE__*/function (_DataBase) {
        _inheritsLoose(DataGame, _DataBase);

        function DataGame() {
          return _DataBase.apply(this, arguments) || this;
        }

        return DataGame;
      }(DataBase));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/data-level.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './data-base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, DataBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DataBase = module.DataBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "da03dmsaRZDvraDcaqusGYh", "data-level", undefined);

      var DataLevel = exports('DataLevel', /*#__PURE__*/function (_DataBase) {
        _inheritsLoose(DataLevel, _DataBase);

        function DataLevel() {
          return _DataBase.apply(this, arguments) || this;
        }

        return DataLevel;
      }(DataBase));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/data-navigation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './data-base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, DataBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DataBase = module.DataBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a28cfIm9SRM8J7cmlkhzuU+", "data-navigation", undefined);

      var DataNavigation = exports('DataNavigation', /*#__PURE__*/function (_DataBase) {
        _inheritsLoose(DataNavigation, _DataBase);

        function DataNavigation() {
          return _DataBase.apply(this, arguments) || this;
        }

        return DataNavigation;
      }(DataBase));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/data-sound.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './data-base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, DataBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DataBase = module.DataBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f8b55UsGRNAyZzk3aLbtpJH", "data-sound", undefined);

      var DataSound = exports('DataSound', /*#__PURE__*/function (_DataBase) {
        _inheritsLoose(DataSound, _DataBase);

        function DataSound() {
          return _DataBase.apply(this, arguments) || this;
        }

        return DataSound;
      }(DataBase));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/data-structure.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c2b970jje9G0YW2aFF70Bwa", "data-structure", undefined);

      var CAPACITY = 10;
      var Stack = exports('Stack', /*#__PURE__*/function () {
        function Stack(capacity) {
          if (capacity === void 0) {
            capacity = CAPACITY;
          }

          this._elements = void 0;
          this._size = void 0;
          this._elements = new Array(capacity);
          this._size = 0;
        }

        var _proto = Stack.prototype;

        _proto.push = function push(o) {
          var len = this._elements.length;

          if (this._size > len) {
            var temp = new Array(len);
            this._elements = this._elements.concat(temp);
          }

          this._elements[this._size++] = o;
        };

        _proto.cur = function cur() {
          return this._elements[this._size - 1];
        };

        _proto.pop = function pop() {
          return this._elements[--this._size];
        };

        _proto.peek = function peek() {
          return this._elements[this._size - 1];
        };

        _proto.size = function size() {
          return this._size;
        };

        _proto.empty = function empty() {
          return this._size === 0;
        };

        _proto.clear = function clear(capacity) {
          if (capacity === void 0) {
            capacity = CAPACITY;
          }

          delete this._elements;
          this._elements = new Array(capacity);
          this._size = 0;
        };

        return Stack;
      }());
      var Queue = exports('Queue', /*#__PURE__*/function () {
        function Queue(capacity) {
          this._elements = void 0;
          this._size = void 0;
          this._elements = new Array();
          this._size = capacity;
        }

        var _proto2 = Queue.prototype;

        _proto2.push = function push(o) {
          if (o === null) {
            return false;
          }

          if (this._size !== undefined && !isNaN(this._size)) {
            if (this._elements.length === this._size) {
              this.pop();
            }
          }

          this._elements.unshift(o);

          return true;
        };

        _proto2.pop = function pop() {
          return this._elements.pop();
        };

        _proto2.size = function size() {
          return this._elements.length;
        };

        _proto2.empty = function empty() {
          return this.size() === 0;
        };

        _proto2.clear = function clear() {
          delete this._elements;
          this._elements = new Array();
        };

        return Queue;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/data-upgrade-card.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './data-base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, DataBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      DataBase = module.DataBase;
    }],
    execute: function () {
      cclegacy._RF.push({}, "02b9ahZRUBA7bjNMjB4tBer", "data-upgrade-card", undefined);

      var DataUpgradeCard = exports('DataUpgradeCard', /*#__PURE__*/function (_DataBase) {
        _inheritsLoose(DataUpgradeCard, _DataBase);

        function DataUpgradeCard() {
          return _DataBase.apply(this, arguments) || this;
        }

        return DataUpgradeCard;
      }(DataBase));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/debug-util.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './save.ts', './local.ts', './msg.ts', './singleton.ts', './data-core.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, setDisplayStats, Save, Local, Msg, Singleton, DataGameInst;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      setDisplayStats = module.setDisplayStats;
    }, function (module) {
      Save = module.Save;
    }, function (module) {
      Local = module.Local;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      DataGameInst = module.DataGameInst;
    }],
    execute: function () {
      cclegacy._RF.push({}, "12b65hqoTJMQp4UrJq8/Cwl", "debug-util", undefined);

      var DebugUtil = exports('DebugUtil', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(DebugUtil, _Singleton);

        function DebugUtil() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this.index = 0;
          return _this;
        }

        var _proto = DebugUtil.prototype;

        _proto.init = function init() {
          var _this2 = this;

          if (Save.Instance._cur.debugIndex === undefined) Save.Instance._cur.debugIndex = 0;
          this.index = Save.Instance._cur.debugIndex;
          var gdata = DataGameInst._data;
          this.CheckDisplayStats();
          Msg.on('next_debug', function () {
            _this2.index++;
            if (_this2.index >= gdata.debug_info.length) _this2.index = 0;
            Save.Instance._cur.debugIndex = _this2.index;

            _this2.CheckDisplayStats();
          });
          Msg.on('pre_debug', function () {
            _this2.index--;
            if (_this2.index < 0) _this2.index = gdata.debug_info.length - 1;
            Save.Instance._cur.debugIndex = _this2.index;

            _this2.CheckDisplayStats();
          });
        };

        _proto.CheckDisplayStats = function CheckDisplayStats() {
          setDisplayStats(this.index === 1);
        };

        _proto.getShowName = function getShowName() {
          var gdata = DataGameInst._data;
          return Local.Instance.get(gdata.debug_info[this.index]);
        };

        return DebugUtil;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/debug.ts", ['cc', './camera-setting.ts'], function (exports) {
  'use strict';

  var cclegacy, director, CameraSetting;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
    }, function (module) {
      CameraSetting = module.CameraSetting;
    }],
    execute: function () {
      exports('getGeometryRenderer', getGeometryRenderer);

      cclegacy._RF.push({}, "db928AuGApHz43L4Rc0Dg1T", "debug", undefined);

      function getGeometryRenderer() {
        var camera;
        {
          camera = CameraSetting.mainCamera && CameraSetting.mainCamera.camera;
        }

        if (camera) {
          camera.initGeometryRenderer();
        }

        var geometryRenderer = camera && camera.geometryRenderer || director.root.pipeline.geometryRenderer;
        return geometryRenderer;
      }

      globalThis.getGeometryRenderer = getGeometryRenderer;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/deferred-gbuffer-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './base-stage.ts', './setting.ts', './pass-utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, rendering, gfx, director, Vec4, sys, BaseStage, settings, passUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      rendering = module.rendering;
      gfx = module.gfx;
      director = module.director;
      Vec4 = module.Vec4;
      sys = module.sys;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      settings = module.settings;
    }, function (module) {
      passUtils = module.passUtils;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "b34cfr6rxFCqbF3H0jep8eD", "deferred-gbuffer-stage", undefined);

      var type = _decorator.type,
          property = _decorator.property,
          ccclass = _decorator.ccclass;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var DeferredGBufferStage = exports('DeferredGBufferStage', (_dec = ccclass('DeferredGBufferStage'), _dec2 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(DeferredGBufferStage, _BaseStage);

        function DeferredGBufferStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._name = 'DeferredGBufferStage';
          _this._materialName = 'blit-screen';

          _initializerDefineProperty(_this, "outputNames", _descriptor, _assertThisInitialized(_this));

          _this.uniqueStage = true;
          return _this;
        }

        var _proto = DeferredGBufferStage.prototype;

        _proto.render = function render(camera, ppl) {
          settings.gbufferStage = this; // hack: use fog uniform to set deferred pipeline

          director.root.pipeline.pipelineSceneData.fog.fogStart = 1;
          var area = this.getRenderArea(camera);
          var width = area.width;
          var height = area.height;
          passUtils.clearFlag = ClearFlagBit.COLOR | ClearFlagBit.DEPTH_STENCIL;
          Vec4.set(passUtils.clearColor, 0, 0, 0, 1);
          Vec4.set(passUtils.clearDepthColor, camera.clearDepth, camera.clearStencil, 0, 0);
          var colFormat = Format.RGBA16F;
          var posFormat = colFormat;

          if (!sys.isMobile) {
            posFormat = Format.RGBA32F;
          }

          var slot0 = this.slotName(camera, 0);
          var slot1 = this.slotName(camera, 1);
          var slot2 = this.slotName(camera, 2);
          var slot3 = this.slotName(camera, 3);
          var slot4 = this.slotName(camera, 4);
          passUtils.addRasterPass(width, height, 'default', slot0 + "_Pass").setViewport(area.x, area.y, width, height).addRasterView(slot0, colFormat, true).addRasterView(slot1, colFormat, true).addRasterView(slot2, colFormat, true).addRasterView(slot3, posFormat, true).addRasterView(slot4, Format.DEPTH_STENCIL, true).version();
          passUtils.pass.addQueue(QueueHint.RENDER_OPAQUE).addSceneOfCamera(camera, new LightInfo(), SceneFlags.OPAQUE_OBJECT | SceneFlags.CUTOUT_OBJECT | SceneFlags.DRAW_INSTANCING);
        };

        return DeferredGBufferStage;
      }(BaseStage), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "outputNames", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ['gBufferColor', 'gBufferNormal', 'gBufferEmissive', 'gBufferPosition', 'gBufferDS'];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/deferred-lighting-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './base-stage.ts', './utils2.ts', './height-fog.ts', './reflection-probe-utils.ts', './setting.ts', './pass-utils.ts', './href-setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createForOfIteratorHelperLoose, cclegacy, _decorator, rendering, gfx, Vec4, director, renderer, BaseStage, getCameraUniqueID, fogUBO, ReflectionProbes, settings, passUtils, HrefSetting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      rendering = module.rendering;
      gfx = module.gfx;
      Vec4 = module.Vec4;
      director = module.director;
      renderer = module.renderer;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
    }, function (module) {
      fogUBO = module.fogUBO;
    }, function (module) {
      ReflectionProbes = module.ReflectionProbes;
    }, function (module) {
      settings = module.settings;
    }, function (module) {
      passUtils = module.passUtils;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "77df5CptaNE6rvmEIZglcx/", "deferred-lighting-stage", undefined);

      var type = _decorator.type,
          property = _decorator.property,
          ccclass = _decorator.ccclass;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var tempVec4 = new Vec4();
      var DeferredLightingStage = exports('DeferredLightingStage', (_dec = ccclass('DeferredLightingStage'), _dec2 = property({
        override: true
      }), _dec3 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(DeferredLightingStage, _BaseStage);

        function DeferredLightingStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._materialName = 'blit-screen';
          _this.materialMap = new Map();
          _this.tempMat = void 0;
          _this.clearMat = void 0;
          _this.enableClusterLighting = 0;
          _this.enableIBL = 0;
          _this.enableShadow = 0;
          _this.uniqueStage = true;
          _this.probes = [];

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "outputNames", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = DeferredLightingStage.prototype;

        _proto.updateClusterUBO = function updateClusterUBO(setter, material) {
          var cluster = globalThis.LightWorldCluster.instance;

          if (!cluster) {
            return;
          }

          material.setProperty('light_cluster_BoundsMin', tempVec4.set(cluster.boundsMin.x, cluster.boundsMin.y, cluster.boundsMin.z, 1));
          material.setProperty('light_cluster_BoundsDelta', tempVec4.set(cluster.boundsDelta.x, cluster.boundsDelta.y, cluster.boundsDelta.z, 1));
          material.setProperty('light_cluster_CellsDot', cluster.clusterCellsDotData);
          material.setProperty('light_cluster_CellsMax', cluster.clusterCellsMaxData);
          material.setProperty('light_cluster_TextureSize', cluster.clusterTextureSizeData);
          material.setProperty('light_cluster_InfoTextureInvSize', cluster.infoTextureInvSizeData);
          material.setProperty('light_cluster_CellsCountByBoundsSizeAndPixelsPerCell', cluster.clusterCellsCountByBoundsSizeData); // if (EDITOR) {
          //     material.setProperty('light_cluster_InfoTexture', cluster.dataInfoTextureFloat)
          //     material.setProperty('light_cluster_Texture', cluster.clusterTexture)
          //     let pass = material.passes[0];
          //     let pointSampler = director.root.pipeline.globalDSManager.pointSampler
          //     let binding = pass.getBinding('light_cluster_InfoTexture')
          //     pass.bindSampler(binding, pointSampler)
          //     binding = pass.getBinding('light_cluster_Texture')
          //     pass.bindSampler(binding, pointSampler)
          // }
          // else {

          setter.setTexture('light_cluster_InfoTexture', cluster.dataInfoTextureFloat);
          setter.setTexture('light_cluster_Texture', cluster.clusterTexture);
          var pointSampler = director.root.pipeline.globalDSManager.pointSampler;
          setter.setSampler('light_cluster_InfoTexture', pointSampler);
          setter.setSampler('light_cluster_Texture', pointSampler); // }
        };

        _proto.render = function render(camera, ppl) {
          var cameraID = getCameraUniqueID(camera); // const cameraName = `Camera${cameraID}`;
          // const cameraInfo = buildShadowPasses(cameraName, camera, ppl);

          var area = this.getRenderArea(camera);
          var width = area.width;
          var height = area.height;
          var slot0 = this.slotName(camera, 0);
          var slot1 = this.slotName(camera, 1);

          if (settings.gbufferStage) {
            slot1 = settings.gbufferStage.slotName(camera, 4);
          } // passUtils.clearFlag = gfx.ClearFlagBit.NONE;


          Vec4.set(passUtils.clearColor, 0, 0, 0, 1);
          passUtils.clearFlag = gfx.ClearFlagBit.COLOR;
          passUtils.addRasterPass(width, height, 'deferred-lighting', "LightingShader" + cameraID).setViewport(area.x, area.y, width, height).setPassInput(this.lastStage.slotName(camera, 0), 'gbuffer_albedoMap').setPassInput(this.lastStage.slotName(camera, 1), 'gbuffer_normalMap').setPassInput(this.lastStage.slotName(camera, 2), 'gbuffer_emissiveMap').setPassInput(this.lastStage.slotName(camera, 3), 'gbuffer_posMap');
          var setter = passUtils.pass;
          var shadowStage = settings.shadowStage;

          if (shadowStage) {
            for (var _iterator = _createForOfIteratorHelperLoose(shadowStage.mainLightShadows), _step; !(_step = _iterator()).done;) {
              var dirShadowName = _step.value;
              passUtils.setPassInput(dirShadowName, 'cc_shadowMap');
            } // not work, will override by queue data
            // let frameBuffer = ppl.pipelineSceneData.shadowFrameBufferMap.get(camera.scene.mainLight);
            // if (frameBuffer) {
            //     setter.setTexture('cc_shadowMap', frameBuffer.colorTextures[0])
            //     let pointSampler = director.root.pipeline.globalDSManager.pointSampler
            //     setter.setSampler('cc_shadowMap', pointSampler)
            // }

          }

          passUtils.addRasterView(slot0, Format.RGBA16F, true) // .addRasterView(slot1, Format.DEPTH_STENCIL, true)
          .version();
          var probes = ReflectionProbes.probes;
          probes = probes.filter(function (p) {
            return p.enabledInHierarchy;
          });
          var sharedMaterial = globalThis.pipelineAssets.getMaterial('deferred-lighting');
          var material = this.materialMap.get(camera);

          if (!material || material.parent !== sharedMaterial) {
            {
              // director.root.pipeline.macros.CC_USE_IBL = 0;
              material = new renderer.MaterialInstance({
                parent: sharedMaterial
              });
              material.recompileShaders({
                // CC_USE_IBL: 0,
                CC_RECEIVE_SHADOW: 1,
                REFLECTION_PROBE_COUNT: probes.length,
                ENABLE_CLUSTER_LIGHTING: HrefSetting.clusterLighting,
                ENABLE_IBL: HrefSetting.ibl,
                ENABLE_SHADOW: HrefSetting.shadow
              });
              this.enableClusterLighting = HrefSetting.clusterLighting;
              this.enableIBL = HrefSetting.ibl;
              this.enableShadow = HrefSetting.shadow;
            }
            this.materialMap.set(camera, material);
          }

          if (probes.length !== this.probes.length || this.enableClusterLighting !== HrefSetting.clusterLighting || this.enableIBL !== HrefSetting.ibl || this.enableShadow !== HrefSetting.shadow) {
            material.recompileShaders({
              REFLECTION_PROBE_COUNT: probes.length,
              ENABLE_CLUSTER_LIGHTING: HrefSetting.clusterLighting,
              ENABLE_IBL: HrefSetting.ibl,
              ENABLE_SHADOW: HrefSetting.shadow
            });
            this.enableClusterLighting = HrefSetting.clusterLighting;
            this.enableIBL = HrefSetting.ibl;
            this.enableShadow = HrefSetting.shadow;
          }

          {
            setter.addConstant('CustomLightingUBO', 'deferred-lighting');
          }

          for (var i = 0; i < 3; i++) {
            var probe = probes[i];
            if (!probe) break;
            var pos = probe.node.worldPosition;
            var range = Math.max(probe.size.x, probe.size.y, probe.size.z);
            material.setProperty('light_ibl_posRange' + i, tempVec4.set(pos.x, pos.y, pos.z, range));
            var cubemap = probe._cubemap; // if (EDITOR) {
            //     material.setProperty('light_ibl_Texture' + i, cubemap)
            // }
            // else {

            setter.setTexture('light_ibl_Texture' + i, cubemap.getGFXTexture());
            setter.setSampler('light_ibl_Texture' + i, cubemap.getGFXSampler()); // }
          }

          this.probes = probes;
          this.updateClusterUBO(setter, material);
          fogUBO.update(material);
          passUtils.pass.addQueue(QueueHint.RENDER_TRANSPARENT).addCameraQuad(camera, material, 0, SceneFlags.VOLUMETRIC_LIGHTING); // render transparent
          // todo: remove this pass

          if (HrefSetting.transparent) {
            passUtils.clearFlag = gfx.ClearFlagBit.NONE;
            passUtils.addRasterPass(width, height, 'default', "LightingTransparent" + cameraID).setViewport(area.x, area.y, width, height).addRasterView(slot0, Format.RGBA16F, true).addRasterView(slot1, Format.DEPTH_STENCIL, true).version();
            var flags = SceneFlags.TRANSPARENT_OBJECT | SceneFlags.PLANAR_SHADOW | SceneFlags.GEOMETRY;
            passUtils.pass.addQueue(QueueHint.RENDER_TRANSPARENT).addSceneOfCamera(camera, new LightInfo(), flags);
          }
        };

        return DeferredLightingStage;
      }(BaseStage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'DeferredLightingStage';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "outputNames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ['DeferredLightingColor', 'gBufferDS'];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/deferred-post-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './base-stage.ts', './utils2.ts', './pass-utils.ts', './setting.ts', './href-setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, rendering, gfx, Vec4, renderer, game, BaseStage, getCameraUniqueID, passUtils, settings, HrefSetting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      rendering = module.rendering;
      gfx = module.gfx;
      Vec4 = module.Vec4;
      renderer = module.renderer;
      game = module.game;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
    }, function (module) {
      passUtils = module.passUtils;
    }, function (module) {
      settings = module.settings;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "d9ef0mfpIlLCrG3rbw2qEXn", "deferred-post-stage", undefined);

      var type = _decorator.type,
          property = _decorator.property,
          ccclass = _decorator.ccclass;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var DeferredPostStage = exports('DeferredPostStage', (_dec = ccclass('DeferredPostStage'), _dec2 = property({
        override: true
      }), _dec3 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(DeferredPostStage, _BaseStage);

        function DeferredPostStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._materialName = 'final-post';
          _this.materialMap = new Map();

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "outputNames", _descriptor2, _assertThisInitialized(_this));

          _this.params1 = new Vec4();
          _this.params2 = new Vec4();
          return _this;
        }

        var _proto = DeferredPostStage.prototype;

        _proto.render = function render(camera, ppl) {
          var cameraID = getCameraUniqueID(camera);
          var area = this.getRenderArea(camera);
          var input0 = this.lastStage.slotName(camera, 0);
          var slot0 = this.slotName(camera, 0);
          passUtils.clearFlag = camera.clearFlag & gfx.ClearFlagBit.COLOR;
          Vec4.set(passUtils.clearColor, 0, 0, 0, 1);
          var material = this.materialMap.get(camera);

          if (!material || material.parent !== this.material) {
            material = new renderer.MaterialInstance({
              parent: this.material
            });
            this.materialMap.set(camera, material);
          }

          passUtils.material = material;
          var shadingScale = this.finalShadingScale();
          material.setProperty('params1', this.params1.set(game.canvas.width, game.canvas.height, settings.outputRGBE ? 1 : 0, settings.tonemapped ? 0 : 1));
          material.setProperty('params2', this.params2.set(HrefSetting.fxaa, 0, 0, 0));
          var width = area.width / shadingScale;
          var height = area.height / shadingScale;
          passUtils.addRasterPass(width, height, 'post-process', "CameraPostprocessPass" + cameraID).setViewport(area.x, area.y, width, height).setPassInput(input0, 'inputTexture').addRasterView(slot0, Format.RGBA8, false).blitScreen(0).version();
          this.renderProfiler(camera);
        };

        return DeferredPostStage;
      }(BaseStage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'DeferredPostStage';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "outputNames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ['DeferredPostColor', 'DeferredPostDS'];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/delay_play_animation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, input, Input, KeyCode, Animation, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Animation = module.Animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "6543dhd6KFBhY3acAElu4Ew", "delay_play_animation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DelayPlayAnimation = exports('DelayPlayAnimation', (_dec = ccclass('DelayPlayAnimation'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DelayPlayAnimation, _Component);

        function DelayPlayAnimation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "delay", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "anim_name", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = DelayPlayAnimation.prototype;

        _proto.start = function start() {
          var _this2 = this;

          input.on(Input.EventType.KEY_UP, function (event) {
            if (event.keyCode === KeyCode.SPACE) _this2.delayPlay();
          }, this);
        };

        _proto.delayPlay = function delayPlay() {
          var _this3 = this;

          setTimeout(function () {
            var _this3$node$getCompon;

            (_this3$node$getCompon = _this3.node.getComponent(Animation)) == null ? void 0 : _this3$node$getCompon.play(_this3.anim_name);

            var anim = _this3.node.getComponent(Animation);
          }, this.delay * 1000);
        };

        return DelayPlayAnimation;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "delay", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "anim_name", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'minmax.com';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/delay-active.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ParticleSystem, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ParticleSystem = module.ParticleSystem;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "b5f58ANV5xLUZ3iLUJoyoIX", "delay-active", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DelayActive = exports('DelayActive', (_dec = ccclass('DelayActive'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DelayActive, _Component);

        function DelayActive() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "targets", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delay", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = DelayActive.prototype;

        _proto.start = function start() {
          var _this$node,
              _this2 = this;

          var particles = (_this$node = this.node) == null ? void 0 : _this$node.getComponentsInChildren(ParticleSystem);

          for (var i = 0; i < particles.length; i++) {
            particles[i].play();
          }

          setTimeout(function () {
            _this2.targets.forEach(function (t) {
              t.active = true;
            });

            _this2.node.removeFromParent();
          }, this.delay * 1000);
        };

        return DelayActive;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "targets", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "delay", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/delay-play.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, CCFloat, CCString, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      CCFloat = module.CCFloat;
      CCString = module.CCString;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "9d854y5DxxKkYWCzFWQ/uYO", "delay-play", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DelayPlay = exports('DelayPlay', (_dec = ccclass('DelayPlay'), _dec2 = property([Animation]), _dec3 = property([CCFloat]), _dec4 = property([CCString]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DelayPlay, _Component);

        function DelayPlay() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "animations", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delay", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "animation_names", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = DelayPlay.prototype;

        _proto.start = function start() {};

        return DelayPlay;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animations", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "delay", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "animation_names", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/delay-show-node.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fun.ts', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, Component, fun, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      fun = module.fun;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "d02a0dfe4FA+akYTVqTgTcA", "delay-show-node", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var delay_show_node = exports('delay_show_node', (_dec = ccclass('delay_show_node'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(delay_show_node, _Component);

        function delay_show_node() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "delay_time", _descriptor, _assertThisInitialized(_this));

          _this._scale = v3(0, 0, 0);
          return _this;
        }

        var _proto = delay_show_node.prototype;

        _proto.onEnable = function onEnable() {
          UtilVec3.copy(this._scale, this.node.getWorldScale());
          this.node.setScale(0, 0, 0);
        };

        _proto.start = function start() {
          var _this2 = this;

          fun.delay(function () {
            _this2.node.setScale(_this2._scale);
          }, this.delay_time);
        };

        return delay_show_node;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "delay_time", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/destroy-settings.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCBoolean, director, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCBoolean = module.CCBoolean;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "2e346wKSjFIN5CqVUsQrX47", "destroy-settings", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var destroySettings = exports('destroySettings', (_dec = ccclass('destroySettings'), _dec2 = property(CCBoolean), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(destroySettings, _Component);

        function destroySettings() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "isDestroy", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = destroySettings.prototype;

        _proto.start = function start() {
          if (this.isDestroy) director.addPersistRootNode(this.node);
        };

        return destroySettings;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "isDestroy", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/disable-update-ubo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, MeshRenderer, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1aee8DtcaFMBLRwdpO9OuHZ", "disable-update-ubo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var disable_update_ubo = exports('disable_update_ubo', (_dec = ccclass('disable_update_ubo'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(disable_update_ubo, _Component);

        function disable_update_ubo() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = disable_update_ubo.prototype;

        _proto.start = function start() {
          var _this = this;

          setTimeout(function () {
            var mrs = _this.getComponentsInChildren(MeshRenderer);

            mrs.forEach(function (mr) {
              // mr.model.updateUBOs(0);
              var origin = mr.model.updateUBOs;

              mr.model.updateUBOs = function () {
                if (!this._localDataUpdated) return;
                origin.call(this);
              };
            });
          }, 1000);
        };

        return disable_update_ubo;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/drop-item.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './res.ts', './res-cache.ts', './msg.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, Component, Res, ResCache, Msg;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e970d4rKHNKup4eamDFF4za", "drop-item", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DropItem = exports('DropItem', (_dec = ccclass('DropItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DropItem, _Component);

        function DropItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.itemName = '';
          _this.groupIndex = 0;
          return _this;
        }

        var _proto = DropItem.prototype;

        _proto.init = function init(name, effectIndex, _groupIndex) {
          this.itemName = name;
          this.node.name = name;
          this.groupIndex = _groupIndex; // Load Item.

          var prefab = ResCache.Instance.getPrefab(name + '_pickup');
          var dropNode = Res.inst(prefab, this.node.children[4], v3(0, 0, 0));
          this.node.on('picked', this.picked, this); // random drop effect.

          var index = effectIndex;
          this.node.children[index].active = true;
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off('picked', this.picked, this);
        };

        _proto.picked = function picked() {
          Msg.emit('msg_remove_item', this.groupIndex); // Remove object.

          this.node.destroy();
        };

        return DropItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/editor-camera-placer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec3, Quat, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "5161fNg0y5MS50Us7M1kE49", "editor-camera-placer", undefined);

      var property = _decorator.property,
          ccclass = _decorator.ccclass,
          executeInEditMode = _decorator.executeInEditMode;
      var EditorCameraPlacer = exports('EditorCameraPlacer', (_dec = ccclass('EditorCameraPlacer'), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EditorCameraPlacer, _Component);

        function EditorCameraPlacer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_place", _descriptor, _assertThisInitialized(_this));

          _this._oldPosition = new Vec3();
          _this._oldRotation = new Quat();
          return _this;
        }

        var _proto = EditorCameraPlacer.prototype;

        _proto.update = function update() {};

        _createClass(EditorCameraPlacer, [{
          key: "place",
          get: function get() {
            return this._place;
          },
          set: function set(v) {
            this._place = v;
          }
        }]);

        return EditorCameraPlacer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_place", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "place", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "place"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/editor.ts", ['cc', './env'], function (exports) {
  'use strict';

  var cclegacy, warn$1, error$1, EDITOR$1;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      warn$1 = module.warn;
      error$1 = module.error;
    }, function (module) {
      EDITOR$1 = module.EDITOR;
    }],
    execute: function () {
      exports({
        download: download,
        error: error,
        formatPath: formatPath,
        log: log,
        relpaceExt: relpaceExt,
        repaintInEditMode: repaintInEditMode,
        warn: warn
      });

      cclegacy._RF.push({}, "82665FTrUlFd6B6tPgfFpSW", "editor", undefined);

      var EDITOR = exports('EDITOR', EDITOR$1);
      var io = exports('io', EDITOR);
      var ws = exports('ws', EDITOR);
      var path = exports('path', EDITOR);
      var fse = exports('fse', EDITOR);
      var base642arraybuffer = exports('base642arraybuffer', EDITOR);
      var Sharp = exports('Sharp', EDITOR);
      var Buffer = exports('Buffer', EDITOR);
      var globby = exports('globby', EDITOR);
      var request = exports('request', EDITOR);
      globalThis.fse = fse;
      globalThis.path = path;
      globalThis.globby = globby;

      function formatPath(p) {
        return p.replace(/\\/g, '/');
      }

      function relpaceExt(fspath, extname) {
        var basename = path.basename(fspath).replace(path.extname(fspath), extname);
        return path.join(path.dirname(fspath), basename);
      }

      var cce = exports('cce', EDITOR);
      var EditorExtends = exports('EditorExtends', EDITOR);
      var Editor = exports('Editor', EDITOR);
      var projectPath = exports('projectPath', EDITOR);
      var projectAssetPath = exports('projectAssetPath', EDITOR);
      var projectTempPath = exports('projectTempPath', EDITOR);

      function log() {
        warn$1.apply(void 0, arguments);
      }

      function warn() {
        warn$1.apply(void 0, arguments);
      }

      function error() {
        error$1.apply(void 0, arguments);
      }

      function download(url, path) {
        return new Promise(function (resolve, reject) {
          request.head(url, function (err, res, body) {
            if (err) {
              return reject(err);
            }

            request(url).pipe(fse.createWriteStream(path)).on('close', function () {
              resolve(null);
            });
          });
        });
      }

      function repaintInEditMode() {
        cce.Engine.repaintInEditMode();
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Electron.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0907e8LT0RI2rtAbQ2ziAFM", "Electron", undefined);

      var Electron = exports('default', /*#__PURE__*/function () {
        function Electron() {}

        Electron.sendAsync = /*#__PURE__*/function () {
          var _sendAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, data, call) {
            var _electron;

            var call_data;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (data === void 0) {
                    data = undefined;
                  }

                  if (call === void 0) {
                    call = undefined;
                  }

                  _context.next = 4;
                  return (_electron = window.electron) == null ? void 0 : _electron.ipcRenderer.invoke(name, data);

                case 4:
                  call_data = _context.sent;

                  if (call !== undefined) {
                    call(call_data);
                  }

                case 6:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));

          function sendAsync(_x, _x2, _x3) {
            return _sendAsync.apply(this, arguments);
          }

          return sendAsync;
        }();

        Electron.send = function send(name, data) {
          var _electron2;

          if (data === void 0) {
            data = undefined;
          }

          var call_data = (_electron2 = window.electron) == null ? void 0 : _electron2.ipcRenderer.invoke(name, data);
          return call_data;
        };

        Electron.A2C = function A2C(name, data) {
          console.log('A2C:', name, data);
        };

        _createClass(Electron, null, [{
          key: "appUserID",
          get: function get() {
            return globalThis.remote ? globalThis.remote.app.getUserID() : '';
          }
        }, {
          key: "appUserPath",
          get: function get() {
            return globalThis.remote ? globalThis.remote.app.getPath('userData') : '';
          }
        }]);

        return Electron;
      }());
      Electron.is_steam = false;
      Electron.counter = 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/event.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8edfa4MOMJElrnab8AYAYP0", "event", undefined);

      var Event = exports('default', /*#__PURE__*/function () {
        function Event() {
          this._listeners = [];
          this._onceListeners = [];
        }

        var _proto = Event.prototype;

        _proto.on = function on(cb, target) {
          var listeners = this._listeners;

          for (var i = 0; i < listeners.length; i++) {
            if (listeners[i][0] === cb && listeners[i][1] === target) {
              return;
            }
          }

          listeners.push([cb, target]);
        };

        _proto.off = function off(cb, target) {
          var listeners = this._listeners;

          for (var i = 0; i < listeners.length; i++) {
            if (listeners[i][0] === cb) {
              listeners.splice(i, 1);
              return;
            }
          }
        };

        _proto.once = function once(cb, target) {
          var listeners = this._onceListeners;

          for (var i = 0; i < listeners.length; i++) {
            if (listeners[i][0] === cb && listeners[i][1] === target) {
              return;
            }
          }

          listeners.push([cb, target]);
        };

        _proto.invoke = function invoke(a1, a2, a3, a4, a5, a6) {
          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          var listeners = this._listeners;

          for (var i = 0; i < listeners.length; i++) {
            var l = listeners[i];
            l[0].apply(l[1], args);
          }

          var onceListeners = this._onceListeners;

          for (var _i2 = 0; _i2 < onceListeners.length; _i2++) {
            var _l = onceListeners[_i2];

            _l[0].apply(_l[1], args);
          }

          onceListeners.length = 0;
        };

        return Event;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fil-smooth.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, math, game, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      math = module.math;
      game = module.game;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "1e9b8oU7zZP3r62t7FBDaMa", "fil-smooth", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FilSmooth = exports('FilSmooth', (_dec = ccclass('FilSmooth'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FilSmooth, _Component);

        function FilSmooth() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.fil_value = Object.create(null);
          _this.value = 1;

          _initializerDefineProperty(_this, "smooth", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FilSmooth.prototype;

        _proto.start = function start() {
          this.fil_value = this.getComponent(Sprite);
        };

        _proto.setValue = function setValue(value) {
          this.value = value;
        };

        _proto.update = function update(deltaTime) {
          var delta = Math.abs(this.fil_value.fillRange - this.value);

          if (delta !== 0) {
            this.fil_value.fillRange = math.lerp(this.fil_value.fillRange, this.value, game.deltaTime * this.smooth);
            if (delta < 0.0001) this.fil_value.fillRange = this.value;
          }
        };

        return FilSmooth;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "smooth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/force-area.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './game.ts', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, v3, Collider, Component, Game, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      v3 = module.v3;
      Collider = module.Collider;
      Component = module.Component;
    }, function (module) {
      Game = module.Game;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "0cbc93C5zZOP4OPrSSc53nC", "force-area", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ForceArea = exports('ForceArea', (_dec = ccclass('ForceArea'), _dec2 = property(Vec3), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ForceArea, _Component);

        function ForceArea() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "force", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "posScale", _descriptor2, _assertThisInitialized(_this));

          _this._force = v3(0, 0, 0);
          _this._collider = void 0;
          return _this;
        }

        var _proto = ForceArea.prototype;

        _proto.__preload = function __preload() {
          this._collider = this.getComponent(Collider);

          this._collider.on('onTriggerEnter', this.onTriggerEnter, this);

          this._collider.on('onTriggerStay', this.onTriggerStay, this);
        };

        _proto.onEnable = function onEnable() {
          var area_force = Game.Instance._currentGameNodeName === 'level';
          this._collider.enabled = area_force;
        };

        _proto.forceRate = function forceRate(other) {
          UtilVec3.copy(this._force, this.force);
          if (this.posScale.x !== 0) this._force.x = this.calculate(other.worldPosition.x - this.node.worldPosition.x, this.posScale.x, this.force.x);
          if (this.posScale.y !== 0) this._force.y = this.calculate(other.worldPosition.y - this.node.worldPosition.y, this.posScale.y, this.force.y);
          if (this.posScale.z !== 0) this._force.z = this.calculate(other.worldPosition.z - this.node.worldPosition.z, this.posScale.z, this.force.z); //if (this._force.x < 0) this._force.x = 0;
          //if (this._force.y < 0) this._force.y = 0;
          //if (this._force.z < 0) this._force.z = 0;
          //this._force.multiply(this.force);

          return this._force.clone();
        };

        _proto.calculate = function calculate(value, max, scale) {
          var a = value / max;
          a = Math.log(a) * 2 + max;
          if (a < 0) a = 0;
          a = (max - a) / max + 11;
          return a;
        };

        _proto.onTriggerEnter = function onTriggerEnter(event) {
          event.otherCollider.node.emit('addAreaForce', this.forceRate(event.otherCollider.node));
        };

        _proto.onTriggerStay = function onTriggerStay(event) {
          event.otherCollider.node.emit('addAreaForce', this.forceRate(event.otherCollider.node));
        };

        return ForceArea;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "force", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "posScale", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 4, 0);
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/forward-post-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './base-stage.ts', './utils2.ts', './pass-utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, rendering, gfx, Vec4, renderer, director, BaseStage, getCameraUniqueID, passUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      rendering = module.rendering;
      gfx = module.gfx;
      Vec4 = module.Vec4;
      renderer = module.renderer;
      director = module.director;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
    }, function (module) {
      passUtils = module.passUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "02d63ZtAh5DppeJkk4nRaGT", "forward-post-stage", undefined);

      var type = _decorator.type,
          property = _decorator.property,
          ccclass = _decorator.ccclass;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var ForwardPostStage = exports('ForwardPostStage', (_dec = ccclass('ForwardPostStage'), _dec2 = property({
        override: true
      }), _dec3 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(ForwardPostStage, _BaseStage);

        function ForwardPostStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._materialName = 'blit-screen';
          _this.materialMap = new Map();

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "outputNames", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ForwardPostStage.prototype;

        _proto.render = function render(camera, ppl) {
          var cameraID = getCameraUniqueID(camera);
          var area = this.getRenderArea(camera);
          var width = area.width;
          var height = area.height;
          var input0 = this.lastStage.slotName(camera, 0);
          var slot0 = this.slotName(camera, 0);
          passUtils.clearFlag = camera.clearFlag & gfx.ClearFlagBit.COLOR;
          Vec4.set(passUtils.clearColor, 0, 0, 0, 1);
          var material = this.materialMap.get(camera);

          if (!material || material.parent !== this.material) {
            material = new renderer.MaterialInstance({
              parent: this.material
            });
            this.materialMap.set(camera, material);
          }

          passUtils.material = material;
          var shadingScale = this.finalShadingScale();
          var isOffScreen = director.root.mainWindow !== camera.window;

          if (!isOffScreen) {
            width /= shadingScale;
            height /= shadingScale;
          }

          passUtils.addRasterPass(width, height, 'post-process', "CameraPostprocessPass" + cameraID).setViewport(area.x, area.y, width, height).setPassInput(input0, 'inputTexture').addRasterView(slot0, Format.RGBA8, isOffScreen).blitScreen(0); // ppl.updateRenderWindow(slot0, camera.window);

          this.renderProfiler(camera);
        };

        return ForwardPostStage;
      }(BaseStage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'ForwardPostStage';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "outputNames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ['ForwardPostColor'];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/forward-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils2.ts', './base-stage.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, pipeline, renderer, gfx, rendering, _decorator, director, getRenderArea, validPunctualLightsCulling, CameraInfo, getCameraUniqueID, BaseStage;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      pipeline = module.pipeline;
      renderer = module.renderer;
      gfx = module.gfx;
      rendering = module.rendering;
      _decorator = module._decorator;
      director = module.director;
    }, function (module) {
      getRenderArea = module.getRenderArea;
      validPunctualLightsCulling = module.validPunctualLightsCulling;
      CameraInfo = module.CameraInfo;
      getCameraUniqueID = module.getCameraUniqueID;
    }, function (module) {
      BaseStage = module.BaseStage;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7bbd81TYatCzICAkwvjeK7e", "forward-stage", undefined);

      var supportsR32FloatTexture = pipeline.supportsR32FloatTexture;
      var _renderer$scene = renderer.scene,
          ShadowType = _renderer$scene.ShadowType,
          LightType = _renderer$scene.LightType,
          SKYBOX_FLAG = _renderer$scene.SKYBOX_FLAG,
          CSMLevel = _renderer$scene.CSMLevel;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ForwardStage = exports('ForwardStage', (_dec = ccclass('custom.ForwardStage'), _dec2 = property({
        override: true
      }), _dec3 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(ForwardStage, _BaseStage);

        function ForwardStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._materialName = 'blit-screen';

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "outputNames", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ForwardStage.prototype;

        _proto.buildShadowPass = function buildShadowPass(passName, ppl, camera, light, level, width, height) {
          var device = ppl.device;
          var shadowMapName = passName;

          if (!ppl.containsResource(shadowMapName)) {
            var format = supportsR32FloatTexture(device) ? Format.R32F : Format.RGBA8;
            ppl.addRenderTarget(shadowMapName, format, width, height, ResourceResidency.MANAGED);
            ppl.addDepthStencil(shadowMapName + "Depth", Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
          }

          var pass = ppl.addRasterPass(width, height, 'default');
          pass.name = passName;
          pass.addRasterView(shadowMapName, new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, ClearFlagBit.COLOR, new Color(1, 1, 1, camera.clearColor.w)));
          pass.addRasterView(shadowMapName + "Depth", new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, LoadOp.CLEAR, StoreOp.DISCARD, ClearFlagBit.DEPTH_STENCIL, new Color(camera.clearDepth, camera.clearStencil, 0, 0)));
          var rect = getRenderArea(new gfx.Rect(), camera, width, height, light, level);
          pass.setViewport(new Viewport(rect.x, rect.y, rect.width, rect.height));
          var queue = pass.addQueue(QueueHint.RENDER_OPAQUE);
          queue.addSceneOfCamera(camera, new LightInfo(light, level), SceneFlags.SHADOW_CASTER);
        };

        _proto.buildShadowPasses = function buildShadowPasses(cameraName, camera, ppl) {
          validPunctualLightsCulling(ppl, camera);
          var pipeline = ppl;
          var shadowInfo = pipeline.pipelineSceneData.shadows;
          var validPunctualLights = ppl.pipelineSceneData.validPunctualLights;
          var cameraInfo = new CameraInfo();
          var shadows = ppl.pipelineSceneData.shadows;

          if (!shadowInfo.enabled || shadowInfo.type !== ShadowType.ShadowMap) {
            return cameraInfo;
          }

          cameraInfo.shadowEnabled = true;
          var _validLights = [];
          var n = 0;
          var m = 0;

          for (; n < shadowInfo.maxReceived && m < validPunctualLights.length;) {
            var light = validPunctualLights[m];

            if (light.type === LightType.SPOT) {
              var spotLight = light;

              if (spotLight.shadowEnabled) {
                _validLights.push(light);

                n++;
              }
            }

            m++;
          }

          var _ref = camera.scene,
              mainLight = _ref.mainLight; // build shadow map

          var mapWidth = shadows.size.x;
          var mapHeight = shadows.size.y;

          if (mainLight && mainLight.shadowEnabled) {
            cameraInfo.mainLightShadowNames[0] = "MainLightShadow" + cameraName;

            if (mainLight.shadowFixedArea) {
              this.buildShadowPass(cameraInfo.mainLightShadowNames[0], ppl, camera, mainLight, 0, mapWidth, mapHeight);
            } else {
              var csmLevel = pipeline.pipelineSceneData.csmSupported ? mainLight.csmLevel : 1;

              for (var i = 0; i < csmLevel; i++) {
                cameraInfo.mainLightShadowNames[i] = "MainLightShadow" + cameraName;
                this.buildShadowPass(cameraInfo.mainLightShadowNames[i], ppl, camera, mainLight, i, mapWidth, mapHeight);
              }
            }
          }

          for (var l = 0; l < _validLights.length; l++) {
            var _light = _validLights[l];
            var passName = "SpotLightShadow" + l.toString() + cameraName;
            cameraInfo.spotLightShadowNames[l] = passName;
            this.buildShadowPass(passName, ppl, camera, _light, 0, mapWidth, mapHeight);
          }

          return cameraInfo;
        };

        _proto.render = function render(camera, ppl) {
          // hack: use fog uniform to set forward pipeline
          director.root.pipeline.pipelineSceneData.fog.fogStart = 0;
          var cameraID = getCameraUniqueID(camera); // const shadowInfo = this.buildShadowPasses(cameraName, camera, ppl);

          var area = this.getRenderArea(camera);
          var width = area.width;
          var height = area.height;
          var slot0 = this.slotName(camera, 0);
          var slot1 = this.slotName(camera, 1);

          if (!ppl.containsResource(slot0)) {
            {
              ppl.addRenderTarget(slot0, Format.RGBA16F, width, height, ResourceResidency.MANAGED);
            }
            ppl.addDepthStencil(slot1, Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
          }

          {
            ppl.updateRenderTarget(slot0, width, height);
            ppl.updateDepthStencil(slot1, width, height);
          }
          var pass = ppl.addRasterPass(width, height, 'default');
          pass.name = this.name + "_" + cameraID; // pass.setViewport(new Viewport(area.x, area.y, width, height));
          // for (const dirShadowName of shadowInfo.mainLightShadowNames) {
          //     if (ppl.containsResource(dirShadowName)) {
          //         const computeView = new ComputeView();
          //         forwardPass.addComputeView(dirShadowName, computeView);
          //     }
          // }
          // for (const spotShadowName of shadowInfo.spotLightShadowNames) {
          //     if (ppl.containsResource(spotShadowName)) {
          //         const computeView = new ComputeView();
          //         forwardPass.addComputeView(spotShadowName, computeView);
          //     }
          // }

          var passView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, new Color(0, 0, 0, 0));
          var passDSView = new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, new Color(camera.clearDepth, camera.clearStencil, 0, 0));
          pass.addRasterView(slot0, passView);
          pass.addRasterView(slot1, passDSView);
          pass.addQueue(QueueHint.RENDER_OPAQUE).addSceneOfCamera(camera, new LightInfo(), SceneFlags.OPAQUE_OBJECT | SceneFlags.PLANAR_SHADOW | SceneFlags.CUTOUT_OBJECT | SceneFlags.DEFAULT_LIGHTING | SceneFlags.DRAW_INSTANCING);
          pass.addQueue(QueueHint.RENDER_TRANSPARENT).addSceneOfCamera(camera, new LightInfo(), SceneFlags.UI | SceneFlags.TRANSPARENT_OBJECT | SceneFlags.GEOMETRY);
        };

        return ForwardStage;
      }(BaseStage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'custom.ForwardStage';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "outputNames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ['ForwardColor', 'ForwardDepth'];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fsr-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './base-stage.ts', './utils2.ts', './pass-utils.ts', './setting.ts', './href-setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, rendering, gfx, Vec4, renderer, BaseStage, getCameraUniqueID, passUtils, settings, HrefSetting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      rendering = module.rendering;
      gfx = module.gfx;
      Vec4 = module.Vec4;
      renderer = module.renderer;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
    }, function (module) {
      passUtils = module.passUtils;
    }, function (module) {
      settings = module.settings;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "f1a1aVRjOtCHo8borUeME6P", "fsr-stage", undefined);

      var type = _decorator.type,
          property = _decorator.property,
          ccclass = _decorator.ccclass;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var FSRStage = exports('FSRStage', (_dec = ccclass('FSRStage'), _dec2 = property({
        override: true
      }), _dec3 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(FSRStage, _BaseStage);

        function FSRStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._materialName = 'fsr';
          _this.materialMap = new Map();
          _this.uniqueStage = true;

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sharpness", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "outputNames", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FSRStage.prototype;

        _proto.checkEnable = function checkEnable() {
          var enable = this.enable && !!HrefSetting.fsr;
          return enable;
        };

        _proto.render = function render(camera, ppl) {
          var cameraID = getCameraUniqueID(camera);
          var area = this.getRenderArea(camera);
          var inputWidth = area.width;
          var inputHeight = area.height;
          var shadingScale = this.finalShadingScale();
          var outWidth = Math.floor(inputWidth / shadingScale);
          var outHeight = Math.floor(inputHeight / shadingScale);
          passUtils.clearFlag = gfx.ClearFlagBit.COLOR;
          Vec4.set(passUtils.clearColor, 0, 0, 0, 1);
          var material = this.materialMap.get(camera);

          if (!material || material.parent !== this.material) {
            material = new renderer.MaterialInstance({
              parent: this.material
            });
            this.materialMap.set(camera, material);
          }

          passUtils.material = material;
          material.setProperty('fsrParams', new Vec4(this.sharpness, 0, 0, 0));
          material.setProperty('texSize', new Vec4(inputWidth, inputHeight, outWidth, outHeight));
          var input0 = this.lastStage.slotName(camera, 0);
          var easu = 'FSR_EASU';
          passUtils.addRasterPass(outWidth, outHeight, 'post-process', "CameraFSR_EASU_Pass" + cameraID).setViewport(area.x, area.y, outWidth, outHeight).setPassInput(input0, 'outputResultMap').addRasterView(easu, Format.RGBA8).blitScreen(0);
          var slot0 = this.slotName(camera, 0);
          passUtils.addRasterPass(outWidth, outHeight, 'post-process', "CameraFSR_RCAS_Pass" + cameraID).setViewport(area.x, area.y, outWidth, outHeight).setPassInput(easu, 'outputResultMap').addRasterView(slot0, Format.RGBA8).blitScreen(1);
          settings.tonemapped = true;
        };

        return FSRStage;
      }(BaseStage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'FSRStage';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sharpness", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "outputNames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ['FSRColor'];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fun.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ed3d4WCsZNHJpU/MgDfbWRo", "fun", undefined);

      var fun = exports('fun', /*#__PURE__*/function () {
        function fun() {}

        fun.delay = function delay(f, time) {
          setTimeout(f, time * 1000);
        };

        return fun;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-actor-fall-point.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ParticleSystem, geometry, v3, PhysicsSystem, Component, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem = module.ParticleSystem;
      geometry = module.geometry;
      v3 = module.v3;
      PhysicsSystem = module.PhysicsSystem;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "079ffBOeyBO3aMG1gk/AcFZ", "fx-actor-fall-point", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxActorFallPoint = exports('FxActorFallPoint', (_dec = ccclass('FxActorFallPoint'), _dec2 = property(ParticleSystem), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxActorFallPoint, _Component);

        function FxActorFallPoint() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._ray = new geometry.Ray();
          _this._height = 0;
          _this._line = void 0;
          _this._fxHit = void 0;
          _this._hitPos = void 0;

          _initializerDefineProperty(_this, "particle_high_light", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rate_high_light", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FxActorFallPoint.prototype;

        _proto.start = function start() {
          this._line = this.node.getChildByName('line');
          this._fxHit = this.node.getChildByName('hitpoint');
          this._hitPos = v3(0, 0, 0);
          this._ray.d.x = 0;
          this._ray.d.y = -1;
          this._ray.d.z = 0;
        };

        _proto.update = function update(deltaTime) {
          this.detectPoint();
        };

        _proto.detectPoint = function detectPoint() {
          UtilVec3.copy(this._ray.o, this.node.worldPosition);

          if (PhysicsSystem.instance.raycastClosest(this._ray)) {
            var res = PhysicsSystem.instance.raycastClosestResult;
            this._height = this.node.worldPosition.y - res.hitPoint.y;
            UtilVec3.copy(this._hitPos, res.hitPoint);
            this._hitPos.y += 0.05;
            this.particle_high_light.startSpeed.constant = this._height * this.rate_high_light; //this._curverange;
          } else {
            this._height = 0;
          }

          var isShow = this._height > 0.3;
          this._line.active = isShow;
          this._fxHit.active = isShow;

          this._line.setScale(1, this._height * 3, 1);

          this._fxHit.setWorldPosition(this._hitPos);
        };

        return FxActorFallPoint;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "particle_high_light", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rate_high_light", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-auto-remove.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ParticleSystem, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem = module.ParticleSystem;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "9a13dQ1gv1PzI0/macqLJJ/", "fx-auto-remove", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxAutoRemove = exports('FxAutoRemove', (_dec = ccclass('FxAutoRemove'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxAutoRemove, _Component);

        function FxAutoRemove() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "delayTime", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FxAutoRemove.prototype;

        _proto.start = function start() {
          var _this$node;

          var particles = (_this$node = this.node) == null ? void 0 : _this$node.getComponentsInChildren(ParticleSystem);

          for (var i = 0; i < particles.length; i++) {
            particles[i].play();
          }
        };

        _proto.update = function update(deltaTime) {
          this.delayTime -= deltaTime;

          if (this.delayTime < 0) {
            deltaTime = 9999;
            this.node.destroy();
          }
        };

        return FxAutoRemove;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "delayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-base.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fun.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ParticleSystem, Component, fun;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem = module.ParticleSystem;
      Component = module.Component;
    }, function (module) {
      fun = module.fun;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "a337dbviatHz4BIgY6tyVw5", "fx-base", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxBase = exports('FxBase', (_dec = ccclass('FxBase'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxBase, _Component);

        function FxBase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "destroyTime", _descriptor, _assertThisInitialized(_this));

          _this.particles = void 0;
          return _this;
        }

        var _proto = FxBase.prototype;

        _proto.start = function start() {
          var _this$node;

          this.particles = (_this$node = this.node) == null ? void 0 : _this$node.getComponentsInChildren(ParticleSystem);
        };

        _proto.play = function play() {
          for (var i = 0; i < this.particles.length; i++) {
            var particle = this.particles[i];
            particle.stop();
            particle.play();
          }
        };

        _proto.remove = function remove() {
          var _this2 = this;

          fun.delay(function () {
            _this2.node.destroy();
          }, this.destroyTime);
        };

        return FxBase;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "destroyTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-bullet-tracer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './res.ts', './fun.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, randomRange, Component, Res, fun;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRange = module.randomRange;
      Component = module.Component;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      fun = module.fun;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "2027aQpjO5JX6n1yWEVEr5k", "fx-bullet-tracer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxBulletTracer = exports('FxBulletTracer', (_dec = ccclass('FxBulletTracer'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxBulletTracer, _Component);

        function FxBulletTracer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "poolCount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "segment", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hiddenTime", _descriptor3, _assertThisInitialized(_this));

          _this.pool = void 0;
          return _this;
        }

        var _proto = FxBulletTracer.prototype;

        _proto.__preload = function __preload() {
          this.node.on('init', this.init, this);
        };

        _proto.init = function init() {
          this.pool = new Array(this.poolCount);
          var firstChild = this.node.children[0];
          this.pool[0] = firstChild;
          firstChild.active = false;

          for (var i = 1; i < this.poolCount; i++) {
            this.pool[i] = Res.instNode(firstChild, this.node);
          }

          this.node.on('setTracer', this.setTracer, this);
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off('init', this.init, this);
          this.node.off('setTracer', this.setTracer, this);
        };

        _proto.setTracer = function setTracer(start, end) {
          var endPosition = end.clone();
          var direction = end.clone().subtract(start).normalize();
          var length = endPosition.subtract(start).length();
          var eachSegment = length / this.poolCount;
          var count = this.calculateSegment(length);
          var startPosition = start.clone();

          for (var i = 0; i < count; i++) {
            var currentLength = eachSegment;
            var currentNode = this.pool[i];
            currentNode.active = true;
            currentNode.setPosition(startPosition);
            currentNode.lookAt(end);
            currentNode.setScale(0.3, 1, randomRange(0.3, currentLength));
            startPosition.add(direction.clone().multiplyScalar(currentLength));
          }

          fun.delay(this.hiddenLines.bind(this), this.hiddenTime);
        };

        _proto.calculateSegment = function calculateSegment(length) {
          var count = Math.round(length / this.segment);
          if (count > this.poolCount) count = this.poolCount;
          return count;
        };

        _proto.hiddenLines = function hiddenLines() {
          for (var i = 0; i < this.poolCount; i++) this.pool[i].active = false;
        };

        return FxBulletTracer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "poolCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "segment", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "hiddenTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.05;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-car-random-move.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, randomRange, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRange = module.randomRange;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "e2a817Bt0VFg58Mwhn5duM9", "fx-car-random-move", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxCarRandomMove = exports('FxCarRandomMove', (_dec = ccclass('FxCarRandomMove'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxCarRandomMove, _Component);

        function FxCarRandomMove() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "offsetY", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "intervalTime", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "count", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minTime", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxTime", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FxCarRandomMove.prototype;

        _proto.start = function start() {
          this.intervalTime = randomRange(this.minTime, this.maxTime);
          this.node.setPosition(0, this.offsetY, 0);
        };

        _proto.update = function update(deltaTime) {
          this.intervalTime -= deltaTime;

          if (this.intervalTime < 0) {
            this.intervalTime = randomRange(this.minTime, this.maxTime);

            for (var i = 0; i < this.node.children.length; i++) {
              this.node.children[i].emit('msg_node_fly_car');
            }
          }
        };

        return FxCarRandomMove;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "offsetY", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 54;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "intervalTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "count", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "minTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "maxTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-fly-car.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './sound.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, randomRange, randomRangeInt, random, Component, Sound;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      randomRange = module.randomRange;
      randomRangeInt = module.randomRangeInt;
      random = module.random;
      Component = module.Component;
    }, function (module) {
      Sound = module.Sound;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "ca8aas24DdInY0w56lO6O5Q", "fx-fly-car", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxFlyCar = exports('FxFlyCar', (_dec = ccclass('FxFlyCar'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxFlyCar, _Component);

        function FxFlyCar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "maxTime", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minTime", _descriptor2, _assertThisInitialized(_this));

          _this.animation = void 0;
          _this.waitTime = 0;
          return _this;
        }

        var _proto = FxFlyCar.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.animation = this.node.children[0].getComponent(Animation);
          this.node.on('msg_node_fly_car', function () {
            _this2.waitTime = randomRange(_this2.minTime, _this2.maxTime);
          });
        };

        _proto.update = function update(deltaTime) {
          this.waitTime -= deltaTime;

          if (this.waitTime < 0) {
            var _this$animation, _this$animation2;

            this.waitTime = 9999999999;
            this.node.setRotationFromEuler(0, randomRange(0, 360), 0);
            var y = randomRangeInt(0, 5);
            this.node.setPosition(0, y, 0);
            (_this$animation = this.animation) == null ? void 0 : _this$animation.stop();
            (_this$animation2 = this.animation) == null ? void 0 : _this$animation2.play();
            this.animation.defaultClip.speed = randomRange(0.2, 0.6);
            if (random() > 0.5 && y < 7) Sound.on('sfx_car_fly', randomRange(0.3, 1));
          }
        };

        return FxFlyCar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "maxTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "minTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-ghost-vertex.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v4, v3, SkinnedMeshRenderer, clamp01, Vec3, Component, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v4 = module.v4;
      v3 = module.v3;
      SkinnedMeshRenderer = module.SkinnedMeshRenderer;
      clamp01 = module.clamp01;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "2f0404bvmdBJYOUS4dso/Rx", "fx-ghost-vertex", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxGhostVertex = exports('FxGhostVertex', (_dec = ccclass('FxGhostVertex'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxGhostVertex, _Component);

        function FxGhostVertex() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "intensity", _descriptor, _assertThisInitialized(_this));

          _this.materials = [];
          _this.directionUniform = v4();
          _this.direction = v3();
          _this.currentPosition = void 0;
          _this.lastPosition = void 0;
          _this.t = 0;
          return _this;
        }

        var _proto = FxGhostVertex.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.currentPosition = this.node.position.clone();
          this.lastPosition = this.currentPosition.clone();
          var components = this.node.getComponentsInChildren(SkinnedMeshRenderer);
          components.forEach(function (comp) {
            _this2.materials.push(comp.material);
          });
        };

        _proto.update = function update(deltaTime) {
          var _this3 = this;

          UtilVec3.copy(this.currentPosition, this.node.worldPosition);

          if (this.currentPosition.equals(this.lastPosition)) {
            this.t = 0;
          }

          this.t += deltaTime;
          this.t = clamp01(this.t);
          Vec3.lerp(this.lastPosition, this.lastPosition, this.currentPosition, this.t);
          Vec3.subtract(this.direction, this.lastPosition, this.currentPosition).multiplyScalar(this.intensity);
          this.materials.forEach(function (material) {
            var handle = material.passes[0].getHandle("direction");
            material.passes[0].getUniform(handle, _this3.directionUniform);

            _this3.directionUniform.set(_this3.direction.x, _this3.direction.y, _this3.direction.z, _this3.directionUniform.w);

            material.passes[0].setUniform(handle, _this3.directionUniform);
          });
        };

        return FxGhostVertex;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "intensity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 4;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-ghost.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './res.ts', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SkinnedMeshRenderer, MeshRenderer, Component, Res, UtilNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SkinnedMeshRenderer = module.SkinnedMeshRenderer;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      UtilNode = module.UtilNode;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "15334m3zupEZYbwablb0Hq1", "fx-ghost", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxGhost = exports('FxGhost', (_dec = ccclass('FxGhost'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxGhost, _Component);

        function FxGhost() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "count", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "target", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "simpleTime", _descriptor3, _assertThisInitialized(_this));

          _this.meshRenders = void 0;
          _this._intervalTime = 0;
          _this._ghostItems = [];
          _this._eachCount = 0;
          _this._index = 0;
          _this._total = 0;
          return _this;
        }

        var _proto = FxGhost.prototype;

        _proto.start = function start() {
          this.meshRenders = this.target.getComponentsInChildren(SkinnedMeshRenderer);
          console.log(this.meshRenders);
          this._eachCount = this.meshRenders.length;
          var total = this.count * this._eachCount;
          this._total = total;
          this._ghostItems = Array(total);
          var itemNode = this.node.children[0];
          this._ghostItems[0] = {
            node: itemNode,
            meshRender: UtilNode.getComponent(itemNode, MeshRenderer)
          };

          for (var i = 1; i < total; i++) {
            var newNode = Res.instNode(itemNode, this.node);
            this._ghostItems[i] = {
              node: newNode,
              meshRender: UtilNode.getComponent(newNode, MeshRenderer)
            };
          }

          console.log(this.meshRenders, this._ghostItems);
        };

        _proto.update = function update(deltaTime) {
          this._intervalTime -= deltaTime;

          if (this._intervalTime < 0) {
            this.simpleMeshInfo();
            this._intervalTime = this.simpleTime;
          }
        };

        _proto.simpleMeshInfo = function simpleMeshInfo() {
          for (var i = 0; i < this._eachCount; i++) {
            var mesh = this.meshRenders[i].mesh;
            var node = this.meshRenders[i].node;

            if (mesh != null) {
              var copyMesh = Object.assign(mesh);
              var ghost = this._ghostItems[this._index];
              ghost.meshRender.mesh = copyMesh;
              ghost.node.setPosition(this._index, node.worldPosition.y, node.worldPosition.z);
              ghost.node.setWorldRotation(node.getWorldRotation());
              this._index++;
              console.log(this._index);
              if (this._index >= this._total) this._index = 0;
            } else {
              console.warn(this.meshRenders[i].node.name + " Can not find mesh");
            }
          }
        };

        return FxGhost;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "count", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "simpleTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-group.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fun.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ParticleSystem, Component, fun;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem = module.ParticleSystem;
      Component = module.Component;
    }, function (module) {
      fun = module.fun;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "67c81qisCpIuZe2AlE7MRDT", "fx-group", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxGroup = exports('FxGroup', (_dec = ccclass('FxGroup'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxGroup, _Component);

        function FxGroup() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._particles = void 0;
          _this._loop = true;

          _initializerDefineProperty(_this, "delayTime", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FxGroup.prototype;

        _proto.start = function start() {
          this._particles = this.node.getComponentsInChildren(ParticleSystem);
          this.node.on('setDestroy', this.setDestroy, this);
          this.play(true);

          if (this._particles === undefined || this._particles.length <= 0) {
            throw new Error("This node " + this.node.name + " can not find particles.");
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off('setDestroy', this.setDestroy, this);
        };

        _proto.setLoop = function setLoop(value) {
          for (var i = 0; i < this._particles.length; i++) {
            this._particles[i].loop = value;
          }

          this._loop = value;
        };

        _proto.setEnable = function setEnable(value) {
          for (var i = 0; i < this._particles.length; i++) {
            this._particles[i].enabled = value;
          }
        };

        _proto.stop = function stop(value) {
          for (var i = 0; i < this._particles.length; i++) {
            this._particles[i].stop();
          }
        };

        _proto.play = function play(value) {
          for (var i = 0; i < this._particles.length; i++) {
            this._particles[i].play();
          }
        };

        _proto.setDestroy = function setDestroy() {
          var _this2 = this;

          this.setLoop(false);
          fun.delay(function () {
            var _this2$node;

            (_this2$node = _this2.node) == null ? void 0 : _this2$node.destroy();
          }, this.delayTime);
        };

        return FxGroup;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "delayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-init.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fx.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, fx;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      fx = module.fx;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ed45evN5chHZorv00WyDaoU", "fx-init", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxInit = exports('FxInit', (_dec = ccclass('FxInit'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxInit, _Component);

        function FxInit() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = FxInit.prototype;

        _proto.start = function start() {
          fx.init(this.node);
        };

        return FxInit;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-light-flash.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, MeshRenderer, randomRangeInt, math, Color, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      randomRangeInt = module.randomRangeInt;
      math = module.math;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "81bbcKEtCtKh5NgwGgaV/8x", "fx-light-flash", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxLightFlash = exports('FxLightFlash', (_dec = ccclass('FxLightFlash'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxLightFlash, _Component);

        function FxLightFlash() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.matLight = void 0;
          _this.lightColor = new Color(255, 255, 255, 255);
          _this.lightValueMax = 10;
          _this.lightValueMin = 200;
          _this.length = 0;
          _this.flashTimes = 3;
          _this.value = 0;
          _this.t = 0;
          _this.smooth = 10;
          _this.isFlash = false;
          return _this;
        }

        var _proto = FxLightFlash.prototype;

        _proto.start = function start() {
          var _this$node$getCompone;

          this.matLight = (_this$node$getCompone = this.node.getComponent(MeshRenderer)) == null ? void 0 : _this$node$getCompone.materials[0];
          this.onFlash();
        };

        _proto.onFlash = function onFlash() {
          this.flashTimes = randomRangeInt(1, 5);
          this.lightValueMax = 255;
          this.lightValueMin = randomRangeInt(180, 200);
          this.length = this.lightValueMax - this.lightValueMin;
          this.value = this.lightValueMax;
        };

        _proto.update = function update(deltaTime) {
          var _this$matLight;

          this.t += deltaTime;
          this.value = math.pingPong(this.t * this.smooth, this.length) + this.lightValueMin;
          this.lightColor.a = this.value;
          this.lightColor.g = this.value;
          this.lightColor.b = this.value;
          (_this$matLight = this.matLight) == null ? void 0 : _this$matLight.setProperty('emissive', this.lightColor);
        };

        return FxLightFlash;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx-ray-line.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, Component, UtilVec3;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "303d6l3bwlBS4gsxegu8pB1", "fx-ray-line", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FxRayLine = exports('FxRayLine', (_dec = ccclass('FxRayLine'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FxRayLine, _Component);

        function FxRayLine() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.direction = v3(0, 0, 0);
          return _this;
        }

        var _proto = FxRayLine.prototype;

        _proto.setRayLine = function setRayLine(start, end) {
          UtilVec3.copy(this.direction, end);
          this.direction.subtract(start);
          var length = this.direction.length(); //this.node.lookAt(this.direction);

          this.node.setScale(0.1, 1, length);
        };

        return FxRayLine;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fx.ts", ['cc', './res.ts', './res-cache.ts', './util.ts', './fx-base.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, sys, ParticleSystem, Res, ResCache, UtilNode, FxBase;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      ParticleSystem = module.ParticleSystem;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      UtilNode = module.UtilNode;
    }, function (module) {
      FxBase = module.FxBase;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "0114dEwOBNDK5KXBCkGcdgv", "fx", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var fx = exports('fx', (_dec = ccclass('fx'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function fx() {}

        fx.init = function init(node) {
          this.node = node;
        };

        fx.on = function on(name, pos) {
          if (sys.platform == sys.Platform.IOS && name.includes('fx_hit')) {
            return;
          }

          if (name == 'fx_hit_body') return;
          var prefab = ResCache.Instance.getPrefab(name);
          var newFx = Res.inst(prefab, this.node, pos);
        };

        fx.play = function play(node, name) {
          var fxNode = UtilNode.find(node, name);

          var _fx = fxNode.getComponent(FxBase);

          _fx == null ? void 0 : _fx.play();
        };

        fx.playLoop = function playLoop(node, name, isLoop) {
          var pNode = UtilNode.find(this.node, name);
          var particles = pNode == null ? void 0 : pNode.getComponentsInChildren(ParticleSystem);

          if (particles === undefined) {
            console.warn(" effect can not find " + name);
            return;
          }

          for (var i = 0; i < particles.length; i++) {
            var p = particles[i];
            p.loop = isLoop;
            if (isLoop) p.play();
          }
        };

        return fx;
      }(), _class2.node = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fxaa-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './base-stage.ts', './utils2.ts', './pass-utils.ts', './href-setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, rendering, gfx, Vec2, Vec4, renderer, BaseStage, getCameraUniqueID, passUtils, HrefSetting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      rendering = module.rendering;
      gfx = module.gfx;
      Vec2 = module.Vec2;
      Vec4 = module.Vec4;
      renderer = module.renderer;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
    }, function (module) {
      passUtils = module.passUtils;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "fc02aH+JINIT4RBde72td/Y", "fxaa-stage", undefined);

      var type = _decorator.type,
          property = _decorator.property,
          ccclass = _decorator.ccclass;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var pointSampler = new gfx.Sampler(new gfx.SamplerInfo(gfx.Filter.POINT, gfx.Filter.POINT), 0);
      pointSampler.custom = true;
      var FxaaStage = exports('FxaaStage', (_dec = ccclass('FxaaStage'), _dec2 = property({
        override: true
      }), _dec3 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(FxaaStage, _BaseStage);

        function FxaaStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._materialName = 'fxaa';
          _this.materialMap = new Map();
          _this.uniqueStage = true;

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "outputNames", _descriptor2, _assertThisInitialized(_this));

          _this._offset = new Vec2();
          _this.texSize = new Vec4();
          return _this;
        }

        var _proto = FxaaStage.prototype;

        _proto.checkEnable = function checkEnable() {
          return _BaseStage.prototype.checkEnable.call(this) && !!HrefSetting.fxaa;
        };

        _proto.render = function render(camera, ppl) {
          var cameraID = getCameraUniqueID(camera);
          var area = this.getRenderArea(camera);
          var width = area.width;
          var height = area.height;
          passUtils.clearFlag = gfx.ClearFlagBit.COLOR;
          Vec4.set(passUtils.clearColor, 0, 0, 0, 1);
          var material = this.materialMap.get(camera);

          if (!material || material.parent !== this.material) {
            material = new renderer.MaterialInstance({
              parent: this.material
            });
            this.materialMap.set(camera, material);
          }

          material.setProperty('texSize', this.texSize.set(width, height, 0, 0));
          passUtils.material = material;
          var input0 = this.lastStage.slotName(camera, 0);
          var slot0 = this.slotName(camera, 0);
          passUtils.addRasterPass(width, height, 'post-process', "Camera_Fxaa_Pass" + cameraID);
          passUtils.setViewport(area.x, area.y, width, height).setPassInput(input0, 'inputTex').addRasterView(slot0, Format.RGBA8).blitScreen(0).version();
        };

        return FxaaStage;
      }(BaseStage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'FxaaStage';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "outputNames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ['FxaaStageColor'];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/g-math.ts", ['cc', './util.ts'], function (exports) {
  'use strict';

  var cclegacy, lerp, Vec3, Color, v3, math, Gizmo;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      lerp = module.lerp;
      Vec3 = module.Vec3;
      Color = module.Color;
      v3 = module.v3;
      math = module.math;
    }, function (module) {
      Gizmo = module.Gizmo;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1c767GdozZCpJ8PXzfR8wYb", "g-math", undefined);

      var GMath = exports('GMath', /*#__PURE__*/function () {
        function GMath() {}

        GMath.uuid = function uuid() {
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c === 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
          });
        } // Clamps value between min and max and returns value.
        // Set the position of the transform to be that of the time
        // but never less than 1 or more than 3
        //
        ;

        GMath.clamp = function clamp(value, min, max) {
          if (value < min) value = min;else if (value > max) value = max;
          return value;
        } // Gradually changes a value towards a desired goal over time.
        ;

        GMath.smoothDamp = function smoothDamp(current, target, currentVelocity, smoothTime, deltaTime) {
          var maxSpeed = Number.POSITIVE_INFINITY; // Based on Game Programming Gems 4 Chapter 1.10

          smoothTime = Math.max(0.0001, smoothTime);
          var omega = 2 / smoothTime;
          var x = omega * deltaTime;
          var exp = 1 / (1 + x + 0.48 * x * x + 0.235 * x * x * x);
          var change = current - target;
          var originalTo = target; // Clamp maximum speed

          var maxChange = maxSpeed * smoothTime;
          change = GMath.clamp(change, -maxChange, maxChange);
          target = current - change;
          var temp = (currentVelocity + omega * change) * deltaTime;
          currentVelocity = (currentVelocity - omega * temp) * exp;
          var output = target + (change + temp) * exp; // Prevent overshooting

          if (originalTo - current > 0 === output > originalTo) {
            output = originalTo;
            currentVelocity = (output - originalTo) / deltaTime;
          }

          return [output, currentVelocity];
        };

        GMath.lerpSmooth = function lerpSmooth(value, target, rate, dt) {
          return lerp(target, value, Math.exp(-rate * dt));
        };

        GMath.range = function range(max, min, value) {
          if (value > max) return max;
          if (value < min) return min;
          return value;
        };

        GMath.StretchedBillboardAngle = function StretchedBillboardAngle(upward, current, target, nodeForward) {
          var targetForward = target.clone().subtract(current);
          var costValue = Vec3.dot(targetForward, nodeForward);
          var projectPoint = nodeForward.clone().multiplyScalar(costValue);
          var projectForward = target.clone().subtract(projectPoint);
          Gizmo.drawLine(Vec3.ZERO, upward.clone().multiplyScalar(4), Color.RED);
          Gizmo.drawLine(Vec3.ZERO, targetForward.clone().multiplyScalar(4), Color.YELLOW);
          Gizmo.drawLine(Vec3.ZERO, nodeForward.clone().multiplyScalar(4), Color.YELLOW);
          Gizmo.drawBox(projectPoint, v3(0.1, 0.1, 0.1), Color.BLUE);
          Gizmo.drawLine(projectPoint, projectForward.clone().add(projectPoint), Color.GREEN);
          Gizmo.drawLine(Vec3.ZERO, projectForward, Color.GREEN);
          var angleForward = v3(1, 0, 0);
          Gizmo.drawLine(Vec3.ZERO, angleForward, Color.MAGENTA); ///const side = -Math.sign(targetForward.clone().cross(upward).x);

          var angle = math.toDegree(Vec3.angle(projectForward, angleForward));
          console.log(angle);
          return target.y > current.y ? angle - 90 : -angle - 90;
        };

        return GMath;
      }());
      var GVec3 = exports('GVec3', /*#__PURE__*/function () {
        function GVec3() {}

        GVec3.smoothDamp = function smoothDamp(current, target, currentVelocity, smoothTime, deltaTime) {
          var x = GMath.smoothDamp(current.x, target.x, currentVelocity.x, smoothTime, deltaTime);
          var y = GMath.smoothDamp(current.y, target.y, currentVelocity.y, smoothTime, deltaTime);
          var z = GMath.smoothDamp(current.z, target.z, currentVelocity.z, smoothTime, deltaTime);
          current.x = x[0];
          current.y = y[0];
          current.z = z[0];
          target.x = x[1];
          target.y = y[1];
          target.z = z[1];
        };

        GVec3.lerpSmooth = function lerpSmooth(value, target, rate, dt) {
          value.x = GMath.lerpSmooth(target.x, value.x, rate, dt);
          value.y = GMath.lerpSmooth(target.y, value.y, rate, dt);
          value.z = GMath.lerpSmooth(target.z, value.z, rate, dt);
          return value;
        };

        return GVec3;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/g-scene.ts", ['cc', './msg.ts', './res-cache.ts'], function (exports) {
  'use strict';

  var cclegacy, director, Msg, ResCache;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1b4c1RDNQhFpIYtG+RSuaHQ", "g-scene", undefined);

      var GScene = exports('GScene', /*#__PURE__*/function () {
        function GScene() {}

        GScene.Load = function Load(name, onload) {
          GScene.isLoadScene = true;
          Msg.emit('pool_recycle');
          /*
          this.msg.current = name;
          this.msg.wait_count = 1;
          this.msg.count = 1;
          Msg.emit('msg_loading',this.msg);
          */

          director.loadScene(name, function (error, scene) {
            if (error) {
              throw new Error("Load Scene Error.");
            }

            if (scene) {
              onload();
              GScene.isLoadScene = false;
              ResCache.Instance.removeLoad(); //this.msg.count--;
            } else {
              console.warn('Can not load scene. - ' + name);
            }
          });
        };

        return GScene;
      }());
      GScene.isLoadScene = false;
      GScene.isPreload = false;
      GScene.msg = {
        id: 100,
        action: 'load scene',
        current: '',
        wait_count: 1,
        count: 1
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/game-type.ts", ['cc'], function () {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      cclegacy._RF.push({}, "569cdaxVGxBWYLT5Dvwh5ld", "game-type", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/game.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './action.ts', './singleton.ts', './ui.ts', './bind.ts', './local.ts', './save.ts', './msg.ts', './data-structure.ts', './level.ts', './sound.ts', './notify.ts', './GameQuality.ts', './data-core.ts', './ui-base.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, find, game, Action, Singleton, UI, Bind, Local, Save, Msg, Stack, Level, Sound, Notify, GameQuality, Init, DataGameInst, BindUI;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      find = module.find;
      game = module.game;
    }, function (module) {
      Action = module.Action;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      UI = module.UI;
    }, function (module) {
      Bind = module.Bind;
    }, function (module) {
      Local = module.Local;
    }, function (module) {
      Save = module.Save;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Stack = module.Stack;
    }, function (module) {
      Level = module.Level;
    }, function (module) {
      Sound = module.Sound;
    }, function (module) {
      Notify = module.Notify;
    }, function (module) {
      GameQuality = module.GameQuality;
    }, function (module) {
      Init = module.Init;
      DataGameInst = module.DataGameInst;
    }, function (module) {
      BindUI = module.BindUI;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f1830vJHSVDMZH8wMcAcGTl", "game", undefined);

      var Game = exports('Game', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(Game, _Singleton);

        function Game() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this._action = void 0;
          _this._stack = new Stack(5);
          _this._nodes = {};
          _this._data = {};
          _this._isInit = false;
          _this._totalGameTime = 0;
          _this._nextSaveTime = 0;
          _this._currentGameNodeName = '';
          _this._poolNode = void 0;
          _this.backSafeTime = 0;
          return _this;
        }

        var _proto = Game.prototype;

        _proto.init = function init() {
          var _find; // Find the root node of all pool objects.


          this._poolNode = (_find = find('init')) == null ? void 0 : _find.getChildByName('objects-pool'); // Initialize the data core.

          Init(); // Initialize local storage.

          Save.Instance.init(); // Initialize the game data.

          this._data = DataGameInst._data; // Initialize game action data.

          this._action = new Action(this._data.action_data); // Get the game node data.

          this._nodes = this._data['nodes']; // Initialize the game quality.

          GameQuality.Instance.init(); // Initialize the sound manager.

          Sound.init(); // Initialize localization.

          Local.Instance.init(); // Initialize the level object.

          Level.Instance.init(); // Initialize the UI binding.

          BindUI.init(); // Initialize the binder.

          Bind.Instance.initData(this._data['events']); // Initialize the UI management object.

          UI.Instance.init(); // Register game node stack operation method.

          Msg.on('push', function (key) {
            Game.Instance.push(key);
          });
          Msg.on('root', function (key) {
            Game.Instance.root(key);
          });
          Msg.on('next', this.next.bind(this));
          Msg.on('back', this.back.bind(this)); // Push the game initial node into the stack data.

          this.push(this._data['start_node']); //Set game initialization to true.

          this._isInit = true; // Check if a message currently exists. 
          // Why it is detected after initialization: because messages may not be displayed properly during initialization.

          Notify.Instance.check_notify();
        }
        /**
         * Jump to the next game node. 
         */
        ;

        _proto.next = function next() {
          var cur = this._stack.cur();

          var nextAction = this._nodes[cur].next;
          if (nextAction) this.push(nextAction);
        }
        /**
         * Return to the previous game node.
         */
        ;

        _proto.back = function back() {
          if (game.totalTime - this.backSafeTime < 50) return;
          this.backSafeTime = game.totalTime;

          var preNode = this._stack.pop();

          this._action.off(preNode);
        }
        /**
         * Returns to the game root node corresponding to the name.
         * @param name 
         */
        ;

        _proto.root = function root(name) {
          var size = this._stack.size() - 1;

          for (var i = 0; i < size - 1; i++) {
            var pre = this._stack.pop();

            this._action.off(pre);
          }
        }
        /**
         * Pushes a new game node.
         * @param name node name.
         */
        ;

        _proto.push = function push(name) {
          this._currentGameNodeName = name;

          if (!this._nodes[name].is_pop && this._stack.size() > 0) {
            var pre = this._stack.pop();

            this._action.off(pre);
          }

          this._stack.push(name);

          this._action.on(name);
        };

        _proto.update = function update(deltaTime) {
          // If initialization false returns, initialization success continues.
          if (!this._isInit) return; //Increase the game time, The accumulated time is the length of each frame.

          this._totalGameTime += deltaTime; // Update the game action logic every frame.

          Game.Instance._action.update(deltaTime); // Update the level logic every frame.


          Level.Instance.update(deltaTime); // Update the binder logic every frame.

          Bind.Instance.update(deltaTime); // Automatic save judgment: true is on, false is off

          if (this._data.auto_save) {
            // When the current total time of the game is greater than the next time node. 
            // true is to update the game storage logic. 
            // false is to wait.
            if (this._totalGameTime > this._nextSaveTime) {
              // Updates the current game time stats.
              Save.Instance.statisticsTime('game', Math.floor(this._data.next_save_time));
              this._nextSaveTime += this._data.next_save_time;
            }
          }
        };

        return Game;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameQuality.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './save.ts', './local.ts', './msg.ts', './singleton.ts', './res-cache.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, PhysicsSystem, Save, Local, Msg, Singleton, ResCache;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      PhysicsSystem = module.PhysicsSystem;
    }, function (module) {
      Save = module.Save;
    }, function (module) {
      Local = module.Local;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5d6eaVuIRZE1YiNRD70MqYh", "GameQuality", undefined);

      var GameQuality = exports('GameQuality', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(GameQuality, _Singleton);

        function GameQuality() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this.index = 0;
          _this.max = 2;
          _this._data = Object.create(null);
          _this._map = Object.create(null);
          _this.cur = {
            "name": "game_quality_high",
            "level": -1,
            "fps": 59.9,
            "maxSubSteps": 1,
            "open_ik": true
          };
          _this._default = 0;
          return _this;
        }

        var _proto = GameQuality.prototype;

        _proto.init = function init() {
          var _this2 = this;

          this._data = ResCache.Instance.getJson('data-quality').json;
          this.index = 0;
          if (this.index < 0) this.index = 0;
          if (this.index >= this._data.set.length) this.index = this.index = this._data.set.length - 1;
          this._default = this.index;
          this.cur = this._data.set[this.index];
          PhysicsSystem.instance.maxSubSteps = 10; // game.frameRate = this.cur.fps;

          Msg.on('next_quality', function () {
            _this2.index++;
            if (_this2.index >= _this2._data.set.length) _this2.index = 0;
            _this2.cur = _this2._data.set[_this2.index];
            Save.Instance._cur.game_quality = _this2.index;
            Local.Instance.refresh();
          });
          Msg.on('pre_quality', function () {
            _this2.index--;
            if (_this2.index < 0) _this2.index = _this2._data.set.length - 1;
            _this2.cur = _this2._data.set[_this2.index];
            Save.Instance._cur.game_quality = _this2.index;
            Local.Instance.refresh();
          });
          Msg.on('msg_check_change', this.checkChange.bind(this));
        };

        _proto.checkChange = function checkChange() {
          if (this._default !== this.index) {
            // Restart game.
            globalThis.window.location.reload();
          }
        };

        _proto.getShowName = function getShowName() {
          return Local.Instance.get(this._data.set[this.index].name);
        };

        return GameQuality;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/generate-white-box.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, find, MeshRenderer, instantiate, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      find = module.find;
      MeshRenderer = module.MeshRenderer;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "8fc34KMtedBrKH+6r3Dy6gl", "generate-white-box", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var generate_white_box = exports('generate_white_box', (_dec = ccclass('generate_white_box'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(generate_white_box, _Component);

        function generate_white_box() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "targetRoot", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "temp", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = generate_white_box.prototype;

        _proto.doGenerate = function doGenerate() {
          var _this2 = this;

          if (!this.temp || !this.targetRoot) {
            return;
          }

          var root = find('root', this.node);

          if (!root) {
            root = new Node('root');
            root.parent = this.node;
          }

          root.removeAllChildren();
          var mrs = this.targetRoot.getComponentsInChildren(MeshRenderer);
          mrs.forEach(function (mr) {
            if (!mr.model) {
              return;
            }

            var n = instantiate(_this2.temp);
            n.name = mr.node.name;
            var bounds = mr.model.worldBounds;
            n.position = bounds.center;
            n.setScale(bounds.halfExtents.x * 2, bounds.halfExtents.y * 2, bounds.halfExtents.z * 2); // n.hideFlags |= CCObject.Flags.DontSave;

            n.parent = root;
          });
        };

        _createClass(generate_white_box, [{
          key: "generate",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this.doGenerate();
          }
        }]);

        return generate_white_box;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "targetRoot", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "temp", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2.prototype, "generate", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "generate"), _class2.prototype)), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gm.ts", ['cc', './Electron.ts', './save.ts', './res-cache.ts'], function (exports) {
  'use strict';

  var cclegacy, Electron, Save, ResCache;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Electron = module.default;
    }, function (module) {
      Save = module.Save;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6ea61dB+cdC7YvL+4dfxK93", "gm", undefined);

      var GM = exports('GM', /*#__PURE__*/function () {
        function GM() {}

        GM.init = function init() {
          this._data = ResCache.Instance.getJson('data-gm').json;
          console.log(this._data);

          this._dic['clear_data'] = function (data) {
            Save.Instance.clear_data(data[1]);
          };

          this._dic['delete_all'] = function (data) {
            Save.Instance.deleteAllArchive();
          };

          this._dic['clear_by_key'] = function (data) {
            Save.Instance.clearByKey(data[1]);
          };

          this._dic['set'] = function (data) {
            Save.Instance.set(data[1], data[2]);
          };

          this._dic['app'] = function (data) {
            var info = data[1].split(':');
            Electron.sendAsync(info[0], info[1]);
          };
        };

        GM.deleteAll = function deleteAll() {
          Save.Instance.deleteAllArchive();
        };

        GM.run = function run(data) {
          var cmdList = data.split(' ');
          var cmd = cmdList[0];
          var cmdFun = this._dic[cmd];

          if (cmdFun) {
            cmdFun(cmdList);
          }
        };

        GM.getHelp = function getHelp() {
          var info = 'GM help:';

          this._data['gm_help'].forEach(function (element) {
            info += element + '\n\n';
          });

          console.log(info);
          return info;
        };

        return GM;
      }());
      GM._dic = {};
      GM._data = Object.create(null);
      globalThis.GM = GM;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gpu-mobiles.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f75af/JjYtEwp/iLcrj4AFc", "gpu-mobiles", undefined);

      var GpuMobiles = exports('GpuMobiles', {
        "adreno": {
          "530": 272,
          "540": 384,
          "615": 196,
          "616": 227,
          "618": 316,
          "619": 330,
          "620": 457,
          "630": 509,
          "640": 848,
          "642": 835,
          "650": 1171,
          "660": 1460,
          "662": 824,
          "730": 2596,
          "740": 3671,
          "642l": 703,
          "619l": 252
        },
        "immortalis": {
          "g715": 3535
        },
        "apple": {
          "a16": 3331,
          "a15": 2725,
          "a14": 1800,
          "a13": 1576,
          "a12": 1100,
          "a11": 896,
          "a10": 300
        },
        "mali": {
          "g710": 2319,
          "g78": 1790,
          "g610": 1440,
          "g77": 1258,
          "g76": 625,
          "g57": 365,
          "g68": 610,
          "g52": 190,
          "g72": 183
        },
        "xclipse": {
          "920": 1906
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gpu.ts", ['cc', './gpu-mobiles.ts'], function (exports) {
  'use strict';

  var cclegacy, director, sys, GpuMobiles;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      sys = module.sys;
    }, function (module) {
      GpuMobiles = module.GpuMobiles;
    }],
    execute: function () {
      exports({
        RenderQulity: void 0,
        getGPUVersion: getGPUVersion
      });

      cclegacy._RF.push({}, "0e004mHOSRIt6tAOM/83iAb", "gpu", undefined);

      var RenderQulity;

      (function (RenderQulity) {
        RenderQulity[RenderQulity["Low"] = 0] = "Low";
        RenderQulity[RenderQulity["Medium"] = 1] = "Medium";
        RenderQulity[RenderQulity["High"] = 2] = "High";
      })(RenderQulity || (RenderQulity = exports('RenderQulity', {})));

      var getGpuType = function getGpuType(renderer) {
        var types = sys.isMobile ? ['adreno', 'apple', 'mali', 'xclipse', 'immortalis'] : ['intel', 'apple', 'amd', 'radeon', 'nvidia', 'geforce'];

        for (var _i = 0, _types = types; _i < _types.length; _i++) {
          var type = _types[_i];

          if (renderer.includes(type)) {
            return type;
          }
        }
      };

      function getGPUVersion(model) {
        var _matches$join$replace; // model = model.replace(/\([^)]+\)/, '');


        var matches = // First set of digits
        model.match(/[ga]?\d+/) || // If the renderer did not contain any numbers, match letters
        model.match(/(\W|^)([A-Za-z]{1,3})(\W|$)/g); // Remove any non-word characters and also remove 'amd' which could be matched
        // in the clause above

        return (_matches$join$replace = matches == null ? void 0 : matches.join('').replace(/\W|amd/g, '')) != null ? _matches$join$replace : '';
      }

      var gpuType = exports('gpuType', '');
      var gpuVersion = exports('gpuVersion', '');
      var gpuScore = exports('gpuScore', 0);

      if (director.root && director.root.device) {
        var renderer = director.root.device.renderer.toLowerCase();
        console.log('renderer: ' + renderer);
        gpuType = exports('gpuType', getGpuType(renderer));
        gpuVersion = exports('gpuVersion', getGPUVersion(renderer));
        console.log('gpuType : ' + gpuType);
        console.log('gpuVersion : ' + gpuVersion);

        try {
          gpuScore = exports('gpuScore', GpuMobiles[gpuType][gpuVersion]);
          console.log("gpu : score(" + gpuScore + ")");
        } catch (err) {
          if (sys.isMobile) {
            console.warn("Get gpu score failed");
          }
        }
      }

      globalThis.gpuInfo = {
        gpuType: gpuType,
        gpuVersion: gpuVersion,
        gpuScore: gpuScore
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/grandom.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy, _decorator, randomRangeInt;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRangeInt = module.randomRangeInt;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b25e3mXfdBBtYEaNzzQk4uq", "grandom", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      /*
       *  Xn+1 =( A * Xn + C ) mod M
       */

      var GRandom = exports('GRandom', (_dec = ccclass('GRandom'), _dec(_class = /*#__PURE__*/function () {
        //0x07ffff;
        function GRandom(seed) {
          if (seed === void 0) {
            seed = -1;
          }

          this.preValue = 0;
          this.seed = 0;
          this.c = 49297;
          this.a = 9301;
          this.m = 233280;
          this.seed = seed;
          if (this.seed === -1) this.seed = randomRangeInt(0, 0xffffffff);
          this.preValue = this.seed;
        }

        var _proto = GRandom.prototype;

        _proto.reset = function reset() {
          this.preValue = this.seed;
        };

        _proto.value = function value() {
          this.preValue = (this.a * this.preValue + this.c) % this.m;
          return this.preValue;
        };

        _proto.range = function range(min, max) {
          var v = min + this.value() % (max - min + 1);
          return v;
        };

        _proto.range1000 = function range1000(min, max) {
          var ret = this.range(min * 1000, max * 1000);
          return Math.floor(ret / 1000);
        };

        _createClass(GRandom, [{
          key: "value1000",
          get: function get() {
            return this.range(0, 1000);
          }
        }]);

        return GRandom;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/graph-data.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "06b90PpXeBGvI7VHyxf5Vmu", "graph-data", undefined);

      var graphData = exports('default', {
        "last_node_id": 26,
        "last_link_id": 67,
        "nodes": [{
          "id": 17,
          "type": "pipeline/TAAStage",
          "pos": [1353, 714],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 14,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": null
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 52
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [53],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "TAA",
            "shadingScale": 1,
            "Name": "TAAStage",
            "Enable": true,
            "CameraOutputType": "Color",
            "Format": "RGBA8",
            "sampleScale": 1,
            "feedback": 0.95,
            "shaowHistoryTexture": false,
            "clampHistoryTexture": true,
            "forceRender": true,
            "dirty": false
          }
        }, {
          "id": 15,
          "type": "pipeline/Pipeline",
          "pos": [123, 144],
          "size": {
            "0": 210,
            "1": 82
          },
          "flags": {},
          "order": 0,
          "mode": 0,
          "outputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "links": [34],
            "slot_index": 0
          }],
          "properties": {
            "Name": "forward",
            "Enable": true
          }
        }, {
          "id": 16,
          "type": "pipeline/RenderToScreen",
          "pos": [951, 134],
          "size": {
            "0": 140,
            "1": 26
          },
          "flags": {},
          "order": 9,
          "mode": 0,
          "inputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 56
          }],
          "properties": {}
        }, {
          "id": 5,
          "type": "pipeline/custom.ForwardStage",
          "pos": [402, 133],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 3,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": 34
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": null
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [55],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "BaseStage",
            "shadingScale": 1,
            "Name": "custom.ForwardStage",
            "Enable": true,
            "CameraOutputType": "Color",
            "Format": "RGBA8",
            "material": "blit-screen",
            "outputName": "ForwardStage"
          }
        }, {
          "id": 19,
          "type": "pipeline/ForwardPostStage",
          "pos": [689, 145],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 6,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": null
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 55
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [56],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "ForwardPostStage",
            "shadingScale": 1
          }
        }, {
          "id": 20,
          "type": "pipeline/Pipeline",
          "pos": [150, 1030],
          "size": {
            "0": 210,
            "1": 82
          },
          "flags": {},
          "order": 1,
          "mode": 0,
          "outputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "links": [57],
            "slot_index": 0
          }],
          "properties": {
            "Name": "reflection-probe",
            "Enable": true
          }
        }, {
          "id": 24,
          "type": "pipeline/RenderToScreen",
          "pos": [1243, 1046],
          "size": {
            "0": 140,
            "1": 26
          },
          "flags": {},
          "order": 12,
          "mode": 0,
          "inputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 60
          }],
          "properties": {}
        }, {
          "id": 21,
          "type": "pipeline/DeferredGBufferStage",
          "pos": [420, 1029],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 4,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": 57
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": null
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [58],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "DeferredGBuffer-rp",
            "shadingScale": 1,
            "Name": "DeferredGBufferStage",
            "Enable": true,
            "CameraOutputType": "Color",
            "Format": "RGBA8",
            "material": "blit-screen"
          }
        }, {
          "id": 22,
          "type": "pipeline/DeferredLightingStage",
          "pos": [714, 1034],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 7,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": null
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 58
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [59],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "DeferredLighting-rp",
            "shadingScale": 1,
            "Name": "DeferredLightingStage",
            "Enable": true,
            "CameraOutputType": "Color",
            "Format": "RGBA8",
            "material": "blit-screen"
          }
        }, {
          "id": 23,
          "type": "pipeline/DeferredPostStage",
          "pos": [992, 1039],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 10,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": null
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 59
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [60],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "DeferredPost-rp",
            "shadingScale": 1,
            "Name": "DeferredPostStage",
            "Enable": true,
            "CameraOutputType": "Color",
            "Format": "RGBA8",
            "material": "blit-screen"
          }
        }, {
          "id": 14,
          "type": "pipeline/custom.BloomStage",
          "pos": [1088, 753],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 13,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": null
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 62
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null,
            "slot_index": 2
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [52],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "Bloom",
            "shadingScale": 1,
            "Name": "custom.BloomStage",
            "Enable": true,
            "CameraOutputType": "Color",
            "Format": "RGBA8",
            "material": "blit-screen",
            "threshold": 0.1,
            "iterations": 2,
            "intensity": 0.8
          }
        }, {
          "id": 11,
          "type": "pipeline/DeferredLightingStage",
          "pos": [745, 608],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 11,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": null
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 17
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [62],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "DeferredLighting",
            "shadingScale": 1,
            "Name": "DeferredLightingStage",
            "Enable": true,
            "CameraOutputType": "Color",
            "Format": "RGBA8",
            "material": "blit-screen"
          }
        }, {
          "id": 18,
          "type": "pipeline/FSRStage",
          "pos": [1618, 739],
          "size": {
            "0": 228.39999389648438,
            "1": 170
          },
          "flags": {},
          "order": 15,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": null
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 53
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [64],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "FSR",
            "shadingScale": 1,
            "sharpness": 0.2,
            "Name": "FSRStage",
            "Enable": true,
            "CameraOutputType": "Color",
            "Format": "RGBA8"
          }
        }, {
          "id": 12,
          "type": "pipeline/DeferredPostStage",
          "pos": [2260, 762],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 17,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": null
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 65
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [22],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "DeferredPost",
            "shadingScale": 1,
            "Name": "DeferredPostStage",
            "Enable": true,
            "CameraOutputType": "Color",
            "Format": "RGBA8",
            "material": "blit-screen"
          }
        }, {
          "id": 4,
          "type": "pipeline/RenderToScreen",
          "pos": [2534, 770],
          "size": {
            "0": 140,
            "1": 26
          },
          "flags": {},
          "order": 18,
          "mode": 0,
          "inputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 22
          }],
          "properties": {}
        }, {
          "id": 25,
          "type": "pipeline/ZoomScreenStage",
          "pos": [1942, 742],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 16,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": null
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 64
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [65],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "ZoomScreenStage",
            "shadingScale": 1
          }
        }, {
          "id": 1,
          "type": "pipeline/Pipeline",
          "pos": [-223, 626],
          "size": {
            "0": 210,
            "1": 82
          },
          "flags": {},
          "order": 2,
          "mode": 0,
          "outputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "links": [66],
            "slot_index": 0
          }],
          "properties": {
            "Name": "main",
            "Enable": true
          }
        }, {
          "id": 26,
          "type": "pipeline/CustomShadowStage",
          "pos": [103, 641],
          "size": {
            "0": 228.39999389648438,
            "1": 170
          },
          "flags": {},
          "order": 5,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": 66
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": null
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [67],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "CustomShadowStage",
            "shadingScale": 1,
            "textureFormat": 35
          }
        }, {
          "id": 10,
          "type": "pipeline/DeferredGBufferStage",
          "pos": [444, 612],
          "size": {
            "0": 228.39999389648438,
            "1": 146
          },
          "flags": {},
          "order": 8,
          "mode": 0,
          "inputs": [{
            "name": "Camera Output",
            "type": "Camera Output",
            "link": null
          }, {
            "name": "RenderTexture",
            "type": "RenderTexture",
            "link": 67
          }, {
            "name": "Custom Size",
            "type": "vec2",
            "link": null
          }],
          "outputs": [{
            "name": "RenderTexture",
            "type": "RenderTexture",
            "links": [17],
            "slot_index": 0
          }],
          "properties": {
            "showResult": false,
            "enable": true,
            "name": "DeferredGBuffer",
            "shadingScale": 1,
            "Name": "DeferredGBufferStage",
            "Enable": true,
            "CameraOutputType": "Color",
            "Format": "RGBA8",
            "material": "blit-screen"
          }
        }],
        "links": [[17, 10, 0, 11, 1, "RenderTexture"], [22, 12, 0, 4, 0, "RenderTexture"], [34, 15, 0, 5, 0, "Camera Output"], [52, 14, 0, 17, 1, "RenderTexture"], [53, 17, 0, 18, 1, "RenderTexture"], [55, 5, 0, 19, 1, "RenderTexture"], [56, 19, 0, 16, 0, "RenderTexture"], [57, 20, 0, 21, 0, "Camera Output"], [58, 21, 0, 22, 1, "RenderTexture"], [59, 22, 0, 23, 1, "RenderTexture"], [60, 23, 0, 24, 0, "RenderTexture"], [62, 11, 0, 14, 1, "RenderTexture"], [64, 18, 0, 25, 1, "RenderTexture"], [65, 25, 0, 12, 1, "RenderTexture"], [66, 1, 0, 26, 0, "Camera Output"], [67, 26, 0, 10, 1, "RenderTexture"]],
        "groups": [],
        "config": {},
        "extra": {},
        "version": 0.4
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/graph.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './litegragh-css.ts', './npm.ts', './href-setting.ts', './graph-data.ts'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy, sys, css, HrefSetting, graphData;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      css = module.css;
    }, null, function (module) {
      HrefSetting = module.HrefSetting;
    }, function (module) {
      graphData = module.default;
    }],
    execute: function () {
      exports({
        loadGraph: loadGraph,
        saveGraph: saveGraph,
        showGraph: showGraph
      });

      cclegacy._RF.push({}, "fcc5eRAFqlIvLt3e/HnR0kq", "graph", undefined);

      var lGraph = exports('lGraph', globalThis.LGraph);
      var lGraphCanvas = exports('lGraphCanvas', globalThis.LGraphCanvas);
      var liteGraph = exports('liteGraph', globalThis.LiteGraph);

      if (!globalThis.__graph__) {
        globalThis.__graph__ = new lGraph();
      }

      var graph = exports('graph', globalThis.__graph__);
      var GraphShowType;

      (function (GraphShowType) {
        GraphShowType[GraphShowType["None"] = 0] = "None";
        GraphShowType[GraphShowType["InnerWindow"] = 1] = "InnerWindow";
        GraphShowType[GraphShowType["NewWindow"] = 2] = "NewWindow";
      })(GraphShowType || (GraphShowType = {}));

      function saveGraph() {}

      function loadGraph() {
        return _loadGraph.apply(this, arguments);
      }

      function _loadGraph() {
        _loadGraph = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                graph.clear();
                graph.configure(graphData);
                graph.start();

                if (HrefSetting.pauseGraphAfterLoad) {
                  setTimeout(function () {
                    graph.stop();
                  }, 2000);
                }

              case 4:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return _loadGraph.apply(this, arguments);
      }

      function showGraph(show, onclose) {
        if (show === void 0) {
          show = true;
        }

        if (!sys.isBrowser) {
          return;
        }

        var document = window.document;
        var isNewWindow = HrefSetting.graph === GraphShowType.NewWindow;

        if (isNewWindow && show) {
          if (!globalThis.__graph_window__ || !globalThis.__graph_window__.document) {
            {
              globalThis.__graph_window__ = window.open('', 'newwindow', 'width=960,height=640');
            }
            globalThis.__graph_window__.CanvasRenderingContext2D.prototype.roundRect = window.CanvasRenderingContext2D.prototype.roundRect;
          }

          document = globalThis.__graph_window__.document;
          document.body.style = "background: #181818;overflow:hidden;";
        }

        var body = document.body;

        if (show) {
          // graph.start();
          if (!globalThis.__graph_canvas__) {
            // load css
            {
              var style = document.createElement('style');
              style.innerHTML = css;
              body.appendChild(style);
            } // create dom canvas

            {
              var canvasElem = document.createElement('Canvas');
              canvasElem.style = "\n                    width:100%;\n                    height:100%;\n                    position:absolute;\n                ";

              if (!globalThis.__l_graph_canvas__) {
                globalThis.__l_graph_canvas__ = new lGraphCanvas(canvasElem, graph);
              } else {
                globalThis.__l_graph_canvas__.setCanvas(canvasElem);
              }

              globalThis.__graph_canvas__ = canvasElem;
            }
          }

          if (globalThis.__l_graph_canvas__) {
            globalThis.__l_graph_canvas__.setDirty(true, true);
          }

          var __graph_canvas__ = globalThis.__graph_canvas__;

          if (__graph_canvas__) {
            __graph_canvas__.width = body.offsetWidth;
            __graph_canvas__.height = body.offsetHeight;
            body.appendChild(__graph_canvas__);

            if (globalThis.__graph_window__) {
              globalThis.__graph_window__.onresize = function () {
                __graph_canvas__.width = body.offsetWidth;
                __graph_canvas__.height = body.offsetHeight;
              };

              globalThis.__graph_window__.onbeforeunload = function () {
                globalThis.__graph_window__ = null;
                globalThis.__graph_canvas__ = null;
                globalThis.__l_graph_canvas__ = null;

                if (onclose) {
                  onclose();
                }
              };
            }
          }
        } else {
          // graph.stop();
          if (isNewWindow) {
            if (globalThis.__graph_window__) {
              globalThis.__graph_window__.close();
            }
          } else {
            if (globalThis.__graph_canvas__) {
              body.removeChild(globalThis.__graph_canvas__);
            }
          }
        }
      }

      globalThis.showGraph = showGraph;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/graphics.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, utils;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      utils = module.utils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "65ffas2U79Oja3MQe49X56F", "graphics", undefined);

      var GGraphics = exports('GGraphics', function GGraphics() {});
      var GMesh = exports('GMesh', /*#__PURE__*/function () {
        function GMesh() {}
        /**
         * static Create
         */


        GMesh.Create = function Create() {
          var size = 1;
          var vers = [0, 0, 0, size, 0, 0, size, 0, size, 0, 0, size];
          var triangles = [0, 2, 1, 0, 3, 2];
          var uvs = [0, 0, size, 0, size, size, 0, size];
          var geometry = {
            positions: vers,
            indices: triangles,
            uvs: uvs
          };
          var mesh = utils.createMesh(geometry);
          return mesh;
        };

        return GMesh;
      }());
      var GImage = exports('GImage', function GImage() {});
      var MeshBase = exports('MeshBase', function MeshBase() {
        this.vers = [];
        this.triangles = [];
        this.uvs = [];
        this.colors = [];
        this.trianglesIndex = 0;
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/guide.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './save.ts', './singleton.ts', './res-cache.ts', './ui.ts', './msg.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Save, Singleton, ResCache, UI, Msg;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Save = module.Save;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      UI = module.UI;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e0abe+1xBVJh6+JbU4kWXkb", "guide", undefined);

      var Guide = exports('Guide', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(Guide, _Singleton);

        function Guide() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this._data = {};
          _this._cur_index = -1;
          _this._guide_name = '';
          _this._cur = null;
          _this._currentGameNodeName = '';
          _this._has_guide = false;
          return _this;
        }

        var _proto = Guide.prototype;

        _proto.init = function init() {
          var _this2 = this; // Test
          //Save.Instance._cur.guide_info = {};


          this._data = ResCache.Instance.getJson('data-guide').json;
          Msg.on('guide_story', function () {
            _this2.set_guide('guide_story');
          });
          Msg.on('guide_menu', function () {
            _this2.set_guide('guide_menu');
          });
          Msg.on('guide_build', function () {
            _this2.set_guide('guide_build');
          });
          Msg.on('guide_keyboard', function () {
            _this2.set_guide('guide_keyboard');
          });
          Msg.on('guide_gamepad', function () {
            _this2.set_guide('guide_gamepad');
          });
          Msg.on('guide_set', this.set_guide.bind(this));
          Msg.on('guide_next', this.next.bind(this));
          Msg.on('guide_force_set', this.guide_force_set.bind(this));
        };

        _proto.set_guide = function set_guide(name) {
          this._guide_name = name;
          if (Save.Instance._cur.guide_info === undefined) Save.Instance._cur.guide_info = {};

          if (Save.Instance._cur.guide_info[this._guide_name]) {
            console.log('has guide:', this._guide_name);
            return;
          }

          this._has_guide = true;
          this._cur = this._data[this._guide_name];
          this._cur_index = -1;
          this.next();
          UI.Instance.on('uiguide');
        };

        _proto.guide_force_set = function guide_force_set(name) {
          this._guide_name = name;
          this._has_guide = true;
          this._cur = this._data[this._guide_name];
          this._cur_index = -1;
          this.next();
          UI.Instance.on('uiguide');
        };

        _proto.next = function next() {
          this._cur_index++;

          if (this._cur_index >= this._cur.length - 1) {
            // Close guide ui.
            UI.Instance.off('uiguide');
            Save.Instance._cur.guide_info[this._guide_name] = true;
            this._has_guide = false;
            var guide_end_event = this._cur[this._cur_index];
            if (guide_end_event !== '') Msg.emit(guide_end_event);
            Msg.emit('msg_save_archive');
          } else {
            this._currentGameNodeName = this._cur[this._cur_index];
            Msg.emit('guide_refresh');
          }
        };

        return Guide;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gun-tracer-pool.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './res.ts', './msg.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Component, Res, Msg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Component = module.Component;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "b3707XGtb1OgI4JAKVGo7zf", "gun-tracer-pool", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GunTracerPool = exports('GunTracerPool', (_dec = ccclass('GunTracerPool'), _dec2 = property({
        type: CCFloat,
        tooltip: 'The depth of the object pool.'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GunTracerPool, _Component);

        function GunTracerPool() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "poolCount", _descriptor, _assertThisInitialized(_this));

          _this.pool = void 0;
          _this.index = 0;
          return _this;
        }

        var _proto = GunTracerPool.prototype;

        _proto.start = function start() {
          // Create an array of objects based on the object pool depth.
          this.pool = new Array(this.poolCount); // Get the base object of the object pool.

          var poolItem = this.node.children[0]; // Set the base object as the first element of the object pool.

          this.pool[0] = poolItem; // Starting from one, generate an object pool in a loop.

          for (var i = 1; i < this.poolCount; i++) {
            // Instantiates a new object from the base object. And map to the current object pool index object.
            this.pool[i] = Res.instNode(poolItem, this.node); // Initialize this newly generated object.

            this.pool[i].emit('init');
          } // Initialize the base object.


          poolItem.emit('init'); // Register an external access message executor

          Msg.on('msg_set_tracer', this.setTracer.bind(this));
        }
        /**
         * Set start and end positions
         * @param data set data.
         */
        ;

        _proto.setTracer = function setTracer(data) {
          // Get a ray from the object pool.
          this.pool[this.index].emit('setTracer', data.start, data.end); // The object pool index add one.

          this.index++; // If the index exceeds the maximum length, set the index to start from 0.

          if (this.index >= this.poolCount) this.index = 0;
        };

        return GunTracerPool;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "poolCount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/hack.ts", ['cc', './href-setting.ts'], function () {
  'use strict';

  var cclegacy, RenderTexture, clamp, game, Game, assetManager, instantiate, CCObject, director, ReflectionProbeManager, Director, profiler, HrefSetting;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      RenderTexture = module.RenderTexture;
      clamp = module.clamp;
      game = module.game;
      Game = module.Game;
      assetManager = module.assetManager;
      instantiate = module.instantiate;
      CCObject = module.CCObject;
      director = module.director;
      ReflectionProbeManager = module.ReflectionProbeManager;
      Director = module.Director;
      profiler = module.profiler;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7b0a1R33YJAKoJ+qxsdmzEu", "hack", undefined);

      RenderTexture.prototype.resize = function resize(width, height) {
        this._width = Math.floor(clamp(width, 1, 4096));
        this._height = Math.floor(clamp(height, 1, 4096));

        if (this._window) {
          this._window.resize(this._width, this._height);
        }

        this.emit('resize', this._window);
      };

      game.on(Game.EVENT_GAME_INITED, function () {
        if (!globalThis.__pipeline__) {
          assetManager.loadAny('223548d6-e1d4-462a-99e1-f4046b1d0647', function (err, pipPrefab) {
            if (err) {
              return console.error(err);
            }

            var p = instantiate(pipPrefab);
            p.name = 'pipeline-default-persist';
            p.hideFlags |= CCObject.Flags.DontSave; // | CCObject.Flags.HideInHierarchy;

            globalThis.__pipeline__ = p;
          });
        }
      });

      if (!director.__runSceneImmediate) {
        director.__runSceneImmediate = director.runSceneImmediate;
      }

      director.runSceneImmediate = function (scene, onBeforeLoadScene, onLaunched) {
        globalThis.__pipeline__.parent = null;

        director.__runSceneImmediate.call(this, scene, onBeforeLoadScene, onLaunched);

        if (!globalThis.pipelineAssets && globalThis.__pipeline__) {
          globalThis.__pipeline__.parent = director.getScene();
        }
      };

      {
        game.on(Game.EVENT_GAME_INITED, function () {
          var target, func;

          if (ReflectionProbeManager !== undefined) {
            target = ReflectionProbeManager.probeManager;
            func = ReflectionProbeManager.probeManager.onUpdateProbes;
          } else {
            var callbackInfos = director._callbackTable[Director.EVENT_BEFORE_UPDATE].callbackInfos;

            for (var i = 0; i < callbackInfos.length; i++) {
              target = callbackInfos[i].target;

              if (target && target.onUpdateProbes) {
                func = target.onUpdateProbes;
                break;
              }
            }
          }

          if (target && func) {
            director.off(Director.EVENT_BEFORE_UPDATE, func, target);
          }

          if (HrefSetting.showFps) {
            profiler.showStats();
          }
        });
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/halton.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Vec2, Vec3;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e4b6fSaGodA+5ssbWI7IwWl", "halton", undefined);

      var HaltonSeq = exports('HaltonSeq', /*#__PURE__*/function () {
        function HaltonSeq() {}

        HaltonSeq.Get = function Get(index, radix) {
          var key = index + "_" + radix;
          var result = this.cache.get(key);

          if (!result) {
            var fraction = 1 / radix;
            result = 0;

            while (index > 0) {
              result += index % radix * fraction;
              index /= radix;
              fraction /= radix;
            }

            this.cache.set(key, result);
          }

          return result;
        };

        return HaltonSeq;
      }());
      HaltonSeq.cache = new Map();
      var HaltonUtils = exports('HaltonUtils', /*#__PURE__*/function () {
        function HaltonUtils() {
          this.sampleIndex = 0;
          this._tempVec2 = new Vec2();
          this._tempVec3 = new Vec3();
        }

        var _proto = HaltonUtils.prototype;

        _proto.Generate2DRandomOffset = function Generate2DRandomOffset(sampleCount, index) {
          if (sampleCount === void 0) {
            sampleCount = 8;
          }

          if (index === undefined) {
            index = this.sampleIndex++;
          }

          index = index % sampleCount; // The variance between 0 and the actual halton sequence values reveals noticeable instability
          // in shadow maps, so we avoid index 0.

          this._tempVec2.set(HaltonSeq.Get((index & 1023) + 1, 2) - 0.5, HaltonSeq.Get((index & 1023) + 1, 3) - 0.5);

          return this._tempVec2;
        };

        _proto.Generate3DRandomOffset = function Generate3DRandomOffset(sampleCount, index) {
          if (sampleCount === void 0) {
            sampleCount = 8;
          }

          if (index === undefined) {
            index = this.sampleIndex++;
          }

          index = index % sampleCount; // The variance between 0 and the actual halton sequence values reveals noticeable instability
          // in shadow maps, so we avoid index 0.

          this._tempVec3.set(HaltonSeq.Get((index & 1023) + 1, 2) - 0.5, HaltonSeq.Get((index & 1023) + 1, 3) - 0.5, HaltonSeq.Get((index & 1023) + 1, 5) - 0.5);

          return this._tempVec3;
        };

        return HaltonUtils;
      }());
      HaltonUtils.instance = new HaltonUtils();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/height-fog.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './camera-setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec4, Color, clamp, Component, CameraSetting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec4 = module.Vec4;
      Color = module.Color;
      clamp = module.clamp;
      Component = module.Component;
    }, function (module) {
      CameraSetting = module.CameraSetting;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _dec2, _dec3, _dec4, _class4, _class5, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _class6;

      cclegacy._RF.push({}, "87538/f4rtLtJp8PNcBmYMH", "height-fog", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          type = _decorator.type,
          executeInEditMode = _decorator.executeInEditMode;

      var FExponentialHeightFogSceneData = function FExponentialHeightFogSceneData() {
        this.Height = 0;
        this.Density = 0;
        this.HeightFalloff = 0;
      };

      var FogData = [new FExponentialHeightFogSceneData(), new FExponentialHeightFogSceneData()];
      var FogColor = new Vec4();
      var NumFogs = 2;
      var CollapsedFogParameter = new Array(NumFogs).fill(0);

      var _tempFogInscatteringColor = new Color();

      var _empty = new Array(4).fill(0);

      var fogUBO = exports('fogUBO', {
        fog_Parameters: new Vec4(),
        fog_Parameters2: new Vec4(),
        fog_Parameters3: new Vec4(),
        fog_ColorParameters: new Vec4(),
        update: function update(material) {
          material.setProperty('fog_Parameters', this.fog_Parameters);
          material.setProperty('fog_Parameters2', this.fog_Parameters2);
          material.setProperty('fog_Parameters3', this.fog_Parameters3);
          material.setProperty('fog_ColorParameters', this.fog_ColorParameters);
        },
        reset: function reset() {
          this.fog_Parameters.w = 1000000;
        }
      });
      var SecondExponentialHeightFog = exports('SecondExponentialHeightFog', (_dec = ccclass('SecondExponentialHeightFog'), _dec(_class = (_class2 = function SecondExponentialHeightFog() {
        _initializerDefineProperty(this, "fogDensity", _descriptor, this);

        _initializerDefineProperty(this, "fogHeightFalloff", _descriptor2, this);

        _initializerDefineProperty(this, "fogHeightOffset", _descriptor3, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fogDensity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.02;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fogHeightFalloff", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fogHeightOffset", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.0;
        }
      })), _class2)) || _class));
      var ExponentialHeightFog = exports('ExponentialHeightFog', (_dec2 = ccclass('ExponentialHeightFog'), _dec3 = type(SecondExponentialHeightFog), _dec4 = type(SecondExponentialHeightFog), _dec2(_class4 = executeInEditMode(_class4 = (_class5 = (_class6 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ExponentialHeightFog, _Component);

        function ExponentialHeightFog() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._dirty = true;

          _initializerDefineProperty(_this, "_fogDensity", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_fogHeightFalloff", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_secondFogData", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_fogInscatteringColor", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_fogMaxOpacity", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_startDistance", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_fogCutoffDistance", _descriptor10, _assertThisInitialized(_this));

          _this.inscatteringColorCubemap = null;
          _this.inscatteringTextureTint = new Vec4();
          return _this;
        }

        var _proto = ExponentialHeightFog.prototype;

        _proto.onEnable = function onEnable() {
          this._dirty = true;
          ExponentialHeightFog.instance = this;
        };

        _proto.onDisable = function onDisable() {
          if (ExponentialHeightFog.instance === this) {
            ExponentialHeightFog.instance = undefined;
          }

          fogUBO.reset();
        };

        _proto.update = function update() {
          if (this._dirty) {
            this._dirty = false;
            this.updateUBO();
          }
        };

        _proto.updateFogData = function updateFogData() {
          var secondFogData = this.secondFogData;
          FogData[0].Height = this.node.worldPosition.z;
          FogData[1].Height = FogData[0].Height + secondFogData.fogHeightOffset; // Scale the densities back down to their real scale
          // Artists edit the densities scaled up so they aren't entering in minuscule floating point numbers

          FogData[0].Density = this.fogDensity / 10.0;
          FogData[0].HeightFalloff = this.fogHeightFalloff / 10.0;
          FogData[1].Density = secondFogData.fogDensity / 10.0;
          FogData[1].HeightFalloff = secondFogData.fogHeightFalloff / 10.0;
          FogColor = this.inscatteringColorCubemap ? this.inscatteringTextureTint : this.fogInscatteringColor;
        };

        _proto.updateUBO = function updateUBO() {
          this.updateFogData();
          var MaxObserverHeight = 10e5;
          var MaxObserverHeightDifference = 65536.0;

          for (var i = 0; i < NumFogs; i++) {
            // Only limit the observer height to fog if it has any density
            if (FogData[i].Density > 0.0) {
              MaxObserverHeight = Math.min(MaxObserverHeight, FogData[i].Height + MaxObserverHeightDifference);
            }
          }

          var ObserverHeight = 10;
          var camera = CameraSetting.mainCamera;

          if (camera) {
            ObserverHeight = Math.min(camera.node.worldPosition.y, MaxObserverHeight);
          }

          for (var _i = 0; _i < CollapsedFogParameter.length; _i++) {
            var CollapsedFogParameterPower = clamp(-FogData[_i].HeightFalloff * (ObserverHeight - FogData[_i].Height), -126. + 1., // min and max exponent values for IEEE floating points (http://en.wikipedia.org/wiki/IEEE_floating_point)
            +127. - 1.);
            CollapsedFogParameter[_i] = FogData[_i].Density * Math.pow(2.0, CollapsedFogParameterPower);
          }

          fogUBO.fog_Parameters.set(CollapsedFogParameter[0], FogData[0].HeightFalloff, MaxObserverHeight, this.startDistance);
          fogUBO.fog_Parameters2.set(CollapsedFogParameter[1], FogData[1].HeightFalloff, FogData[1].Density, FogData[1].Height);
          fogUBO.fog_Parameters3.set(FogData[0].Density, FogData[0].Height, this.inscatteringColorCubemap ? 1.0 : 0.0, this.fogCutoffDistance);
          fogUBO.fog_ColorParameters.set(FogColor.x, FogColor.y, FogColor.z, 1 - this.fogMaxOpacity);
        };

        _createClass(ExponentialHeightFog, [{
          key: "fogDensity",
          get: function get() {
            return this._fogDensity;
          },
          set: function set(v) {
            this._fogDensity = v;
            this._dirty = true;
          }
        }, {
          key: "fogHeightFalloff",
          get: function get() {
            return this._fogHeightFalloff;
          },
          set: function set(v) {
            this._fogHeightFalloff = v;
            this._dirty = true;
          }
          /** Settings for the second fog. Setting the density of this to 0 means it doesn't have any influence. */

        }, {
          key: "secondFogData",
          get: function get() {
            return this._secondFogData;
          },
          set: function set(v) {
            this._secondFogData = v;
            this._dirty = true;
          }
        }, {
          key: "fogInscatteringColor",
          get: function get() {
            return this._fogInscatteringColor;
          },
          set: function set(v) {
            this._fogInscatteringColor = v;
            this._dirty = true;
          }
        }, {
          key: "fogInscatteringColorSetter",
          get: function get() {
            _tempFogInscatteringColor.set(this._fogInscatteringColor.x * 255, this._fogInscatteringColor.y * 255, this._fogInscatteringColor.z * 255, this._fogInscatteringColor.w * 255);

            return _tempFogInscatteringColor;
          },
          set: function set(v) {
            this._fogInscatteringColor.set(v.x, v.y, v.z, v.w);

            this._dirty = true;
          }
          /** 
           * Maximum opacity of the fog.  
           * A value of 1 means the fog can become fully opaque at a distance and replace scene color completely,
           * A value of 0 means the fog color will not be factored in at all.
           */

        }, {
          key: "fogMaxOpacity",
          get: function get() {
            return this._fogMaxOpacity;
          },
          set: function set(v) {
            this._fogMaxOpacity = v;
            this._dirty = true;
          }
          /** Distance from the camera that the fog will start, in world units. */

        }, {
          key: "startDistance",
          get: function get() {
            return this._startDistance;
          },
          set: function set(v) {
            this._startDistance = v;
            this._dirty = true;
          }
          /** Scene elements past this distance will not have fog applied.  This is useful for excluding skyboxes which already have fog baked in. */

        }, {
          key: "fogCutoffDistance",
          get: function get() {
            return this._fogCutoffDistance;
          },
          set: function set(v) {
            this._fogCutoffDistance = v;
            this._dirty = true;
          }
        }]);

        return ExponentialHeightFog;
      }(Component), _class6.instance = undefined, _class6), (_descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "_fogDensity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.02;
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "fogDensity", [property], Object.getOwnPropertyDescriptor(_class5.prototype, "fogDensity"), _class5.prototype), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "_fogHeightFalloff", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "fogHeightFalloff", [property], Object.getOwnPropertyDescriptor(_class5.prototype, "fogHeightFalloff"), _class5.prototype), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "_secondFogData", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new SecondExponentialHeightFog();
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "secondFogData", [_dec4], Object.getOwnPropertyDescriptor(_class5.prototype, "secondFogData"), _class5.prototype), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "_fogInscatteringColor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec4();
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "fogInscatteringColor", [property], Object.getOwnPropertyDescriptor(_class5.prototype, "fogInscatteringColor"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "fogInscatteringColorSetter", [property], Object.getOwnPropertyDescriptor(_class5.prototype, "fogInscatteringColorSetter"), _class5.prototype), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "_fogMaxOpacity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.;
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "fogMaxOpacity", [property], Object.getOwnPropertyDescriptor(_class5.prototype, "fogMaxOpacity"), _class5.prototype), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "_startDistance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.;
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "startDistance", [property], Object.getOwnPropertyDescriptor(_class5.prototype, "startDistance"), _class5.prototype), _descriptor10 = _applyDecoratedDescriptor(_class5.prototype, "_fogCutoffDistance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.;
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "fogCutoffDistance", [property], Object.getOwnPropertyDescriptor(_class5.prototype, "fogCutoffDistance"), _class5.prototype)), _class5)) || _class4) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/href-setting.ts", ['cc', './env', './gpu.ts'], function (exports) {
  'use strict';

  var cclegacy, game, sys, JSB, gpuScore, gpuType, gpuVersion;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
      sys = module.sys;
    }, function (module) {
      JSB = module.JSB;
    }, function (module) {
      gpuScore = module.gpuScore;
      gpuType = module.gpuType;
      gpuVersion = module.gpuVersion;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a174axjYy5ORbTaQNNrjHse", "href-setting", undefined);

      var HrefSetting = exports('HrefSetting', {
        settings: 0,
        graph: 0,
        pauseGraphAfterLoad: 1,
        spector: 0,
        // rendering setting
        shadingScale: 1,
        zoomScreen: 0,
        bloom: 1,
        showFps: 1,
        fps: 30,
        transparent: 1,
        clusterLighting: 1,
        ibl: 1,
        shadow: 0,
        fsr: 1,
        taa: 1,
        fxaa: 1,
        maxEnemies: 4,
        sceneParticles: 1
      });
      globalThis.HrefSetting = HrefSetting;
      var changedMap = exports('changedMap', new Map());
      {
        var href = window && window.location && window.location.href;
        var settings = href.split('?')[1];

        if (settings) {
          var results = settings.match(/([a-zA-Z]+=[0-9\.]+)/g);
          results.forEach(function (res) {
            var test = res.split('=');
            var value = Number.parseFloat(test[1]);

            if (typeof value === 'number') {
              HrefSetting[test[0]] = value;
              changedMap.set(test[0], true);
            }
          });
        }
      }

      if (game.canvas) {
        var mobileSettings = [{
          score: 2000,
          shadingScale: Math.min(1240 / game.canvas.width, 1),
          bloom: 0,
          fxaa: 0
        }, {
          score: 1200,
          shadingScale: Math.min(1024 / game.canvas.width, 1)
        }, {
          score: 500,
          gpu: [['apple', 'a10']],
          fsr: 0,
          taa: 0,
          clusterLighting: 1,
          ibl: 0,
          maxEnemies: 2,
          sceneParticles: 0
        }];
        var gpuSettings = [];

        if (sys.isMobile) {
          gpuSettings = mobileSettings;
        }

        for (var i = 0; i < gpuSettings.length; i++) {
          var s = gpuSettings[i];
          var use = false;

          if (gpuScore < s.score) {
            use = true;
          }

          if (s.gpu) {
            for (var j = 0; j < s.gpu.length; j++) {
              var g = s.gpu[j];

              if (g[0] === gpuType && g[1] === gpuVersion) {
                use = true;
                console.log('Force use gpu setting : ' + g);
                break;
              }
            }
          }

          if (use) {
            for (var name in s) {
              if (name in HrefSetting) {
                HrefSetting[name] = s[name];
              }
            }
          }
        }

        if (sys.platform === sys.Platform.IOS || sys.platform === sys.Platform.MACOS) {
          HrefSetting.sceneParticles = 0;
        }

        console.log("canvas size " + game.canvas.width + ", " + game.canvas.height);
        console.log("rendering size " + game.canvas.width * HrefSetting.shadingScale + ", " + game.canvas.height * HrefSetting.shadingScale);
        game.frameRate = HrefSetting.fps;

        if (sys.isMobile && !JSB) {
          // todo: mobile particle rendering issue
          HrefSetting.transparent = 0;
        }

        console.log(HrefSetting);
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IActorInput.ts", ['cc'], function () {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4c668DK8NlM14ABpFbNM9A/", "IActorInput", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ik-bone.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './math-util.ts', './ik-point.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, Vec3, Quat, MathUtil, Point;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      Quat = module.Quat;
    }, function (module) {
      MathUtil = module.default;
    }, function (module) {
      Point = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "49588gI2E5DAKKyVsZe9hn8", "ik-bone", undefined);

      var _tempVec3 = new Vec3();

      var _tempVec3_2 = new Vec3();

      var _tempQuat = new Quat();

      var _tempQuat_2 = new Quat();

      var Bone = exports('default', /*#__PURE__*/function (_Point) {
        _inheritsLoose(Bone, _Point);

        function Bone(node, weight) {
          var _this;

          if (node === void 0) {
            node = null;
          }

          if (weight === void 0) {
            weight = null;
          }

          _this = _Point.call(this) || this;
          _this.length = 0;
          _this.sqrMag = 0;
          _this.axis = new Vec3(1, 0, 0);

          if (node) {
            _this.node = node;
          }

          if (weight) {
            _this.weight = weight;
          }

          return _this;
        }

        var _proto = Bone.prototype;

        _proto.swing = function swing(swingTarget, weight) {
          if (weight === void 0) {
            weight = 1.0;
          }

          if (weight <= 0.0) return;
          Vec3.subtract(_tempVec3, swingTarget, this.node.getWorldPosition());
          Vec3.transformQuat(_tempVec3_2, this.axis, this.node.getWorldRotation());
          MathUtil.fromToRotation(_tempQuat, _tempVec3_2, _tempVec3);

          if (weight >= 1.0) {
            var _this$node;

            Quat.multiply(_tempQuat, _tempQuat, this.node.getWorldRotation());
            (_this$node = this.node) == null ? void 0 : _this$node.setWorldRotation(_tempQuat);
            return;
          }

          MathUtil.quatLerp(_tempQuat, Quat.IDENTITY, _tempQuat, weight);
          Quat.multiply(_tempQuat, _tempQuat, this.node.getWorldRotation());
          this.node.setWorldRotation(_tempQuat);
        };

        Bone.solverSwing = function solverSwing(bones, index, swingTarget, weight) {
          if (weight === void 0) {
            weight = 1.0;
          }

          if (weight <= 0.0) return;
          Vec3.subtract(_tempVec3, swingTarget, bones[index].solverPosition);
          Vec3.transformQuat(_tempVec3_2, bones[index].axis, bones[index].solverRotation);
          MathUtil.fromToRotation(_tempQuat, _tempVec3_2, _tempVec3);

          if (weight >= 1.0) {
            for (var i = index; i < bones.length; i++) {
              Quat.multiply(bones[i].solverRotation, _tempQuat, bones[index].solverRotation);
            }

            return;
          }

          for (var _i = index; _i < bones.length; _i++) {
            MathUtil.quatLerp(_tempQuat_2, Quat.IDENTITY, _tempQuat, weight);
            Quat.multiply(bones[_i].solverRotation, _tempQuat_2, bones[index].solverRotation);
          }
        }
        /*
         * Moves the bone to the solver position
         * */
        ;

        _proto.setToSolverPosition = function setToSolverPosition() {
          var _this$node2;

          (_this$node2 = this.node) == null ? void 0 : _this$node2.setWorldPosition(this.solverPosition);
        };

        _createClass(Bone, [{
          key: "rotationLimit",
          get: function get() {
            return null;
          },
          set: function set(value) {
            return;
          }
        }]);

        return Bone;
      }(Point));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ik-point.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Vec3, Quat;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      Quat = module.Quat;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bf978Ydm4FC+7w6TwGOem05", "ik-point", undefined);

      var Point = exports('default', /*#__PURE__*/function () {
        function Point() {
          this.node = null;
          this.weight = 1.0;
          this.solverPosition = new Vec3();
          this.solverRotation = new Quat();
          this.defaultLocalPosition = new Vec3();
          this.defaultLocalRotation = new Quat();
        }

        var _proto = Point.prototype;

        _proto.storeDefaultLocalState = function storeDefaultLocalState() {
          var _this$node, _this$node2;

          (_this$node = this.node) == null ? void 0 : _this$node.getPosition(this.defaultLocalPosition);
          (_this$node2 = this.node) == null ? void 0 : _this$node2.getRotation(this.defaultLocalRotation);
        };

        _proto.fixTransform = function fixTransform() {
          var _this$node3, _this$node5;

          if (!((_this$node3 = this.node) != null && _this$node3.position.equals(this.defaultLocalPosition))) {
            var _this$node4;

            (_this$node4 = this.node) == null ? void 0 : _this$node4.setPosition(this.defaultLocalPosition);
          }

          if (!((_this$node5 = this.node) != null && _this$node5.rotation.equals(this.defaultLocalRotation))) {
            var _this$node6;

            (_this$node6 = this.node) == null ? void 0 : _this$node6.setRotation(this.defaultLocalRotation);
          }
        };

        _proto.updateSolverPosition = function updateSolverPosition() {
          var _this$node7;

          (_this$node7 = this.node) == null ? void 0 : _this$node7.getWorldPosition(this.solverPosition);
        };

        _proto.updateSolverState = function updateSolverState() {
          var _this$node8, _this$node9;

          (_this$node8 = this.node) == null ? void 0 : _this$node8.getWorldPosition(this.solverPosition);
          (_this$node9 = this.node) == null ? void 0 : _this$node9.getWorldRotation(this.solverRotation);
        };

        _proto.updateSolverLocalState = function updateSolverLocalState() {
          var _this$node10, _this$node11;

          (_this$node10 = this.node) == null ? void 0 : _this$node10.getPosition(this.solverPosition);
          (_this$node11 = this.node) == null ? void 0 : _this$node11.getRotation(this.solverRotation);
        };

        return Point;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ik-solver-aim.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './math-util.ts', './ik-solver-heuristic.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec3, Quat, Node, MathUtil, IKSolverHeuristic;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Node = module.Node;
    }, function (module) {
      MathUtil = module.default;
    }, function (module) {
      IKSolverHeuristic = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "b50c3ycqQRKUKFzVZHV0Nzn", "ik-solver-aim", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var _tempVec3 = new Vec3();

      var _tempVec3_2 = new Vec3();

      var _tempVec3_3 = new Vec3();

      var _tempQuat = new Quat();

      var _tempQuat_2 = new Quat();

      var IKSolverAim = exports('default', (_dec = ccclass('IKSolverAim'), _dec2 = property({
        type: Node,
        tooltip: 'The transform that we want to aim at ikPosition.'
      }), _dec3 = property({
        type: Node,
        tooltip: 'The transform that we want to aim at ikPosition.'
      }), _dec4 = property({
        tooltip: 'The local axis of the Transform that you want to be aimed at ikPosition.'
      }), _dec5 = property({
        tooltip: 'Keeps that axis of the Aim Transform directed at the polePosition.'
      }), _dec6 = property({
        tooltip: 'The position in world space to keep the pole axis of the Aim Transform directed at'
      }), _dec7 = property({
        tooltip: 'The weight of the Pole.'
      }), _dec8 = property({
        type: Node,
        tooltip: 'If assigned, will automatically set polePosition to the position of this Transform.'
      }), _dec9 = property({
        tooltip: 'Clamping rotation of the solver. 0 is free rotation, 1 is completely clamped to transform axis.'
      }), _dec10 = property({
        tooltip: 'Number of sine smoothing iterations applied to clamping to make it smoother'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_IKSolverHeuristic) {
        _inheritsLoose(IKSolverAim, _IKSolverHeuristic);

        function IKSolverAim() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _IKSolverHeuristic.call.apply(_IKSolverHeuristic, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "aimNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rootNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "axis", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "poleAxis", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "polePosition", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "poleWeight", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "poleTarget", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "clampWeight", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "clampSmoothing", _descriptor9, _assertThisInitialized(_this));

          _this.minBones = 1;
          _this._step = 0;
          _this._clampedIKPosition = new Vec3();
          _this._lastNode = null;
          _this._transformPoleAxis = new Vec3();
          _this._transformAxis = new Vec3();
          return _this;
        }

        var _proto = IKSolverAim.prototype;

        _proto.getAngle = function getAngle() {
          Vec3.subtract(_tempVec3_3, this.ikPosition, this.aimNode.getWorldPosition());
          return MathUtil.radiansToDegrees(Vec3.angle(this.transformAxis, _tempVec3_3));
        } // Gets the Axis of the AimTransform is world space.
        ;

        _proto.onInitiate = function onInitiate() {
          if (this.firstInitiation && this.aimNode != null) {
            Vec3.add(this.ikPosition, this.aimNode.getWorldPosition(), this.transformAxis.multiplyScalar(3));
            Vec3.add(this.polePosition, this.aimNode.getWorldPosition(), this.transformPoleAxis.multiplyScalar(3));
          }

          this._step = 1.0 / this.bones.length;
          this.axis.normalize();
        };

        _proto.onUpdate = function onUpdate() {
          if (this.axis.equals(Vec3.ZERO)) {
            return;
          }

          if (this.poleAxis.equals(Vec3.ZERO) && this.poleWeight > 0) {
            return;
          }

          if (this.target != null) this.target.getWorldPosition(this.ikPosition);
          if (this.poleTarget != null) this.poleTarget.getWorldPosition(this.polePosition);
          if (this.XY) this.ikPosition.z = this.bones[0].node.getWorldPosition().z; // Clamping weights

          if (this.ikPositionWeight <= 0) {
            return;
          }

          this.ikPositionWeight = MathUtil.clamp(this.ikPositionWeight, 0.0, 1.0); // Rotation Limit on the Aim Transform

          if (this.aimNode != this._lastNode) {
            this._lastNode = this.aimNode;
          } // In case transform becomes unassigned in runtime


          if (this.aimNode == null) {
            return;
          }

          this.clampWeight = MathUtil.clamp(this.clampWeight, 0.0, 1.0);
          this._clampedIKPosition = this._getClampedIKPosition();
          Vec3.subtract(_tempVec3, this._clampedIKPosition, this.aimNode.getWorldPosition());
          Vec3.multiplyScalar(_tempVec3_2, this.transformAxis, _tempVec3.length());
          MathUtil.sLerp(_tempVec3_2, _tempVec3_2, _tempVec3, this.ikPositionWeight);
          Vec3.add(this._clampedIKPosition, this.aimNode.getWorldPosition(), _tempVec3_2); // Iterating the solver

          for (var i = 0; i < this.maxIterations; i++) {
            // Optimizations
            if (i >= 1 && this.tolerance > 0 && this.getAngle() < this.tolerance) break;
            this.lastLocalDirection = Vec3.clone(this.localDirection);

            this._solve();
          }

          this.lastLocalDirection = Vec3.clone(this.localDirection);
        };

        _proto._solve = function _solve() {
          // Rotating bones to get closer to target.
          for (var i = 0; i < this.bones.length - 1; i++) this._rotateToTarget(this._clampedIKPosition, this.bones[i], this._step * (i + 1) * this.ikPositionWeight * this.bones[i].weight);

          this._rotateToTarget(this._clampedIKPosition, this.bones[this.bones.length - 1], this.ikPositionWeight * this.bones[this.bones.length - 1].weight);
        };

        _proto._getClampedIKPosition = function _getClampedIKPosition() {
          if (this.clampWeight <= 0.0) return Vec3.clone(this.ikPosition);

          if (this.clampWeight >= 1.0) {
            Vec3.subtract(_tempVec3, this.ikPosition, this.aimNode.getWorldPosition());
            Vec3.multiplyScalar(_tempVec3_2, this.transformAxis, _tempVec3.length());
            Vec3.add(_tempVec3_3, this.aimNode.getWorldPosition(), _tempVec3_2);
            return Vec3.clone(_tempVec3_3);
          } // Getting the dot product of IK direction and transformAxis


          Vec3.subtract(_tempVec3, this.ikPosition, this.aimNode.getWorldPosition());
          var angle = MathUtil.radiansToDegrees(Vec3.angle(this.transformAxis, _tempVec3));
          var dot = 1.0 - angle / 180.0; // Clamping the target

          var targetClampMlp = this.clampWeight > 0 ? MathUtil.clamp(1.0 - (this.clampWeight - dot) / (1.0 - dot), 0.0, 1.0) : 1.0; // Calculating the clamp multiplier

          var clampMlp = this.clampWeight > 0 ? MathUtil.clamp(dot / this.clampWeight, 0.0, 1.0) : 1.0;

          for (var i = 0; i < this.clampSmoothing; i++) {
            var sinF = clampMlp * Math.PI * 0.5;
            clampMlp = Math.sin(sinF);
          } // Slerping the IK direction (don't use Lerp here, it breaks it)


          Vec3.subtract(_tempVec3, this.ikPosition, this.aimNode.getWorldPosition());
          Vec3.multiplyScalar(_tempVec3_2, this.transformAxis, 10); // need slerp

          MathUtil.sLerp(_tempVec3_2, _tempVec3_2, _tempVec3, clampMlp * targetClampMlp);
          Vec3.add(_tempVec3_3, this.aimNode.getWorldPosition(), _tempVec3_2);
          return Vec3.clone(_tempVec3_3);
        }
        /*
         * Rotating bone to get transform aim closer to target
         * */
        ;

        _proto._rotateToTarget = function _rotateToTarget(targetPosition, bone, weight) {
          // Swing
          if (this.XY) {
            if (weight >= 0.0) {
              var _bone$node;

              var dir = this.transformAxis;
              Vec3.subtract(_tempVec3, targetPosition, this.aimNode.getWorldPosition());
              var angleDir = MathUtil.radiansToDegrees(Math.atan2(dir.x, dir.y));
              var angleTarget = MathUtil.radiansToDegrees(Math.atan2(_tempVec3.x, _tempVec3.y));
              var deltaAngle = MathUtil.deltaAngle(angleDir, angleTarget);
              MathUtil.axisAngle(_tempQuat, new Vec3(0, 0, -1), deltaAngle);
              Quat.multiply(_tempQuat, _tempQuat, bone.node.getWorldRotation());
              (_bone$node = bone.node) == null ? void 0 : _bone$node.setRotation(_tempQuat);
            }
          } else {
            if (weight >= 0.0) {
              Vec3.subtract(_tempVec3, targetPosition, this.aimNode.getWorldPosition()); //  MathUtil.fromToRotation(_tempQuat, this.transformAxis, _tempVec3);

              Quat.rotationTo(_tempQuat, this.transformAxis.normalize(), _tempVec3.normalize());

              if (weight >= 1.0) {
                Quat.multiply(_tempQuat, _tempQuat, bone.node.getWorldRotation());
                bone.node.setWorldRotation(_tempQuat);
              } else {
                MathUtil.quatLerp(_tempQuat, Quat.IDENTITY, _tempQuat, weight);
                Quat.multiply(_tempQuat, _tempQuat, bone.node.getWorldRotation());
                Quat.normalize(_tempQuat, _tempQuat);
                bone.node.setWorldRotation(_tempQuat);
              }
            } // Pole


            if (this.poleWeight > 0.0) ;
          }
        };

        _createClass(IKSolverAim, [{
          key: "transformAxis",
          get: function get() {
            Vec3.transformQuat(this._transformAxis, this.axis, this.aimNode.getWorldRotation());
            return Vec3.clone(this._transformAxis);
          } // Gets the Pole Axis of the AimTransform is world space.

        }, {
          key: "transformPoleAxis",
          get: function get() {
            return Vec3.transformQuat(this._transformPoleAxis, this.poleAxis, this.aimNode.getWorldRotation());
          }
        }]);

        return IKSolverAim;
      }(IKSolverHeuristic), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "aimNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rootNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "axis", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 0, 1);
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "poleAxis", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 1, 0);
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "polePosition", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3();
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "poleWeight", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "poleTarget", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "clampWeight", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "clampSmoothing", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ik-solver-heuristic.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './math-util.ts', './ik-bone.ts', './ik-solver.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec3, Quat, Node, MathUtil, Bone, IKSolver;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      Node = module.Node;
    }, function (module) {
      MathUtil = module.default;
    }, function (module) {
      Bone = module.default;
    }, function (module) {
      IKSolver = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "7ac3dMItT1CKKirWhbYCB7s", "ik-solver-heuristic", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var _tempVec3 = new Vec3();

      var _tempVec3_2 = new Vec3();

      var _tempQuat = new Quat();

      var _tempQuat_2 = new Quat();

      var IKSolverHeuristic = exports('default', (_dec = ccclass('IKSolverHeuristic'), _dec2 = property({
        type: Node,
        tooltip: 'Reference to the AimIK component.'
      }), _dec3 = property({
        tooltip: 'Minimum distance from last reached position. Will stop solving if difference from previous reached position is less than tolerance. If tolerance is zero, will iterate until maxIterations.'
      }), _dec4 = property({
        tooltip: 'Max iterations per frame.'
      }), _dec5 = property({
        tooltip: 'Solve in 2D?'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_IKSolver) {
        _inheritsLoose(IKSolverHeuristic, _IKSolver);

        function IKSolverHeuristic() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _IKSolver.call.apply(_IKSolver, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "target", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tolerance", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxIterations", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "XY", _descriptor4, _assertThisInitialized(_this));

          _this.bones = [];
          _this.lastLocalDirection = null;
          _this.chainLength = 0;
          _this._localDirection = new Vec3();
          return _this;
        }

        var _proto = IKSolverHeuristic.prototype; // initBones (){
        //     this.boneNodes.forEach((node, index)=>{
        //         this.bones.push(new IKBone(node, this.boneWeights[index]));
        //     })
        // }

        _proto.setChain = function setChain(hierarchy, root) {
          if (this.bones == null || this.bones.length != hierarchy.length) this.bones = new Array(hierarchy.length);

          for (var i = 0; i < hierarchy.length; i++) {
            if (this.bones[i] == null) this.bones[i] = new Bone();
            this.bones[i].node = hierarchy[i];
          }

          this.initiate(root);
          return this.initiated;
        };

        _proto.addBone = function addBone(bone) {
          var newBones = new Array(this.bones.length + 1);

          for (var i = 0; i < this.bones.length; i++) {
            newBones[i] = this.bones[i].node;
          }

          newBones[newBones.length - 1] = bone;
          this.setChain(newBones, this.root);
        };

        _proto.storeDefaultLocalState = function storeDefaultLocalState() {
          for (var i = 0; i < this.bones.length; i++) this.bones[i].storeDefaultLocalState();
        };

        _proto.fixTransforms = function fixTransforms() {
          if (!this.initiated) return;
          if (this.ikPositionWeight <= 0.0) return;

          for (var i = 0; i < this.bones.length; i++) this.bones[i].fixTransform();
        };

        _proto.getPoints = function getPoints() {
          return this.bones;
        };

        _proto.getPoint = function getPoint(node) {
          for (var i = 0; i < this.bones.length; i++) if (this.bones[i].node == node) return this.bones[i];

          return null;
        };

        _proto.initiateBones = function initiateBones() {
          this.chainLength = 0;

          for (var i = 0; i < this.bones.length; i++) {
            // Find out which local axis is directed at child/target position
            if (i < this.bones.length - 1) {
              Vec3.subtract(_tempVec3, this.bones[i].node.getWorldPosition(), this.bones[i + 1].node.getWorldPosition());
              this.bones[i].length = _tempVec3.length();
              this.chainLength += this.bones[i].length;
              this.bones[i + 1].node.getWorldPosition(_tempVec3_2);
              Vec3.subtract(_tempVec3_2, _tempVec3_2, this.bones[i].node.getWorldPosition());
              Quat.invert(_tempQuat, this.bones[i].node.getWorldRotation());
              Vec3.transformQuat(this.bones[i].axis, _tempVec3_2, _tempQuat);
            } else {
              Vec3.subtract(_tempVec3, this.bones[this.bones.length - 1].node.getWorldPosition(), this.bones[0].node.getWorldPosition());
              Quat.invert(_tempQuat, this.bones[i].node.getWorldRotation());
              Vec3.transformQuat(this.bones[i].axis, _tempVec3_2, _tempQuat);
            }
          }
        };

        _proto.getSingularityOffset = function getSingularityOffset() {
          if (!this._singularityDetected()) return Vec3.ZERO;
          Vec3.subtract(_tempVec3, this.ikPosition, this.bones[0].node.getWorldPosition());

          _tempVec3.normalize();

          var secondaryDirection = new Vec3(_tempVec3.y, _tempVec3.z, _tempVec3.x);
          Vec3.cross(_tempVec3, _tempVec3, secondaryDirection);
          return _tempVec3.multiplyScalar(this.bones[this.bones.length - 2].length * 0.5).clone();
        };

        _proto._singularityDetected = function _singularityDetected() {
          if (!this.initiated) return false;
          Vec3.subtract(_tempVec3, this.bones[this.bones.length - 1].node.getWorldPosition(), this.bones[0].node.getWorldPosition());
          Vec3.subtract(_tempVec3_2, this.ikPosition, this.bones[0].node.getWorldPosition());

          var toLastBoneDistance = _tempVec3.length();

          var toIKPositionDistance = _tempVec3_2.length();

          if (toLastBoneDistance < toIKPositionDistance) return false;
          if (toLastBoneDistance < this.chainLength - this.bones[this.bones.length - 2].length * 0.1) return false;
        };

        _createClass(IKSolverHeuristic, [{
          key: "localDirection",
          get: function get() {
            MathUtil.directionToNodeSpace(this._localDirection, this.bones[this.bones.length - 1].node.getWorldPosition().subtract(this.bones[0].node.getWorldPosition()), this.bones[0].node);
            return this._localDirection.clone();
          }
        }, {
          key: "positionOffset",
          get: function get() {
            return Vec3.lengthSqr(this.localDirection.subtract(this.lastLocalDirection));
          }
        }]);

        return IKSolverHeuristic;
      }(IKSolver), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tolerance", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "maxIterations", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 4;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "XY", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ik-solver.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator, Vec3;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "79994zz3nZCYrBBgcwo1alD", "ik-solver", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var IKSolver = exports('default', (_dec = ccclass('IKSolver'), _dec(_class = /*#__PURE__*/function () {
        var _proto = IKSolver.prototype; // @property({type:CCBoolean,tooltip: 'If true, will fix all the Transforms used by the solver to their initial state in each Update. This prevents potential problems with unanimated bones and animator culling with a small cost of performance. Not recommended for CCD and FABRIK solvers.'})

        _proto.onInitiate = function onInitiate() {};

        _proto.storeDefaultLocalState = function storeDefaultLocalState() {};

        _proto.onUpdate = function onUpdate() {};

        _proto.fixTransforms = function fixTransforms() {};

        function IKSolver(root) {
          this.isFixTransforms = true;
          this.initiated = false;
          this.root = null;
          this.firstInitiation = true;
          this.ikPosition = new Vec3();
          this.ikPositionWeight = 1.0;
          this.root = root;
        }

        _proto.initiate = function initiate(root) {
          this.root = root;
          this.initiated = false;
          this.onInitiate();
          this.storeDefaultLocalState();
          this.initiated = true;
          this.firstInitiation = false;
        };

        _proto.lateUpdate = function lateUpdate() {
          if (this.firstInitiation) this.initiate(this.root); // when the IK component has been disabled in Awake, this will initiate it.

          if (!this.initiated) return;
          this.onUpdate();
        };

        IKSolver.containsDuplicateBone = function containsDuplicateBone(bones) {
          for (var i = 0; i < bones.length; i++) {
            for (var i2 = 0; i2 < bones.length; i2++) {
              if (i != i2 && bones[i].node == bones[i2].node) return bones[i].node;
            }
          }

          return null;
        };

        _proto.update = function update() {
          this.isFixTransforms && this.fixTransforms();
        };

        return IKSolver;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/infrared-tracker.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './fx-ray-line.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Node, v3, geometry, PhysicsSystem, Component, Util, UtilVec3, FxRayLine;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Node = module.Node;
      v3 = module.v3;
      geometry = module.geometry;
      PhysicsSystem = module.PhysicsSystem;
      Component = module.Component;
    }, function (module) {
      Util = module.Util;
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      FxRayLine = module.FxRayLine;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "e6e9czpVDlKoKYfnj77c6nw", "infrared-tracker", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var InfraredTracker = exports('InfraredTracker', (_dec = ccclass('InfraredTracker'), _dec2 = property([CCFloat]), _dec3 = property(Node), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InfraredTracker, _Component);

        function InfraredTracker() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "masks", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "distance", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "forwardNode", _descriptor3, _assertThisInitialized(_this));

          _this.ray = void 0;
          _this.target = void 0;
          _this.mask = 0;
          _this.hit = void 0;
          _this.endPosition = v3(0, 0, 0);
          _this.rayLine = void 0;
          _this.forward = v3(0, 0, 0);
          _this.direction = v3(0, 0, 0);
          return _this;
        }

        var _proto = InfraredTracker.prototype;

        _proto.onEnable = function onEnable() {
          this.ray = new geometry.Ray();
          this.mask = Util.calculateMask(this.masks);
          this.rayLine = this.node.children[0].getComponent(FxRayLine);
        };

        _proto.update = function update(deltaTime) {
          var _this$rayLine;

          UtilVec3.copy(this.ray.o, this.node.worldPosition);
          UtilVec3.copy(this.direction, this.forwardNode.worldPosition);
          this.direction.subtract(this.node.worldPosition).normalize();
          UtilVec3.copy(this.ray.d, this.direction);
          this.hit = undefined;
          this.target = undefined;

          if (PhysicsSystem.instance.raycastClosest(this.ray, this.mask, this.distance)) {
            this.hit = PhysicsSystem.instance.raycastClosestResult;
          }

          if (this.hit !== undefined) {
            this.target = this.hit.collider.node;
            UtilVec3.copy(this.endPosition, this.hit.hitPoint);
          } else {
            UtilVec3.copy(this.endPosition, this.node.worldPosition); //console.log('InfraredTracker forward:', this.direction);

            UtilVec3.scaleDirection(this.endPosition, this.direction, this.distance);
          } // Update ray line.


          (_this$rayLine = this.rayLine) == null ? void 0 : _this$rayLine.setRayLine(this.node.worldPosition, this.endPosition);
        };

        return InfraredTracker;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "masks", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "distance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 300;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "forwardNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/init.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './game.ts', './res-cache.ts', './res-texture.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, director, Component, Game, ResCache, loadTextures;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      Game = module.Game;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      loadTextures = module.loadTextures;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "885d1c1vDFAQ6K2Z5YKUBpB", "init", undefined);

      var ccclass = _decorator.ccclass;
      var Init = exports('Init', (_dec = ccclass('Init'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Init, _Component);

        function Init() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Init.prototype;

        _proto.start = function start() {
          // Set the change node not to be destroyed.
          director.addPersistRootNode(this.node); // Load the resource cache data and execute the initialize game function.

          ResCache.Instance.load( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  console.time('loadTextures');
                  _context.next = 3;
                  return loadTextures();

                case 3:
                  console.timeEnd('loadTextures');
                  Game.Instance.init();

                case 5:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          })));
        };

        _proto.update = function update(deltaTime) {
          // Update the main game logic with every frame.
          Game.Instance.update(deltaTime);
        };

        return Init;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/input-base.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-input.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, ActorInput;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      ActorInput = module.ActorInput;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "10ebf5p0QNHLIIhxm8wLBu1", "input-base", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InputBase = exports('InputBase', (_dec = ccclass('InputBase'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InputBase, _Component);

        function InputBase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._actorInput = void 0;
          return _this;
        }

        var _proto = InputBase.prototype;

        _proto.onStart = function onStart() {};

        _proto.onEnd = function onEnd() {};

        _proto.onEnable = function onEnable() {
          var _this$node$parent;

          this._actorInput = (_this$node$parent = this.node.parent) == null ? void 0 : _this$node$parent.getComponent(ActorInput);

          if (this._actorInput === undefined || this._actorInput === null) {
            throw new Error("Not find Actor Input. node is : " + this.node.name);
          }
        };

        return InputBase;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/input-equip-select.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './util.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Input, game, v2, Component, Msg, UtilVec2;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Input = module.Input;
      game = module.game;
      v2 = module.v2;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      UtilVec2 = module.UtilVec2;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c944bVrbhJJYKLc8hW4dY45", "input-equip-select", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InputEquipSelect = exports('InputEquipSelect', (_dec = ccclass('InputEquipSelect'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InputEquipSelect, _Component);

        function InputEquipSelect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.center = v2(0, 0);
          _this.current = v2(0, 0);
          _this.time_wait = 0.3;
          return _this;
        }

        var _proto = InputEquipSelect.prototype;

        _proto.start = function start() {
          this.node.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this); //input.on(Input.EventType.KEY_UP, this.onKeyUp, this);

          this.node.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
        };

        _proto.onTouchMove = function onTouchMove(event) {
          this.center.x = game.canvas.width / 2;
          this.center.y = game.canvas.height / 2;
          UtilVec2.c(this.current, event.getLocation());
          this.current.subtract(this.center);
          Msg.emit('msg_select_equip', this.current.normalize());
        };

        _proto.onMouseMove = function onMouseMove(event) {
          this.center.x = game.canvas.width / 2;
          this.center.y = game.canvas.height / 2;
          UtilVec2.c(this.current, event.getLocation());
          this.current.subtract(this.center);
          Msg.emit('msg_select_equip', this.current.normalize());
        };

        return InputEquipSelect;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/input-gamepad.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './input-base.ts', './msg.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, input, Input, Vec3, v2, v3, UtilVec3, InputBase, Msg;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      input = module.input;
      Input = module.Input;
      Vec3 = module.Vec3;
      v2 = module.v2;
      v3 = module.v3;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      InputBase = module.InputBase;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fb3b2deZNZGCKdwamug0YI8", "input-gamepad", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var isGamePad = exports('isGamePad', false);
      var InputGamepad = exports('InputGamepad', (_dec = ccclass('InputGamepad'), _dec(_class = /*#__PURE__*/function (_InputBase) {
        _inheritsLoose(InputGamepad, _InputBase);

        function InputGamepad() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _InputBase.call.apply(_InputBase, [this].concat(args)) || this;
          _this.offset_euler = -45;
          _this.move_a = 50;
          _this.move_speed = 50;
          _this._v_increase_move = 0;
          _this._move = 0.1;
          _this._dir = v3(0, 0, 0);
          _this._move_v3 = v3(0, 0, 0);
          _this._key_count = 0;
          _this._curKeyJump = 0;
          _this._move_dir = v3(0, 0, 0);
          _this._isChangeEquips = false;
          _this._checkGamepadTime = 2;
          return _this;
        }

        var _proto = InputGamepad.prototype;

        _proto.start = function start() {
          input.on(Input.EventType.GAMEPAD_INPUT, this.onGamePad_Input, this);
          this.offset_euler *= Math.PI / 180;
        };

        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.GAMEPAD_INPUT, this.onGamePad_Input, this);
        };

        _proto.onGamePad_Input = function onGamePad_Input(event) {
          var _this$_actorInput, _this$_actorInput2, _this$_actorInput3, _this$_actorInput5, _this$_actorInput6, _this$_actorInput7, _this$_actorInput8;

          this._checkGamepadTime = 2;
          isGamePad = exports('isGamePad', true);
          var leftStickXAxis = event.gamepad.leftStick.xAxis.getValue();
          var leftStickYAxis = event.gamepad.leftStick.yAxis.getValue();
          this.onMove(leftStickXAxis, -leftStickYAxis);
          var rightStickXAxis = event.gamepad.rightStick.xAxis.getValue();
          var rightStickYAxis = event.gamepad.rightStick.yAxis.getValue();
          this.onRotation(rightStickXAxis * 5, rightStickYAxis * 5);
          var isFire = event.gamepad.buttonR1.getValue();
          if (isFire) (_this$_actorInput = this._actorInput) == null ? void 0 : _this$_actorInput.onFire();
          var isJump = event.gamepad.buttonR2.getValue();
          if (isJump) (_this$_actorInput2 = this._actorInput) == null ? void 0 : _this$_actorInput2.onJump();
          var isRun = event.gamepad.buttonL2.getValue();
          (_this$_actorInput3 = this._actorInput) == null ? void 0 : _this$_actorInput3.onRun(isRun === 1);
          var isChangeWeapon = event.gamepad.buttonL1.getValue();

          if (isChangeWeapon) {
            var _this$_actorInput4;

            this._isChangeEquips = (_this$_actorInput4 = this._actorInput) == null ? void 0 : _this$_actorInput4.onChangeEquips();
          }

          var isReload = event.gamepad.buttonEast.getValue();
          if (isReload) (_this$_actorInput5 = this._actorInput) == null ? void 0 : _this$_actorInput5.onReload();
          var isCrouch = event.gamepad.buttonWest.getValue();
          if (isCrouch) (_this$_actorInput6 = this._actorInput) == null ? void 0 : _this$_actorInput6.onCrouch(); //const isProne = event.gamepad.buttonNorth.getValue();
          //if(isProne) this._actorInput?.onProne();

          var isPick = event.gamepad.buttonSouth.getValue();
          if (isPick) (_this$_actorInput7 = this._actorInput) == null ? void 0 : _this$_actorInput7.onPick();
          var isPause = event.gamepad.buttonOptions.getValue();
          if (isPause) (_this$_actorInput8 = this._actorInput) == null ? void 0 : _this$_actorInput8.onPause();
        };

        _proto.onMove = function onMove(x, z) {
          this._dir.x = x;
          this._dir.z = z;
          this._dir.y = 0;
          this.onUpdateMove();
        };

        _proto.onUpdateMove = function onUpdateMove() {
          var _this$_actorInput9;

          UtilVec3.copy(this._move_v3, this._dir);
          Vec3.rotateY(this._move_v3, this._move_v3, Vec3.ZERO, this.offset_euler);
          if (this._move_v3.length() !== 0) UtilVec3.copy(this._move_dir, this._move_v3);
          (_this$_actorInput9 = this._actorInput) == null ? void 0 : _this$_actorInput9.onMove(this._move_v3);
        };

        _proto.onRotation = function onRotation(deltaX, deltaY) {
          var _this$_actorInput10;

          if (this._isChangeEquips) {
            console.log('select_equip', deltaX, deltaY);
            Msg.emit('msg_select_equip', v2(deltaX, deltaY));
            return;
          }

          (_this$_actorInput10 = this._actorInput) == null ? void 0 : _this$_actorInput10.onRotation(deltaX, -deltaY);
        };

        _proto.update = function update(deltaTime) {
          this._checkGamepadTime -= deltaTime;

          if (this._checkGamepadTime < 0) {
            isGamePad = exports('isGamePad', false);
          }
        };

        return InputGamepad;
      }(InputBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/input-handle.ts", ['cc', './msg.ts', './res.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, Msg, Res;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Res = module.Res;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e30c9OgNPRNCLLrcSW0pXy/", "input-handle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InputHandle = exports('InputHandle', /*#__PURE__*/function () {
        function InputHandle() {}

        InputHandle.Init = function Init() {
          var _this = this;

          Res.loadJson('data/input', function (err, asset) {
            if (asset) {
              _this._map = asset.json;
              console.log(_this._map);
            }
          });
        };

        InputHandle.create = function create(type) {};

        InputHandle["do"] = function _do(key, id, data) {
          var sendKey = id + this._map[key];

          if (sendKey) {
            Msg.emit(sendKey, data);
          } else {
            console.log('Not defined key' + key);
          }
        };

        return InputHandle;
      }());
      InputHandle._map = Object.create(null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/input-joystick.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './input-base.ts', './msg.ts', './actor-input.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v2, InputBase, Msg, ActorInput;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v2 = module.v2;
    }, function (module) {
      InputBase = module.InputBase;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      ActorInput = module.ActorInput;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "18624mKwZVJ0KxnPlwKvPlx", "input-joystick", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InputJoystick = exports('InputJoystick', (_dec = ccclass('InputJoystick'), _dec(_class = /*#__PURE__*/function (_InputBase) {
        _inheritsLoose(InputJoystick, _InputBase);

        function InputJoystick() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _InputBase.call.apply(_InputBase, [this].concat(args)) || this;
          _this._isRun = false;
          _this._isChangeEquips = false;
          return _this;
        }

        var _proto = InputJoystick.prototype;

        _proto.start = function start() {
          this.node.on('onAutoFireStart', this.onAutoFireStart, this);
          this.node.on('onAutoFireEnd', this.onAutoFireEnd, this);
        };

        _proto.onEnable = function onEnable() {
          this._actorInput = ActorInput.inst;
        };

        _proto.onDestroy = function onDestroy() {
          this.node.on('onAutoFireStart', this.onAutoFireStart, this);
          this.node.on('onAutoFireEnd', this.onAutoFireEnd, this);
        };

        _proto.onChangeEquips = function onChangeEquips() {
          //this._isChangeEquips = this._actorInput?.onChangeEquips();
          Msg.emit('push', 'select_equips');
        };

        _proto.onMove = function onMove(dir) {
          var _this$_actorInput;

          (_this$_actorInput = this._actorInput) == null ? void 0 : _this$_actorInput.onMove(dir);
        };

        _proto.onFire = function onFire() {
          var _this$_actorInput2;

          (_this$_actorInput2 = this._actorInput) == null ? void 0 : _this$_actorInput2.onFire();
        };

        _proto.onAutoFireStart = function onAutoFireStart() {
          var _this$_actorInput3;

          (_this$_actorInput3 = this._actorInput) == null ? void 0 : _this$_actorInput3.onAutoFire(true);
        };

        _proto.onAutoFireEnd = function onAutoFireEnd() {
          var _this$_actorInput4;

          (_this$_actorInput4 = this._actorInput) == null ? void 0 : _this$_actorInput4.onAutoFire(false);
        };

        _proto.onFireStart = function onFireStart() {};

        _proto.onFireEnd = function onFireEnd() {};

        _proto.onJump = function onJump() {
          var _this$_actorInput5;

          (_this$_actorInput5 = this._actorInput) == null ? void 0 : _this$_actorInput5.onJump();
        };

        _proto.onCrouch = function onCrouch() {
          var _this$_actorInput6;

          (_this$_actorInput6 = this._actorInput) == null ? void 0 : _this$_actorInput6.onCrouch();
        };

        _proto.onProne = function onProne() {//this._actorInput?.onProne();
        };

        _proto.onAim = function onAim() {
          var _this$_actorInput7;

          (_this$_actorInput7 = this._actorInput) == null ? void 0 : _this$_actorInput7.onAim(undefined);
        };

        _proto.onPick = function onPick() {
          var _this$_actorInput8;

          (_this$_actorInput8 = this._actorInput) == null ? void 0 : _this$_actorInput8.onPick();
        };

        _proto.onDrop = function onDrop() {
          var _this$_actorInput9;

          (_this$_actorInput9 = this._actorInput) == null ? void 0 : _this$_actorInput9.onDrop();
        };

        _proto.onReload = function onReload() {
          var _this$_actorInput10;

          (_this$_actorInput10 = this._actorInput) == null ? void 0 : _this$_actorInput10.onReload();
        };

        _proto.onRun = function onRun() {
          var _this$_actorInput11;

          this._isRun = !this._isRun;
          (_this$_actorInput11 = this._actorInput) == null ? void 0 : _this$_actorInput11.onRun(this._isRun);
        };

        _proto.onPause = function onPause() {
          //this._actorInput?.onPause();
          Msg.emit('push', 'level_pause');
        };

        _proto.onSetRun = function onSetRun(isRun) {
          var _this$_actorInput12;

          this._isRun = isRun;
          (_this$_actorInput12 = this._actorInput) == null ? void 0 : _this$_actorInput12.onRun(isRun);
        };

        _proto.onRotation = function onRotation(deltaX, deltaY) {
          var _this$_actorInput13;

          if (this._isChangeEquips) {
            Msg.emit('msg_select_equip', v2(deltaX, deltaY));
            return;
          }

          (_this$_actorInput13 = this._actorInput) == null ? void 0 : _this$_actorInput13.onRotation(deltaX / 5, -deltaY / 5);
        };

        return InputJoystick;
      }(InputBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/input-keyboard.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './input-base.ts', './fun.ts', './level.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, input, Input, game, KeyCode, v3, Msg, InputBase, fun, Level;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      input = module.input;
      Input = module.Input;
      game = module.game;
      KeyCode = module.KeyCode;
      v3 = module.v3;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      InputBase = module.InputBase;
    }, function (module) {
      fun = module.fun;
    }, function (module) {
      Level = module.Level;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c8c234sRQdFvKt/kPSa5Xg0", "input-keyboard", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InputKeyboard = exports('InputKeyboard', (_dec = ccclass('InputKeyboard'), _dec(_class = /*#__PURE__*/function (_InputBase) {
        _inheritsLoose(InputKeyboard, _InputBase);

        function InputKeyboard() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _InputBase.call.apply(_InputBase, [this].concat(args)) || this;
          _this.move_a = 50;
          _this.move_speed = 50;
          _this._dir = v3(0, 0, 0);
          _this.key_count = 0;
          _this._pressQ = false;
          _this.direction_up = 0;
          _this.direction_down = 0;
          _this.direction_left = 0;
          _this.direction_right = 0;
          _this._isPause = false;
          return _this;
        }

        var _proto = InputKeyboard.prototype;

        _proto.start = function start() {
          // Register keyboard events.
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.on(Input.EventType.KEY_UP, this.onKeyUp, this); // Register mouse events.

          input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);
          input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);
          input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
          document.addEventListener('pointerlockchange', this.onPointerChange, false);
        };

        _proto.onPointerChange = function onPointerChange() {
          if (document.pointerLockElement === game.canvas) ;else {
            fun.delay(function () {}, 2);
          }
        };

        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.off(Input.EventType.KEY_UP, this.onKeyUp, this);
          input.off(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);
          input.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
          document.removeEventListener('pointerlockchange', this.onPointerChange, false);
        };

        _proto.hasKey = function hasKey(event) {
          return event.keyCode === KeyCode.KEY_W || event.keyCode === KeyCode.KEY_S || event.keyCode === KeyCode.KEY_A || event.keyCode === KeyCode.KEY_D || event.keyCode === KeyCode.KEY_E || event.keyCode === KeyCode.KEY_G || event.keyCode === KeyCode.KEY_Q || event.keyCode === KeyCode.KEY_C || event.keyCode === KeyCode.KEY_N || event.keyCode === KeyCode.KEY_R || event.keyCode === KeyCode.SPACE || event.keyCode === KeyCode.ARROW_UP || event.keyCode === KeyCode.ARROW_LEFT || event.keyCode === KeyCode.ARROW_RIGHT || event.keyCode === KeyCode.ARROW_DOWN || event.keyCode === KeyCode.SHIFT_LEFT || event.keyCode === KeyCode.ESCAPE || event.keyCode === KeyCode.KEY_T;
        };

        _proto.onKeyDown = function onKeyDown(event) {
          var _this$_actorInput2, _this$_actorInput3, _this$_actorInput4, _this$_actorInput5, _this$_actorInput6, _this$_actorInput7, _this$_actorInput8;

          if (Level.Instance.stop) {
            this.clear();
            return;
          }

          if (!this.hasKey(event)) return;
          this.key_count++;
          if (event.keyCode === KeyCode.KEY_W || event.keyCode === KeyCode.ARROW_UP) this.direction_up = 1;
          if (event.keyCode === KeyCode.KEY_S || event.keyCode === KeyCode.ARROW_DOWN) this.direction_down = -1;
          if (event.keyCode === KeyCode.KEY_A || event.keyCode === KeyCode.ARROW_LEFT) this.direction_left = 1;
          if (event.keyCode === KeyCode.KEY_D || event.keyCode === KeyCode.ARROW_RIGHT) this.direction_right = -1;

          if (event.keyCode === KeyCode.KEY_Q) {
            var _this$_actorInput;

            (_this$_actorInput = this._actorInput) == null ? void 0 : _this$_actorInput.onChangeEquips();
            document.exitPointerLock();
          }

          if (event.keyCode === KeyCode.SPACE) (_this$_actorInput2 = this._actorInput) == null ? void 0 : _this$_actorInput2.onJump();
          if (event.keyCode === KeyCode.KEY_C) (_this$_actorInput3 = this._actorInput) == null ? void 0 : _this$_actorInput3.onCrouch();
          if (event.keyCode === KeyCode.KEY_N) (_this$_actorInput4 = this._actorInput) == null ? void 0 : _this$_actorInput4.onAim(undefined);
          if (event.keyCode === KeyCode.KEY_E) (_this$_actorInput5 = this._actorInput) == null ? void 0 : _this$_actorInput5.onPick();
          if (event.keyCode === KeyCode.KEY_G) (_this$_actorInput6 = this._actorInput) == null ? void 0 : _this$_actorInput6.onDrop();
          if (event.keyCode === KeyCode.KEY_R) (_this$_actorInput7 = this._actorInput) == null ? void 0 : _this$_actorInput7.onReload();
          if (event.keyCode === KeyCode.SHIFT_LEFT) (_this$_actorInput8 = this._actorInput) == null ? void 0 : _this$_actorInput8.onRun(true);
          if (event.keyCode === KeyCode.KEY_T) Msg.emit('msg_change_tps_camera_target', 2);
        };

        _proto.onKeyUp = function onKeyUp(event) {
          var _this$_actorInput9;

          if (Level.Instance.stop) {
            this.clear();
            return;
          }

          if (event.keyCode === 0 || this.key_count <= 0) {
            this._pressQ = false;
            this.clear();
            return;
          }

          if (!this.hasKey(event)) return;
          this.key_count--;
          if (event.keyCode === KeyCode.KEY_W || event.keyCode === KeyCode.ARROW_UP) this.direction_up = 0;
          if (event.keyCode === KeyCode.KEY_S || event.keyCode === KeyCode.ARROW_DOWN) this.direction_down = 0;
          if (event.keyCode === KeyCode.KEY_A || event.keyCode === KeyCode.ARROW_LEFT) this.direction_left = 0;
          if (event.keyCode === KeyCode.KEY_D || event.keyCode === KeyCode.ARROW_RIGHT) this.direction_right = 0;
          if (event.keyCode === KeyCode.SHIFT_LEFT) (_this$_actorInput9 = this._actorInput) == null ? void 0 : _this$_actorInput9.onRun(false);

          if (event.keyCode === KeyCode.ESCAPE) {
            var _this$_actorInput10;

            (_this$_actorInput10 = this._actorInput) == null ? void 0 : _this$_actorInput10.onPause();
          }
        };

        _proto.onMouseDown = function onMouseDown(event) {
          if (Level.Instance.stop) {
            this.clear();
            return;
          }

          if (event.getButton() === 0) {
            var _this$_actorInput11, _this$_actorInput12;

            (_this$_actorInput11 = this._actorInput) == null ? void 0 : _this$_actorInput11.onAutoFire(true);
            (_this$_actorInput12 = this._actorInput) == null ? void 0 : _this$_actorInput12.onFire();
          }
        };

        _proto.onMouseUp = function onMouseUp(event) {
          if (event.getButton() === 0) {
            var _this$_actorInput13;

            (_this$_actorInput13 = this._actorInput) == null ? void 0 : _this$_actorInput13.onAutoFire(false);
          }
        };

        _proto.onMouseMove = function onMouseMove(event) {
          var _this$_actorInput14;

          if (Level.Instance.stop) {
            this.clear();
            return;
          }

          var x = event.movementX;
          var y = event.movementY;
          var screenXRate = x / game.canvas.width;
          var screenYRate = y / game.canvas.height;
          var rotateX = 360 * screenXRate;
          var rotateY = 180 * screenYRate;
          (_this$_actorInput14 = this._actorInput) == null ? void 0 : _this$_actorInput14.onRotation(rotateX, rotateY); //event.movementX / 5, event.movementY / 10);
        };

        _proto.onMove = function onMove() {
          var _this$_actorInput15; //if (document.pointerLockElement === null && sys.isBrowser) return;


          this._dir.x = this.direction_left + this.direction_right;
          this._dir.z = this.direction_up + this.direction_down;
          this._dir.y = 0;
          (_this$_actorInput15 = this._actorInput) == null ? void 0 : _this$_actorInput15.onMove(this._dir.normalize());
        };

        _proto.clear = function clear() {
          this.direction_up = 0;
          this.direction_down = 0;
          this.direction_left = 0;
          this.direction_right = 0;
        };

        _proto.update = function update(deltaTime) {
          this.onMove();
        };

        return InputKeyboard;
      }(InputBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/input-mouse.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './input-base.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, geometry, v2, find, Camera, input, Input, director, PhysicsSystem, InputBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      v2 = module.v2;
      find = module.find;
      Camera = module.Camera;
      input = module.input;
      Input = module.Input;
      director = module.director;
      PhysicsSystem = module.PhysicsSystem;
    }, function (module) {
      InputBase = module.InputBase;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "9a0e8C1duBAC7rsIaBb8EZe", "input-mouse", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var InputMouse = exports('InputMouse', (_dec = ccclass('InputMouse'), _dec(_class = (_class2 = /*#__PURE__*/function (_InputBase) {
        _inheritsLoose(InputMouse, _InputBase);

        function InputMouse() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _InputBase.call.apply(_InputBase, [this].concat(args)) || this;
          _this._ray = new geometry.Ray();
          _this._screenPos = v2(0, 0);
          _this._camera = Object.create(null);

          _initializerDefineProperty(_this, "mask_group", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = InputMouse.prototype;

        _proto.start = function start() {
          var cameraCtr = find('camera_controller');

          if (cameraCtr) {
            this._camera = cameraCtr.children[0].children[0].getComponent(Camera);
          } else {
            console.warn('Can not find camera-controller.');
          }

          input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
          input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          input.on(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };

        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
          input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          input.off(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };

        _proto.onTouchStart = function onTouchStart(event) {//this._actorInput?.onStart(); 
        };

        _proto.onTouchMove = function onTouchMove(event) {
          var mask = 1 << this.mask_group;
          event.getLocation(this._screenPos);
          var shadingScale = director.root.pipeline.pipelineSceneData.shadingScale;

          this._camera.screenPointToRay(this._screenPos.x * shadingScale, this._screenPos.y * shadingScale, this._ray);

          if (PhysicsSystem.instance.raycastClosest(this._ray, mask, 100)) {
            var res = PhysicsSystem.instance.raycastClosestResult;
            var hit = res.hitPoint;
            hit.subtract(res.collider.node.worldPosition);
            hit.y = 0; //this._actorInput?.onMove(hit, undefined);
          }
        };

        _proto.onMouseMove = function onMouseMove(event) {
          var mask = 1 << this.mask_group;
          event.getLocation(this._screenPos);
          var shadingScale = director.root.pipeline.pipelineSceneData.shadingScale;

          this._camera.screenPointToRay(this._screenPos.x * shadingScale, this._screenPos.y * shadingScale, this._ray);

          if (PhysicsSystem.instance.raycastClosest(this._ray, mask, 100)) {
            var res = PhysicsSystem.instance.raycastClosestResult;
            var hit = res.hitPoint;
            hit.subtract(res.collider.node.worldPosition);
            hit.y = 0; //this._actorInput?.onMove(hit, undefined);
          }
        };

        _proto.onTouchEnd = function onTouchEnd(event) {//this._actorInput?.onEnd();
        };

        _proto.onTouchCancel = function onTouchCancel(event) {//this._actorInput?.onEnd();
        };

        return InputMouse;
      }(InputBase), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "mask_group", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/input-pointer-lock.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fun.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, input, Input, game, KeyCode, Component, fun;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      input = module.input;
      Input = module.Input;
      game = module.game;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }, function (module) {
      fun = module.fun;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cd5bdYQYg9MhL56D3JEXVzi", "input-pointer-lock", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var _pointerLock = exports('_pointerLock', false);

      var InputPointerLock = exports('InputPointerLock', (_dec = ccclass('InputPointerLock'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InputPointerLock, _Component);

        function InputPointerLock() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = InputPointerLock.prototype;

        _proto.start = function start() {
          document.addEventListener('pointerlockchange', this.onPointerChange, false);
          input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this); // Register keyboard events.

          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this); //Msg.on('msg_point')
        };

        _proto.onDestroy = function onDestroy() {
          document.removeEventListener('pointerlockchange', this.onPointerChange, false);
          input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);
        };

        _proto.onPointerChange = function onPointerChange() {
          if (document.pointerLockElement === game.canvas) {
            _pointerLock = exports('_pointerLock', true);
          } else {
            fun.delay(function () {
              _pointerLock = exports('_pointerLock', false);
            }, 2);
          }
        };

        _proto.onMouseDown = function onMouseDown(event) {
          if (!_pointerLock) {
            try {
              var _game$canvas;

              if ((_game$canvas = game.canvas) != null && _game$canvas.requestPointerLock) {
                var _game$canvas2;

                (_game$canvas2 = game.canvas) == null ? void 0 : _game$canvas2.requestPointerLock();
              }
            } catch (error) {
              console.warn(error);
            }

            return;
          }
        };

        _proto.onKeyDown = function onKeyDown(event) {
          if (event.keyCode === KeyCode.ESCAPE) {
            document.exitPointerLock();
          }
        };

        return InputPointerLock;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/instance-buffer.ts", ['cc', './base-stage.ts'], function (exports) {
  'use strict';

  var cclegacy, MeshRenderer, director, geometry, Vec3, BaseStage;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      MeshRenderer = module.MeshRenderer;
      director = module.director;
      geometry = module.geometry;
      Vec3 = module.Vec3;
    }, function (module) {
      BaseStage = module.BaseStage;
    }],
    execute: function () {
      exports('InstancedQueueType', void 0);

      cclegacy._RF.push({}, "d723fb3hoJGPJ2n+miCk4Qp", "instance-buffer", undefined);

      var InstancedQueueType;

      (function (InstancedQueueType) {
        InstancedQueueType[InstancedQueueType["MapGrass"] = 0] = "MapGrass";
        InstancedQueueType[InstancedQueueType["Terrain"] = 1] = "Terrain";
      })(InstancedQueueType || (InstancedQueueType = exports('InstancedQueueType', {})));

      var InstancedAreaItem = function InstancedAreaItem(x, y, z, halfExtent, id) {
        this.id = -1;
        this.bounding = new geometry.AABB();
        this.queue = void 0;
        var forwardStage = BaseStage.forwardStage;

        if (forwardStage) {
          this.queue = new forwardStage._instancedQueue.constructor();
        }

        this.bounding.center.set(x + halfExtent, y + halfExtent, z + halfExtent);
        this.bounding.halfExtents.set(halfExtent, halfExtent, halfExtent);
        this.id = id;
      };

      var InstancedArea = /*#__PURE__*/function () {
        function InstancedArea() {
          this.items = new Map();
          this.distanceToCulling = 25;
        }

        var _proto = InstancedArea.prototype;

        _proto.add = function add(node) {
          var ItemExtent = 5;
          var SizeEachRow = 10;
          var pos = node.worldPosition;
          var index = Math.floor(pos.x / ItemExtent) + Math.floor(pos.z / ItemExtent) * SizeEachRow + Math.floor(pos.y / ItemExtent) * SizeEachRow * SizeEachRow;
          var item = this.items.get(index);

          if (!item) {
            item = new InstancedAreaItem(Math.floor(pos.x / ItemExtent) * ItemExtent, Math.floor(pos.y / ItemExtent) * ItemExtent, Math.floor(pos.z / ItemExtent) * ItemExtent, ItemExtent / 2, index);
            this.items.set(index, item);
          }

          var q = item.queue;
          var mrs = node.getComponentsInChildren(MeshRenderer);
          mrs.forEach(function (mr) {
            if (!mr.node.active) {
              return;
            } // if (!mr.model) {
            //     (mr.node as any)._activeInHierarchy = true;
            //     (mr as any)._updateModels();
            // }


            var model = mr.model;
            mr.node.updateWorldTransform();
            model._localDataUpdated = true;
            model.updateUBOs(0);
            var passIdx = 0;

            for (var i = 0; i < model.subModels.length; i++) {
              var instancedBuffer = model.subModels[i].passes[passIdx].getInstancedBuffer(index);
              instancedBuffer.merge(model.subModels[i], model.instancedAttributes, passIdx);
              q.queue.add(instancedBuffer);
            }
          }); // let total = 0
          // this.items.forEach(i => {
          //     i.queue.queue.forEach(ib => {
          //         ib.instances.forEach(i => {
          //             total += i.count
          //         })
          //     })
          // })
        };

        _proto.clear = function clear() {
          this.items.forEach(function (i) {
            i.queue.clear();
          });
        };

        _proto.enable = function enable(enabled, camera) {
          var _this = this;

          var forwardStage = BaseStage.forwardStage;
          var enableDistanceCulling = director.getScene().name !== 'scene-logo';
          var frustum = camera && camera.frustum;
          this.items.forEach(function (i) {
            var q = i.queue;
            var index = forwardStage.additiveInstanceQueues.indexOf(q);

            if (enabled) {
              if (frustum && !geometry.intersect.aabbFrustum(i.bounding, frustum)) {
                return;
              }

              if (enableDistanceCulling) {
                var dist = Vec3.distance(camera.node.worldPosition, i.bounding.center);

                if (dist > _this.distanceToCulling) {
                  return;
                }
              }

              if (q && index == -1) {
                forwardStage.additiveInstanceQueues.push(q);
              }
            } else {
              if (index !== -1) {
                forwardStage.additiveInstanceQueues.splice(index, 1);
              }
            }
          });
        };

        return InstancedArea;
      }();

      var InstancedQueue = /*#__PURE__*/function () {
        function InstancedQueue() {
          this._queues = [];
        }

        var _proto2 = InstancedQueue.prototype;

        _proto2.clear = function clear(type) {
          var q = this._queues[type];

          if (q) {
            q.clear();
          }
        };

        _proto2.get = function get(type) {
          var q = this._queues[type];

          if (!q) {
            q = this._queues[type] = new InstancedArea();
          }

          return q;
        };

        _proto2.enable = function enable(type, enabled, camera) {
          var forwardStage = BaseStage.forwardStage;

          if (!forwardStage || !forwardStage.additiveInstanceQueues) {
            return;
          }

          var q = this._queues[type];

          if (q) {
            q.enable(enabled, camera);
          }
        };

        _proto2.enableAll = function enableAll(enabled, camera) {
          var forwardStage = BaseStage.forwardStage;

          if (!forwardStage || !forwardStage.additiveInstanceQueues) {
            return;
          }

          for (var i = 0; i < this._queues.length; i++) {
            var q = this._queues[i];

            if (q) {
              q.enable(enabled, camera);
            }
          }
        };

        _proto2.add = function add(type, node) {
          var q = this.get(type);

          if (q) {
            q.add(node);
          }
        };

        return InstancedQueue;
      }();

      var instancedQueue = exports('instancedQueue', new InstancedQueue());
      globalThis.instancedQueue = instancedQueue;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/io.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, sys, native;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      native = module.native;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e106frdmmZD3ZGChb73ZwRV", "io", undefined);

      var IO = exports('IO', /*#__PURE__*/function () {
        function IO() {}

        IO.getNum = function getNum(name) {
          var val = this.read(name);

          if (val.search('.') === -1) {
            var num = Number.parseInt(val);
          } else {
            var num = Number.parseFloat(val);
          }

          if (!num) {
            num = 0;
          }

          return num;
        };

        IO.write = function write(path, data) {
          try {
            if (sys.isNative) {
              native.fileUtils.writeStringToFile(data, path);
            } else {
              sys.localStorage.setItem(path, data);
            }
          } catch (error) {
            console.error('can not write:', error);
          }
        };

        IO.read = function read(path) {
          try {
            if (sys.isNative) {
              return native.fileUtils.getStringFromFile(path);
            } else {
              return sys.localStorage.getItem(path);
            }
          } catch (err) {
            console.error(err);
            return '';
          }
        };

        IO["delete"] = function _delete(name) {
          sys.localStorage.removeItem(name);
        };

        IO.exist = function exist(path) {
          var item = sys.localStorage.getItem(path);
          return item && item.length > 0;
        };

        return IO;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/joystick-auto-hidden.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Color, SpriteComponent, math, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      SpriteComponent = module.SpriteComponent;
      math = module.math;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "0b7ffMiqihGxIrMWmSyto/F", "joystick-auto-hidden", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JoystickAutoHidden = exports('JoystickAutoHidden', (_dec = ccclass('JoystickAutoHidden'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JoystickAutoHidden, _Component);

        function JoystickAutoHidden() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "smooth", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hidden_delay_time", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hidden_alpha", _descriptor3, _assertThisInitialized(_this));

          _this._color = new Color(0, 0, 0, 1);
          _this._isHidden = false;
          _this._sprite = void 0;
          _this._alpha = 255;
          _this._cur_alpha = 255;
          _this._delay = 0;
          return _this;
        }

        var _proto = JoystickAutoHidden.prototype;

        _proto.start = function start() {
          this._sprite = this.getComponent(SpriteComponent);
          this.node.on('autoHidden', this.autoHidden, this);
          this._delay = this.hidden_delay_time;
          this._cur_alpha = this.hidden_alpha;
          this._color.a = this._cur_alpha;
          this._sprite.color = this._color;
        };

        _proto.update = function update(deltaTime) {
          this._delay -= deltaTime;

          if (this._delay < 0) {
            this._cur_alpha = math.lerp(this._cur_alpha, this._alpha, deltaTime * this.smooth);
            this._color.a = this._cur_alpha;
            this._sprite.color = this._color;
          }
        };

        _proto.autoHidden = function autoHidden(isHidden) {
          this._isHidden = isHidden;
          this._alpha = this._isHidden ? this.hidden_alpha : 255;
          this._delay = this._isHidden ? this.hidden_delay_time : 0;
        };

        return JoystickAutoHidden;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "smooth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "hidden_delay_time", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "hidden_alpha", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 100;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/joystick-move.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './input-joystick.ts', './ui.ts', './util.ts', './fun.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, CCBoolean, Node, v3, Input, Vec3, Component, InputJoystick, UI, UtilVec3, fun;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      CCBoolean = module.CCBoolean;
      Node = module.Node;
      v3 = module.v3;
      Input = module.Input;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      InputJoystick = module.InputJoystick;
    }, function (module) {
      UI = module.UI;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      fun = module.fun;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "24d580ji/hED5jwcnONfUEr", "joystick-move", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JoystickMove = exports('JoystickMove', (_dec = ccclass('JoystickMove'), _dec2 = property(CCFloat), _dec3 = property(CCFloat), _dec4 = property(CCBoolean), _dec5 = property(CCFloat), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JoystickMove, _Component);

        function JoystickMove() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "radius", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smooth", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "autoHidden", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "runRadius", _descriptor4, _assertThisInitialized(_this));

          _this._pos = v3(0, 0, 0);
          _this._movePos = v3(0, 0, 0);
          _this._tempMove = v3(0, 0, 0);
          _this._moveNode = void 0;
          _this._bgNode = void 0;
          _this._input = void 0;
          _this.ui_camera = void 0;
          _this.screenVec3 = v3(0, 0, 0);
          _this.screenCenter = v3(0, 0, 0);
          _this.worldPosition = v3(0, 0, 0);
          _this.isStart = false;

          _initializerDefineProperty(_this, "nodeTestCenter", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = JoystickMove.prototype;

        _proto.start = function start() {
          var _this2 = this; //bind input joystick


          this._input = this.node.parent.getComponent(InputJoystick); //Get the joystick node.

          this._bgNode = this.node.children[0];
          this._moveNode = this._bgNode.children[0]; // Register for touch events.

          this.node.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          this.node.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.on(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this); //Get the ui camera.

          this.ui_camera = UI.Instance.camera;
          fun.delay(function () {
            // Init default position.
            UtilVec3.copy(_this2._pos, _this2.node.worldPosition);
          }, 1);
        }
        /**
         * Unregister when the node is destroyed.
         */
        ;

        _proto.onDestroy = function onDestroy() {
          this.node.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          this.node.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.off(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };

        _proto.onTouchStart = function onTouchStart(event) {
          var _this$ui_camera;

          this.isStart = true; // Get the center screen coordinates.

          (_this$ui_camera = this.ui_camera) == null ? void 0 : _this$ui_camera.worldToScreen(this.node.worldPosition, this.screenCenter);
          this.calculateMoveDirection(event);
          if (this.autoHidden) this.node.emit('autoHidden', false);
        }
        /**
         * On touch move event.
         * @param event 
         */
        ;

        _proto.onTouchMove = function onTouchMove(event) {
          this.calculateMoveDirection(event);
        }
        /**
         * On touch end event.
         * @param event 
         */
        ;

        _proto.onTouchEnd = function onTouchEnd(event) {
          this.cancelTouch(event);
        }
        /**
         * On touch cancel event.
         * @param event 
         */
        ;

        _proto.onTouchCancel = function onTouchCancel(event) {
          this.cancelTouch(event);
        }
        /**
         * Calculate the direction of movement of the character.
         * @param event 
         */
        ;

        _proto.calculateMoveDirection = function calculateMoveDirection(event) {
          var _this$ui_camera2, _this$_input, _this$_input2;

          this.isStart = false; // Get screen coordinates.

          this._pos.x = event.getLocationX();
          this._pos.y = event.getLocationY();
          this.screenVec3.x = this._pos.x;
          this.screenVec3.y = this._pos.y;
          (_this$ui_camera2 = this.ui_camera) == null ? void 0 : _this$ui_camera2.screenToWorld(this.screenVec3, this._pos); // Get the movement difference of the touch on the screen.

          this._pos.subtract(this.node.worldPosition); // Get move length.


          this._pos.z = 0;

          var len = this._pos.length(); // Override position beyond move radius.


          if (len > this.radius) {
            this._pos.normalize().multiplyScalar(this.radius);
          } // Judging the magnitude of remote sensing to determine whether to run.


          var isRun = len > this.runRadius;
          UtilVec3.copy(this._tempMove, this._pos); //Assign the Y direction of the screen to the Z direction of the movement.

          this._tempMove.z = this._tempMove.y;
          this._tempMove.y = 0; // Inverts the left and right direction of the telemetry.

          this._tempMove.x = -this._tempMove.x; // Set the character's running state.

          (_this$_input = this._input) == null ? void 0 : _this$_input.onSetRun(isRun); // Call the character input interface to perform the movement operation.

          (_this$_input2 = this._input) == null ? void 0 : _this$_input2.onMove(this._tempMove.normalize());

          this._pos.add(this.node.worldPosition);
        }
        /**
         * The touch event is canceled.
         */
        ;

        _proto.cancelTouch = function cancelTouch(event) {
          var _this$_input3; // Reset the touch point to the center.


          UtilVec3.copy(this._pos, this.node.worldPosition);
          (_this$_input3 = this._input) == null ? void 0 : _this$_input3.onMove(Vec3.ZERO);
          if (this.autoHidden) this.node.emit('autoHidden', true);
        }
        /**
         * Each frame smoothly updates the remote sensing position.
         * @param deltaTime 
         */
        ;

        _proto.update = function update(deltaTime) {
          Vec3.lerp(this._movePos, this._movePos, this._pos, deltaTime * this.smooth);

          this._moveNode.setWorldPosition(this._movePos.x, this._movePos.y, 0);
        };

        return JoystickMove;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "radius", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "smooth", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "autoHidden", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "runRadius", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 80;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodeTestCenter", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/joystick-pad-action.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './input-joystick.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Input, Component, InputJoystick;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Input = module.Input;
      Component = module.Component;
    }, function (module) {
      InputJoystick = module.InputJoystick;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "687899l+uVAiptGTPqXPzBE", "joystick-pad-action", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JoystickPadAction = exports('JoystickPadAction', (_dec = ccclass('JoystickPadAction'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JoystickPadAction, _Component);

        function JoystickPadAction() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._input = void 0;

          _initializerDefineProperty(_this, "actionNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "startMsg", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "endMsg", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = JoystickPadAction.prototype;

        _proto.start = function start() {
          this._input = this.node.parent.getComponent(InputJoystick);
          this.node.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.on(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.off(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };

        _proto.onTouchStart = function onTouchStart(event) {
          var _this$actionNode;

          (_this$actionNode = this.actionNode) == null ? void 0 : _this$actionNode.emit(this.startMsg);
        };

        _proto.onTouchEnd = function onTouchEnd(event) {
          var _this$actionNode2;

          (_this$actionNode2 = this.actionNode) == null ? void 0 : _this$actionNode2.emit(this.endMsg);
        };

        _proto.onTouchCancel = function onTouchCancel(event) {
          var _this$actionNode3;

          (_this$actionNode3 = this.actionNode) == null ? void 0 : _this$actionNode3.emit(this.endMsg);
        };

        return JoystickPadAction;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "actionNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "startMsg", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "endMsg", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/joystick-pad.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './input-joystick.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Input, Component, InputJoystick;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Input = module.Input;
      Component = module.Component;
    }, function (module) {
      InputJoystick = module.InputJoystick;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2bb7cW4fCdAULC7mgJUMf+s", "joystick-pad", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JoystickPad = exports('JoystickPad', (_dec = ccclass('JoystickPad'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JoystickPad, _Component);

        function JoystickPad() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._input = void 0;
          return _this;
        }

        var _proto = JoystickPad.prototype;

        _proto.start = function start() {
          this._input = this.node.parent.getComponent(InputJoystick);
          this.node.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.on(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off(Input.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.off(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          this.node.off(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };

        _proto.onTouchStart = function onTouchStart(event) {
          var _this$_input;

          (_this$_input = this._input) == null ? void 0 : _this$_input.onStart();
        };

        _proto.onTouchEnd = function onTouchEnd(event) {
          var _this$_input2;

          (_this$_input2 = this._input) == null ? void 0 : _this$_input2.onEnd();
        };

        _proto.onTouchCancel = function onTouchCancel(event) {
          var _this$_input3;

          (_this$_input3 = this._input) == null ? void 0 : _this$_input3.onEnd();
        };

        return JoystickPad;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/joystick.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, input, Input, KeyCode, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7bcedQquhRN4Kxy9y2GprTy", "joystick", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Joystick = exports('Joystick', (_dec = ccclass('Joystick'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Joystick, _Component);

        function Joystick() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Joystick.prototype;

        _proto.start = function start() {
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.on(Input.EventType.KEY_PRESSING, this.onKeyPRESSING, this);
          input.on(Input.EventType.KEY_UP, this.onKeyUp, this);
          input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
          input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          input.on(Input.EventType.TOUCH_CANCEL, this.onTouchCancel, this); // Mouse Event

          input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);
          input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
          input.on(Input.EventType.MOUSE_UP, this.onMouseUp, this);
          input.on(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
        };

        _proto.onKeyDown = function onKeyDown(event) {};

        _proto.onKeyPRESSING = function onKeyPRESSING(event) {
          if (event.keyCode === KeyCode.KEY_A) {
            console.log('press right.');
          }
        };

        _proto.onKeyUp = function onKeyUp(event) {};

        _proto.onTouchStart = function onTouchStart(event) {};

        _proto.onTouchMove = function onTouchMove(event) {};

        _proto.onTouchEnd = function onTouchEnd(event) {};

        _proto.onTouchCancel = function onTouchCancel(event) {};

        _proto.onMouseDown = function onMouseDown(event) {};

        _proto.onMouseUp = function onMouseUp(event) {};

        _proto.onMouseMove = function onMouseMove(event) {};

        _proto.onMouseWheel = function onMouseWheel(event) {};

        return Joystick;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/joytick-pad-rotation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './input-joystick.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Input, game, Component, InputJoystick;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Input = module.Input;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      InputJoystick = module.InputJoystick;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6e538WBquZPtId6BFLtJSuY", "joytick-pad-rotation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JoystickPadRotation = exports('JoystickPadRotation', (_dec = ccclass('JoystickPadRotation'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JoystickPadRotation, _Component);

        function JoystickPadRotation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._input = void 0;
          return _this;
        }

        var _proto = JoystickPadRotation.prototype;

        _proto.start = function start() {
          this._input = this.node.parent.getComponent(InputJoystick);
          this.node.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
        };

        _proto.onTouchMove = function onTouchMove(event) {
          var _this$_input;

          var x = event.getDeltaX();
          var y = event.getDeltaY();
          var screenXRate = x / game.canvas.width;
          var screenYRate = y / game.canvas.height;
          var rotateX = 1500 * screenXRate;
          var rotateY = 1500 * screenYRate;
          (_this$_input = this._input) == null ? void 0 : _this$_input.onRotation(rotateX, rotateY); //event.movementX / 5, event.movementY / 10);
        };

        return JoystickPadRotation;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/json-tool.ts", ['cc', './io.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, IO;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      IO = module.IO;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bfdd55zDUFPpaXKohsj6Zp5", "json-tool", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JsonTool = exports('JsonTool', /*#__PURE__*/function () {
        function JsonTool() {}

        JsonTool.toJson = function toJson(data) {
          return JSON.stringify(data);
        };

        JsonTool.toObject = function toObject(data) {
          return JSON.parse(data);
        };

        JsonTool.toIOObject = function toIOObject(path) {
          var str = IO.read(path + '.json');

          if (str) {
            return this.toObject(str);
          }
        };

        return JsonTool;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/jump-points.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4af39CWanhGFL/xf/7yKj0K", "jump-points", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JumpPoints = exports('JumpPoints', (_dec = ccclass('JumpPoints'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JumpPoints, _Component);

        function JumpPoints() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.label = void 0;
          _this.real_points = 0;
          _this.cur_points = 0;
          _this.speed = 0;
          _this.a = 1;
          _this.str = '';
          return _this;
        }

        var _proto = JumpPoints.prototype;

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          this.label = this.node.getComponent(Label);

          if (this.label === null) {
            throw new Error("Jump Points not get component Label.");
          }

          this.node.on('set_points', function (points, str) {
            if (str === void 0) {
              str = 's';
            }

            _this2.str = str;
            _this2.cur_points = 0;
            _this2.real_points = points;
            _this2.speed = 0;
            _this2.a = 1;
          });
        };

        _proto.update = function update(deltaTime) {
          if (this.cur_points < this.real_points) {
            this.speed += this.a;
            this.cur_points += deltaTime * this.speed;
            if (this.cur_points > this.real_points) this.cur_points = this.real_points;
            var show_num = Math.ceil(this.cur_points);
          }
        };

        return JumpPoints;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/level-enable-play.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './game.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, animation, Component, Game;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      animation = module.animation;
      Component = module.Component;
    }, function (module) {
      Game = module.Game;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "35054lAYt9Fs5f8M2SOWyBv", "level-enable-play", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LevelEnablePlay = exports('LevelEnablePlay', (_dec = ccclass('LevelEnablePlay'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LevelEnablePlay, _Component);

        function LevelEnablePlay() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = LevelEnablePlay.prototype;

        _proto.onEnable = function onEnable() {
          if (Game.Instance._currentGameNodeName !== 'level') {
            this.node.getComponent(animation.AnimationController).enabled = false;
          }
        };

        return LevelEnablePlay;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/level-events-card.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './data-core.ts', './local.ts', './level.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, randomRange, random, randomRangeInt, Component, Msg, DataLevelInst, DataUpgradeCardInst, Local, Level;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRange = module.randomRange;
      random = module.random;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      DataLevelInst = module.DataLevelInst;
      DataUpgradeCardInst = module.DataUpgradeCardInst;
    }, function (module) {
      Local = module.Local;
    }, function (module) {
      Level = module.Level;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c1692vIathJmq4qFvm5lNbJ", "level-events-card", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LevelEventsCard = exports('LevelEventsCard', (_dec = ccclass('LevelEventsCard'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LevelEventsCard, _Component);

        function LevelEventsCard() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._interval = 0.1;
          _this.probability = void 0;
          _this.counter = 0;
          _this.groupCounter = void 0;
          _this.currentCards = new Array(3);
          _this.nextCounter = 2;
          _this.counterCard = 0;
          return _this;
        }

        var _proto = LevelEventsCard.prototype;

        _proto.start = function start() {
          this.probability = DataLevelInst._data.probability_drop_card;
          this.groupCounter = new Array(DataLevelInst._data.cards.length);
          this._interval = randomRange(this.probability.interval[0], this.probability.interval[1]);
          this.nextCounter = DataUpgradeCardInst._data.next_show_card_param_a;
          Msg.on('msg_kill_enemy', this.checkNextEvent.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          Msg.off('msg_kill_enemy', this.checkNextEvent.bind(this));
        };

        _proto.nextEvent = function nextEvent() {
          this.counterCard++;
          this.nextCounter += DataUpgradeCardInst._data.next_show_card_param_a * DataUpgradeCardInst._data.next_show_card_param_b;
          var odds = random();
          var weights = this.probability.weights;
          var excludeGroupIndex = -1;

          for (var iWeight = 0; iWeight < weights.length; iWeight++) {
            if (odds <= weights[iWeight]) {
              excludeGroupIndex = iWeight;
              break;
            }
          }

          if (excludeGroupIndex === -1) {
            throw new Error("Error calculate weight level events card. value:" + odds);
          }

          var currentMax = this.groupCounter[excludeGroupIndex];
          var weightMax = this.probability.weights_max;

          if (currentMax >= weightMax[excludeGroupIndex]) {
            this._interval = this.probability.interval_weight_max;
            return;
          } // Exclude 3, This is temp.


          var excludeIndex = 3; //this.probability.weights_group[excludeGroupIndex];
          // Get upgrade card list.

          var cards = DataLevelInst._data.cards;

          for (var i = 0; i < cards.length; i++) {
            if (i === excludeIndex) continue;
            this.currentCards[i] = {
              name: cards[i],
              info: this.calculateCardInfo(cards[i])
            };
          }

          Level.Instance.currentCards = this.currentCards;
          console.log('Current cards:', this.currentCards);
          Msg.emit('push', 'upgrade_cards');
          this.counter++;
          this.groupCounter[excludeGroupIndex]++;
        };

        _proto.calculateCardInfo = function calculateCardInfo(name) {
          var upgradeCards = DataUpgradeCardInst._data;
          var selectCardData = upgradeCards[name];
          var randomCardIndex = randomRangeInt(0, selectCardData.length);
          var randomCardData = selectCardData[randomCardIndex];
          var valueCount = randomCardData.values.length;
          var values = new Array(valueCount);
          var describe = Local.Instance.get(randomCardData.describe);

          for (var i = 0; i < valueCount; i++) {
            var tempData = randomCardData.values[i];
            var tempValue = this.calculateRange(tempData.isFloat, tempData.range);
            var showValue = tempData.isFloat ? tempValue * 100 + " %" : "" + tempValue;
            describe = describe.replace("##" + i + "##", showValue);
            values[i] = {
              "name": tempData.name,
              "isFloat": tempData.isFloat,
              "value": tempValue
            };
          }

          return {
            describe: describe,
            values: values
          };
        };

        _proto.calculateRange = function calculateRange(isFloat, range) {
          if (range.length !== 2) return 0;
          var value = isFloat ? randomRange(range[0], range[1]) : randomRangeInt(range[0], range[1]);
          if (isFloat) value = Number(value.toFixed(2));
          return value;
        };

        _proto.checkNextEvent = function checkNextEvent(counter) {
          if (counter > this.nextCounter) {
            this.nextEvent();
          }
        };

        return LevelEventsCard;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/level-events-enemy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './level.ts', './data-core.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, randomRange, random, Component, Msg, Level, DataLevelInst;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRange = module.randomRange;
      random = module.random;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Level = module.Level;
    }, function (module) {
      DataLevelInst = module.DataLevelInst;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "272c7kqXmNH0IWBGDY3RmXm", "level-events-enemy", undefined);

      var ccclass = _decorator.ccclass;
      var LevelEventsEnemy = exports('LevelEventsEnemy', (_dec = ccclass('LevelEventsEnemy'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LevelEventsEnemy, _Component);

        function LevelEventsEnemy() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._interval = 0.1;
          _this.probability = void 0;
          _this.counter = 0;
          _this.groupCounter = void 0;
          _this.killCounter = 0;
          return _this;
        }

        var _proto = LevelEventsEnemy.prototype;

        _proto.start = function start() {
          // Get probability.
          this.probability = DataLevelInst._data.probability_drop_enemy;

          if (globalThis.HrefSetting) {
            this.probability.max = globalThis.HrefSetting.maxEnemies;
          } // Initialize group statistics based on the number of groups.


          this.groupCounter = new Array(DataLevelInst._data.enemies.length);

          for (var i = 0; i < DataLevelInst._data.enemies.length; i++) {
            this.groupCounter[i] = 0;
          } // Get the time of the next decision cycle.


          this._interval = randomRange(this.probability.interval[0], this.probability.interval[1]); // Register enemy event logic.

          Msg.on('msg_remove_enemy', this.remove.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          // Register enemy event logic.
          Msg.off('msg_remove_enemy', this.remove.bind(this));
        }
        /**
         * Calculates a monster generation event.
         * @returns 
         */
        ;

        _proto.generateEvent = function generateEvent() {
          // If the total number of enemies in the scene is greater than or equal to the maximum value No enemy generation logic is performed.
          // The total number of survivors is equal to the total number of generation minus the number of deaths.
          if (this.counter - this.killCounter >= this.probability.max) return; // Get a random value range [0-1].

          var odds = random(); // Get a list of weights.

          var weights = this.probability.weights; // Set default occur group index.

          var occurGroupIndex = -1; // Find the matching index in a random list based on a random number.

          for (var iWeight = 0; iWeight < weights.length; iWeight++) {
            if (odds <= weights[iWeight]) {
              occurGroupIndex = iWeight;
              break;
            }
          } // Determine if it is found, if not it means there is a problem with the data configuration.
          // The set of random intervals contains all interval values from 0 - 1.


          if (occurGroupIndex === -1) {
            throw new Error("Error calculate weight on Level events enemy. value:" + odds);
          } // Get the maximum value of the current group.


          var currentMax = this.groupCounter[occurGroupIndex]; // 

          var weightMax = this.probability.weights_max;

          if (currentMax >= weightMax[occurGroupIndex]) {
            this._interval = this.probability.interval_weight_max;
            return;
          }

          var currentIndex = this.probability.weights_group[occurGroupIndex];
          var res = DataLevelInst._data.enemies[currentIndex]; // Send add add enemy.

          Msg.emit('msg_add_enemy', {
            res: res,
            groupID: occurGroupIndex
          }); // Increase event count.

          this.counter++; // Increase the mapping event group count.

          this.groupCounter[occurGroupIndex]++; // Send warning message.

          if (res == 'boss_0') Msg.emit('level_action', 'warning');
        }
        /**
         * Removes enemies and updates the corresponding stats.
         * @param groupIndex Group ID to be removed.
         */
        ;

        _proto.remove = function remove(groupIndex) {
          // Increase the number of kills once
          this.killCounter++; // The number of current index groups minus one.

          this.groupCounter[groupIndex]--; // Exception judgment, if it is less than 0 it means there is a duplicate count of enemy death statistics.
          // You need to check the death-related logic to see if multiple deaths were executed.

          if (this.groupCounter[groupIndex] < 0) {
            throw new Error("Multiply remove enemy. group index = " + groupIndex);
          } // Triggers a death execution message.


          Msg.emit('msg_kill_enemy', this.killCounter);
        }
        /**
         * The detection logic is executed per frame.
         * @param deltaTime The incremental time of the current frame. 
         * @returns 
         */
        ;

        _proto.update = function update(deltaTime) {
          // 
          if (!Level.Instance._isStart && Level.Instance.stop && !Level.Instance._player) return;
          this._interval -= deltaTime; // Interval time less than 0 to start event detection.

          if (this._interval <= 0) {
            // Get the time of the next decision cycle.
            this._interval = randomRange(this.probability.interval[0], this.probability.interval[1]); // Execute generated events.

            this.generateEvent();
          }
        };

        return LevelEventsEnemy;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/level-events-items.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './level.ts', './data-core.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, randomRange, random, Component, Msg, Level, DataLevelInst;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRange = module.randomRange;
      random = module.random;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Level = module.Level;
    }, function (module) {
      DataLevelInst = module.DataLevelInst;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a92caNpNxdO6r7dE6J7gR+L", "level-events-items", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LevelEventsItems = exports('LevelEventsItems', (_dec = ccclass('LevelEventsItems'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LevelEventsItems, _Component);

        function LevelEventsItems() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._interval = 0.1;
          _this.probability = void 0;
          _this.counter = 0;
          _this.groupCounter = void 0;
          return _this;
        }

        var _proto = LevelEventsItems.prototype;

        _proto.start = function start() {
          // Get probability.
          this.probability = DataLevelInst._data.probability_drop_items;
          this.groupCounter = new Array(DataLevelInst._data.items.length);

          for (var i = 0; i < DataLevelInst._data.items.length; i++) {
            this.groupCounter[i] = 0;
          }

          this._interval = randomRange(this.probability.interval[0], this.probability.interval[1]);
          Msg.on('msg_remove_item', this.remove.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          Msg.off('msg_remove_item', this.remove.bind(this));
        };

        _proto.nextEvent = function nextEvent() {
          this._interval = randomRange(this.probability.interval[0], this.probability.interval[1]);
          if (this.counter >= this.probability.max) return;
          var odds = random();
          var weights = this.probability.weights;
          var occurGroupIndex = -1;

          for (var iWeight = 0; iWeight < weights.length; iWeight++) {
            if (odds <= weights[iWeight]) {
              occurGroupIndex = iWeight;
              break;
            }
          }

          if (occurGroupIndex === -1) {
            throw new Error("Error calculate weight on Level Infinite Events. value:" + odds);
          }

          var currentMax = this.groupCounter[occurGroupIndex];
          var weightMax = this.probability.weights_max;

          if (currentMax >= weightMax[occurGroupIndex]) {
            this._interval = this.probability.interval_weight_max;
            return;
          }

          var currentIndex = this.probability.weights_group[occurGroupIndex];
          var res = DataLevelInst._data.items[currentIndex];
          var sendData = {
            res: res,
            pos: undefined,
            groupIndex: currentIndex
          };
          Msg.emit('msg_add_item', sendData);
          this.counter++;
          this.groupCounter[occurGroupIndex]++;
        };

        _proto.remove = function remove(groupIndex) {
          this.counter--;
          this.groupCounter[groupIndex]--;

          if (this.groupCounter[groupIndex] < 0) {
            throw new Error("Mutiply remove enemy. group index = " + groupIndex);
          }
        };

        _proto.update = function update(deltaTime) {
          if (!Level.Instance._isStart && Level.Instance.stop && !Level.Instance._player) return;
          this._interval -= deltaTime;

          if (this._interval <= 0) {
            this.nextEvent();
          }
        };

        return LevelEventsItems;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/level-events.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './level.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, Level;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Level = module.Level;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1bf46/JS3pHI5a7RQxEO5cw", "level-events", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LevelEvents = exports('LevelEvents', (_dec = ccclass('LevelEvents'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LevelEvents, _Component);

        function LevelEvents() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._events = {};
          _this._time = 0;
          _this._index = 0;
          _this._max = 0;
          _this._cur = void 0;
          return _this;
        }

        var _proto = LevelEvents.prototype;

        _proto.start = function start() {};

        _proto.init = function init(events) {
          this._events = events;
          this._index = 0;
          this._max = this._events.length;
          this._cur = this._events[this._index];
        };

        _proto.updateEvent = function updateEvent(deltaTime) {
          if (this._index >= this._max) return;
          this._time += deltaTime;

          if (this._time > this._cur.time) {
            Level.Instance.addEnemy(this._cur.res);
            this._index++;
            if (this._index < this._max) this._cur = this._events[this._index];
          }
        };

        return LevelEvents;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/level.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './action.ts', './save.ts', './msg.ts', './singleton.ts', './res.ts', './res-cache.ts', './actor.ts', './drop-item.ts', './navigation-system.ts', './data-core.ts', './fun.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, find, v3, Action, Save, Msg, Singleton, Res, ResCache, Actor, DropItem, NavSystem, DataNavigationInst, DataEquipInst, fun;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      find = module.find;
      v3 = module.v3;
    }, function (module) {
      Action = module.Action;
    }, function (module) {
      Save = module.Save;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      Actor = module.Actor;
    }, function (module) {
      DropItem = module.DropItem;
    }, function (module) {
      NavSystem = module.NavSystem;
    }, function (module) {
      DataNavigationInst = module.DataNavigationInst;
      DataEquipInst = module.DataEquipInst;
    }, function (module) {
      fun = module.fun;
    }],
    execute: function () {
      cclegacy._RF.push({}, "de76f/v+B1EdKdfUqs0fB0z", "level", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Level = exports('Level', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(Level, _Singleton);

        function Level() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this._action = void 0;
          _this._data = {};
          _this._time = 0;
          _this._isStart = false;
          _this._spawn_pos = v3(0, 2, 0);
          _this._scoreRate = 0;
          _this._player = void 0;
          _this._enemies = [];
          _this._objectNode = void 0;
          _this.currentCards = new Array(3);
          _this.stop = false;
          return _this;
        }

        var _proto = Level.prototype;
        /**
         * Initialize the level object.
         */

        _proto.init = function init() {
          var _find; // Get the level data and copy it for storage.


          this._data = Object.assign(ResCache.Instance.getJson('data-level').json); // Create an action object to manage the action of the level.

          this._action = new Action('action-level'); // Find the root node of all objects.

          this._objectNode = (_find = find('init')) == null ? void 0 : _find.getChildByName('objects'); // Register external message access function mapping.

          Msg.on('msg_level_start', this.onLevelStart.bind(this));
          Msg.on('level_action', this.levelAction.bind(this));
          Msg.on('level_do', this["do"].bind(this));
          Msg.on('msg_add_enemy', this.addEnemy.bind(this));
          Msg.on('msg_add_item', this.addDrop.bind(this));
          Msg.on('msg_replay', this.onReplay.bind(this));
        }
        /**
         * Executes the function with the name specified by the current object.
         * @param fun Name of the function to be executed.
         */
        ;

        _proto["do"] = function _do(fun) {
          this[fun]();
        }
        /**
         * This function is used to set the behavior related to the start of the level.
         */
        ;

        _proto.onLevelStart = function onLevelStart() {
          // Set level stop is false.
          this.stop = false;
          this._isStart = true; // Switch to the next statistic.

          Save.Instance.nextStatistics(); // Initialize the current path finding data.

          NavSystem.Init(DataNavigationInst._data);
          this.levelAction('start');
        };

        _proto.pause = function pause() {
          this.stop = true;
        };

        _proto.resume = function resume() {
          this.stop = false;
        }
        /**
         * This method is used to restart the game.
         */
        ;

        _proto.onReplay = function onReplay() {
          fun.delay(function () {
            Msg.emit('push', 'level');
          }, 2);
        };

        _proto.levelAction = function levelAction(name) {
          this._action.on(name);
        }
        /**
         * Added level role method.
         * Used to initialize the character game object.
         */
        ;

        _proto.addPlayer = function addPlayer() {
          // Get a random node from the navigation system.
          //const point = NavSystem.randomPoint();
          // Get the player's prefab object from the resource cache.
          var prefab = ResCache.Instance.getPrefab(this._data.prefab_player); // Instantiate player level game object.

          var resPlayer = Res.inst(prefab, this._objectNode, this._data.spawn_pos); // Get the Actor from the player level game object.

          this._player = resPlayer.getComponent(Actor); // Detect if this actor exists

          if (this._player === null) {
            throw new Error("Level add player can not bind Actor Component.");
          }

          this._player.bulletBox = 5; // Set the player tag value of this actor to true.

          this._player.isPlayer = true; // Initialize the player object.

          this._player.init('data-player'); // Update player hp.


          this._player.updateHP();
        }
        /**
         * Add level enemy method.
         * @param res Add enemy resource name.
         * @param groupID Enemy group id.
         * @returns Enemy game object.
         */
        ;

        _proto.addEnemy = function addEnemy(data) {
          // Get a random node from the navigation system.
          var point = NavSystem.randomPoint(); // Get the enemy's prefab object from the resource cache.

          var prefab = ResCache.Instance.getPrefab(data.res); // Instantiate enemy level game object.

          var enemy = Res.inst(prefab, this._objectNode, point.position);
          enemy.name = data.res;
          var actor = enemy.getComponent(Actor);

          if (!actor) {
            console.error('error inst enemy lose actor component. the name is :', data.res);
            return;
          }

          actor._groupIndex = data.groupID;
          actor.init("data-" + data.res);
          actor.bulletBox = 9999;
          actor.isReady = true;

          this._enemies.push(enemy);

          return enemy;
        };

        _proto.removeEnemy = function removeEnemy(node) {
          for (var i = 0; i < this._enemies.length; i++) {
            if (this._enemies[i] === node) {
              this._enemies.splice(i, 1);

              break;
            }
          }
        };

        _proto.addDrop = function addDrop(_data) {
          if (_data.pos === undefined) {
            var point = NavSystem.randomPoint();
            _data.pos = point.position;
          }

          var prefab = ResCache.Instance.getPrefab(this._data.prefab_drop_item);
          var dropNode = Res.inst(prefab, this._objectNode, _data.pos);
          dropNode.name = _data.res;
          var drop = dropNode.getComponent(DropItem);
          var data = DataEquipInst.get(_data.res);

          if (drop === null) {
            throw new Error("Drop node can not add component Drop Item.");
          }

          drop.init(_data.res, data.drop_effect_index, _data.groupIndex);
        };

        _proto.addObj = function addObj(res) {
          var point = NavSystem.randomPoint();
          var prefab = ResCache.Instance.getPrefab(res);
          var objNode = Res.inst(prefab, this._objectNode, point.position);
          return objNode;
        };

        _proto.update = function update(deltaTime) {
          if (!this._isStart) return;
          if (this.stop) return;
          this._time += deltaTime;

          this._action.update(deltaTime);

          Msg.emit('msg_update_map');
        }
        /**
         * Select a skill card to update player attributes.
         * @param selectIndex Select upgrade card index.
         */
        ;

        _proto.upgradePlayerAttributes = function upgradePlayerAttributes(selectIndex) {
          // Get upgrade values.
          var upgradeValues = this.currentCards[selectIndex].info.values; // Upgrade player data.

          var length = upgradeValues.length; //Update all attributes of the card.

          for (var i = 0; i < length; i++) {
            console.log(upgradeValues[i]);
            var data = upgradeValues[i];
            this._player._data[data.name] = data.value;
          }
        };

        _proto.getUpgradeCardInfo = function getUpgradeCardInfo(selectIndex) {
          return this.currentCards[selectIndex].info.describe;
        };

        _proto.gameOver = function gameOver() {
          // Set level stop is true.
          this.stop = true;
          this._isStart = false;
          Msg.emit('msg_stat_time', {
            key: 'play',
            time: this._time
          });
          this.calculateScore();
          this._enemies = [];
          Save.Instance.saveGameOver(this._time, this._scoreRate);
          this._player = undefined;
        }
        /**
         * Calculate level score.
         */
        ;

        _proto.calculateScore = function calculateScore() {
          // Save day.
          var day = Save.Instance.get('day');
          if (day === undefined) day = 0;else day++;
          Save.Instance.setValue('day', day); // Get killed number.

          var killedTimes = Save.Instance.getStatistics('killedTime'); // Calculate hit rate.

          var hitBodyTimes = Save.Instance.getStatistics('hit_bodyTimes');
          var hitHeadTimes = Save.Instance.getStatistics('hit_headTimes');
          var fireTimes = Save.Instance.getStatistics('fireTimes');
          var hitRate = fireTimes == 0 ? 0 : (hitBodyTimes + hitHeadTimes) / fireTimes;
          Save.Instance.setStatistics('hit_rate', Number(hitRate.toFixed(4))); // Calculate be hit times.

          var beHitBodyTimes = Save.Instance.getStatistics('be_hit_bodyTimes');
          var beHitHeadTimes = Save.Instance.getStatistics('be_hit_headTimes');
          var beHitTimes = beHitBodyTimes + beHitHeadTimes;
          Save.Instance.setStatistics('be_hit_times', beHitTimes); // Calculate dodge rate.

          var enemyFireTimes = Math.max(beHitTimes, Save.Instance.getStatistics('enemy_fireTimes'));
          var dodgeRate = enemyFireTimes == 0 ? 0 : 1 - beHitTimes / enemyFireTimes;
          Save.Instance.setStatistics('dodge_rate', Number(dodgeRate.toFixed(4))); // Calculate level score.
          // level score = killed * killed_to_score + hitRate * eachRateValue + dodgeRate * eachRateValue + survivalTime * survival_time_to_score

          var eachRateValue = this._data.each_rate_value;
          var level_score = Math.floor(killedTimes * this._data.killed_to_score + hitRate * eachRateValue + dodgeRate * eachRateValue + this._time * this._data.survival_time_to_score);
          Save.Instance.setStatistics('level_score', level_score); // Calculate final score rate.

          var scoreLevels = this._data.score_level;
          var passLevel = true;
          this._scoreRate = scoreLevels.length - 1;

          for (var i = 0; i < scoreLevels.length; i++) {
            var infos = scoreLevels[i];
            passLevel = true;

            for (var k in infos) {
              if (k == 'score') continue;

              if (Save.Instance._currentStatistics[k] < infos[k]) {
                passLevel = false;
                break;
              }
            }

            if (passLevel) {
              this._scoreRate = i;
              break;
            }
          } // Save score rate.


          Save.Instance.setStatistics('score_rate', this._scoreRate);
        }
        /**
         * Get final score rating
         * @returns 
         */
        ;

        _proto.getLevelScore = function getLevelScore() {
          return this._data.score_level[this._scoreRate].score;
        };

        return Level;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/light-cluster.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './editor.ts', './world-cluster.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, geometry, Vec3, renderer, director, MobilityMode, WorldCluster;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      Vec3 = module.Vec3;
      renderer = module.renderer;
      director = module.director;
      MobilityMode = module.MobilityMode;
    }, null, function (module) {
      WorldCluster = module.WorldCluster;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "0dd3dIXZQFKXKU5yq3EIf4S", "light-cluster", undefined);

      var ccclass = _decorator.ccclass,
          executeInEditMode = _decorator.executeInEditMode,
          property = _decorator.property;

      var _sphere = new geometry.Sphere();

      var tempVec3 = new Vec3();
      var LightWorldCluster = exports('LightWorldCluster', (_dec = ccclass('LightWorldCluster'), _dec(_class = executeInEditMode(_class = (_class2 = (_class3 = /*#__PURE__*/function (_WorldCluster) {
        _inheritsLoose(LightWorldCluster, _WorldCluster);

        function LightWorldCluster() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _WorldCluster.call.apply(_WorldCluster, [this].concat(args)) || this;
          _this.pixelsPerObjectFloat = 4;
          _this.lights = [];
          _this.dirty = true;

          _initializerDefineProperty(_this, "forceUpdate", _descriptor, _assertThisInitialized(_this));

          _this._dirtyTimeout = void 0;
          return _this;
        }

        var _proto = LightWorldCluster.prototype;

        _proto.onEnable = function onEnable() {
          globalThis.LightWorldCluster.instance = this;
        };

        _proto.onDisable = function onDisable() {
          if (globalThis.LightWorldCluster.instance === this) {
            globalThis.LightWorldCluster.instance = undefined;
          }
        } // 0: pos.x, pos.y, pos.z, isSpotLight
        // 1: rgb: color, w: intensity
        // 2: x: size, y: range, z: spotAngle
        // 3: xyz: dir
        ;

        _proto.addObjectData = function addObjectData(light, index) {
          var dataInfoFloat = this.dataInfoFloat;
          var dataInfoFloatIndex = index * this.dataInfoTextureFloat.width * 4;
          var isSpotLight = light instanceof renderer.scene.SpotLight; // 0

          var pos = light.node.worldPosition;
          dataInfoFloat[dataInfoFloatIndex++] = pos.x;
          dataInfoFloat[dataInfoFloatIndex++] = pos.y;
          dataInfoFloat[dataInfoFloatIndex++] = pos.z;
          dataInfoFloat[dataInfoFloatIndex++] = isSpotLight ? 1 : 0; // 1

          var color = light.color;
          dataInfoFloat[dataInfoFloatIndex++] = color.x;
          dataInfoFloat[dataInfoFloatIndex++] = color.y;
          dataInfoFloat[dataInfoFloatIndex++] = color.z;
          var lightMeterScale = 10000;
          var defaultExposure = 0.00002604165638331324;
          dataInfoFloat[dataInfoFloatIndex++] = light.luminance * defaultExposure * lightMeterScale; // 2

          if (isSpotLight) {
            var spot = light;
            var clampedInnerConeAngle = Math.clamp(spot.size, 0.0, 89.0) * Math.PI / 180.0;
            var clampedOuterConeAngle = Math.clamp(spot.angle / 2, clampedInnerConeAngle + 0.001, 89.0 * Math.PI / 180.0 + 0.001);
            var cosOuterCone = Math.cos(clampedOuterConeAngle);
            var cosInnerCone = Math.cos(clampedInnerConeAngle);
            var invCosConeDifference = 1.0 / (cosInnerCone - cosOuterCone);
            dataInfoFloat[dataInfoFloatIndex++] = light.range;
            dataInfoFloat[dataInfoFloatIndex++] = cosOuterCone;
            dataInfoFloat[dataInfoFloatIndex++] = invCosConeDifference;
          } else {
            dataInfoFloat[dataInfoFloatIndex++] = light.range;
            dataInfoFloat[dataInfoFloatIndex++] = light.size;
            dataInfoFloat[dataInfoFloatIndex++] = 0;
          }

          dataInfoFloat[dataInfoFloatIndex++] = 0; // 3

          if (isSpotLight) {
            light.update();
            var dir = light.direction; // Vec3.rotateX(tempVec3, dir, Vec3.ZERO, Math.PI * 0.5)
            // Vec3.rotateY(tempVec3, dir, Vec3.ZERO, Math.PI * 0.5)
            // tempVec3.normalize()

            dataInfoFloat[dataInfoFloatIndex++] = dir.x;
            dataInfoFloat[dataInfoFloatIndex++] = dir.y;
            dataInfoFloat[dataInfoFloatIndex++] = dir.z;
            dataInfoFloat[dataInfoFloatIndex++] = 0;
          }
        };

        _proto.getBoundingBox = function getBoundingBox(light, clusteredObject) {
          var worldPos = light.node.worldPosition;
          geometry.Sphere.set(_sphere, worldPos.x, worldPos.y, worldPos.z, light.range);

          _sphere.getBoundary(clusteredObject.min, clusteredObject.max);

          clusteredObject.radius = light.range;
          clusteredObject.center.set(worldPos);
        };

        _proto.findObjects = function findObjects() {
          var lights = this.lights;
          lights.length = 0;

          for (var i = 0; i < director.root.scenes.length; i++) {
            var sphereLights = director.root.scenes[i].sphereLights;

            for (var ii = 0; ii < sphereLights.length; ii++) {
              if (sphereLights[ii].node.activeInHierarchy && sphereLights[ii].node.mobility !== MobilityMode.Static) {
                lights.push(sphereLights[ii]);
              }
            }

            var spotLights = director.root.scenes[i].spotLights;

            for (var _ii = 0; _ii < spotLights.length; _ii++) {
              if (spotLights[_ii].node.activeInHierarchy && spotLights[_ii].node.mobility !== MobilityMode.Static) {
                lights.push(spotLights[_ii]);
              }
            }
          }

          return lights;
        };

        _proto.update = function update(dt) {
          var _this2 = this;

          if (!this.dirty && !this.forceUpdate) {
            return;
          }

          _WorldCluster.prototype.update.call(this, dt);

          if (!this._dirtyTimeout) {
            this._dirtyTimeout = setTimeout(function () {
              _this2.dirty = false;
              _this2._dirtyTimeout = null;
            }, 500);
          }
        };

        return LightWorldCluster;
      }(WorldCluster), _class3.instance = void 0, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "forceUpdate", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _class2)) || _class) || _class));
      globalThis.LightWorldCluster = LightWorldCluster;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/light-flash.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SphereLight, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SphereLight = module.SphereLight;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "471dcxAP2VNQJcIMx39HMwZ", "light-flash", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      /**
       * Predefined variables
       * Name = light_flash
       * DateTime = Wed Jan 12 2022 18:59:08 GMT+0800 (China Standard Time)
       * Author = canvas
       * FileBasename = light-flash.ts
       * FileBasenameNoExtension = light-flash
       * URL = db://assets/scripts/core/effect/light-flash.ts
       * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/
       *
       */

      var light_flash = exports('light_flash', (_dec = ccclass('light_flash'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(light_flash, _Component);

        function light_flash() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._light = null;
          _this._curLuminance = 0;
          _this._range = 0;
          _this._time = 0;

          _initializerDefineProperty(_this, "min", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "range", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "speed", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = light_flash.prototype;

        _proto.start = function start() {
          // [3]
          this._light = this.getComponent(SphereLight);
          this._curLuminance = this.min;
        };

        _proto.update = function update(deltaTime) {
          // [4]

          /*
          this._curLuminance = this._curLuminance + deltaTime * this.speed;
          if (this._curLuminance > this.max || this._curLuminance < this.min) {
              this.speed *= -1;
          }
          this._light.luminance = this._curLuminance;
          */
          this._time = this._time + deltaTime * this.speed;
          this._range = Math.sin(this._time) * this.range + this.min;
          this._light.range = this._range;
        };

        return light_flash;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "min", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "range", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      })), _class2)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/light-flow-camera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, find, v3, Component, UtilVec3;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      find = module.find;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "200b8Q9SMdL7ZiT4PPLfrQJ", "light-flow-camera", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LightFlowCamera = exports('LightFlowCamera', (_dec = ccclass('LightFlowCamera'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LightFlowCamera, _Component);

        function LightFlowCamera() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._camera = void 0;
          _this._pos = v3(0, 0, 0);
          _this._waitFind = 1;
          return _this;
        }

        var _proto = LightFlowCamera.prototype;

        _proto.update = function update(deltaTime) {
          if (this._camera === null) {
            this._waitFind -= deltaTime;

            if (this._waitFind < 0) {
              this._waitFind = 1;
              var camera = find('camera_controller/camera_main');

              if (camera !== null) {
                this._camera = camera;
              }
            }
          } else {
            UtilVec3.copy(this._pos, this._camera.worldPosition);
            this.node.setPosition(this._pos);
          }
        };

        return LightFlowCamera;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/litegragh-css.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b9c4bvVw+5Cv7c+XFnT3AmU", "litegragh-css", undefined);

      var css = exports('css', "\n/* this CSS contains only the basic CSS needed to run the app and use it */\n\n.lgraphcanvas {\n    /*cursor: crosshair;*/\n    user-select: none;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n\toutline: none;\n    font-family: Tahoma, sans-serif;\n}\n\n.lgraphcanvas * {\n    box-sizing: border-box;\n}\n\n.litegraph.litecontextmenu {\n    font-family: Tahoma, sans-serif;\n    position: fixed;\n    top: 100px;\n    left: 100px;\n    min-width: 100px;\n    color: #aaf;\n    padding: 0;\n    box-shadow: 0 0 10px black !important;\n    background-color: #2e2e2e !important;\n\tz-index: 10;\n}\n\n.litegraph.litecontextmenu.dark {\n    background-color: #000 !important;\n}\n\n.litegraph.litecontextmenu .litemenu-title img {\n    margin-top: 2px;\n    margin-left: 2px;\n    margin-right: 4px;\n}\n\n.litegraph.litecontextmenu .litemenu-entry {\n    margin: 2px;\n    padding: 2px;\n}\n\n.litegraph.litecontextmenu .litemenu-entry.submenu {\n    background-color: #2e2e2e !important;\n}\n\n.litegraph.litecontextmenu.dark .litemenu-entry.submenu {\n    background-color: #000 !important;\n}\n\n.litegraph .litemenubar ul {\n    font-family: Tahoma, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n.litegraph .litemenubar li {\n    font-size: 14px;\n    color: #999;\n    display: inline-block;\n    min-width: 50px;\n    padding-left: 10px;\n    padding-right: 10px;\n    user-select: none;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    cursor: pointer;\n}\n\n.litegraph .litemenubar li:hover {\n    background-color: #777;\n    color: #eee;\n}\n\n.litegraph .litegraph .litemenubar-panel {\n    position: absolute;\n    top: 5px;\n    left: 5px;\n    min-width: 100px;\n    background-color: #444;\n    box-shadow: 0 0 3px black;\n    padding: 4px;\n    border-bottom: 2px solid #aaf;\n    z-index: 10;\n}\n\n.litegraph .litemenu-entry,\n.litemenu-title {\n    font-size: 12px;\n    color: #aaa;\n    padding: 0 0 0 4px;\n    margin: 2px;\n    padding-left: 2px;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    user-select: none;\n    cursor: pointer;\n}\n\n.litegraph .litemenu-entry .icon {\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    margin: 2px;\n    vertical-align: top;\n}\n\n.litegraph .litemenu-entry.checked .icon {\n    background-color: #aaf;\n}\n\n.litegraph .litemenu-entry .more {\n    float: right;\n    padding-right: 5px;\n}\n\n.litegraph .litemenu-entry.disabled {\n    opacity: 0.5;\n    cursor: default;\n}\n\n.litegraph .litemenu-entry.separator {\n    display: block;\n    border-top: 1px solid #333;\n    border-bottom: 1px solid #666;\n    width: 100%;\n    height: 0px;\n    margin: 3px 0 2px 0;\n    background-color: transparent;\n    padding: 0 !important;\n    cursor: default !important;\n}\n\n.litegraph .litemenu-entry.has_submenu {\n    border-right: 2px solid cyan;\n}\n\n.litegraph .litemenu-title {\n    color: #dde;\n    background-color: #111;\n    margin: 0;\n    padding: 2px;\n    cursor: default;\n}\n\n.litegraph .litemenu-entry:hover:not(.disabled):not(.separator) {\n    background-color: #444 !important;\n    color: #eee;\n    transition: all 0.2s;\n}\n\n.litegraph .litemenu-entry .property_name {\n    display: inline-block;\n    text-align: left;\n    min-width: 80px;\n    min-height: 1.2em;\n}\n\n.litegraph .litemenu-entry .property_value {\n    display: inline-block;\n    background-color: rgba(0, 0, 0, 0.5);\n    text-align: right;\n    min-width: 80px;\n    min-height: 1.2em;\n    vertical-align: middle;\n    padding-right: 10px;\n}\n\n.litegraph.litesearchbox {\n    font-family: Tahoma, sans-serif;\n    position: absolute;\n    background-color: rgba(0, 0, 0, 0.5);\n    padding-top: 4px;\n}\n\n.litegraph.litesearchbox input,\n.litegraph.litesearchbox select {\n    margin-top: 3px;\n    min-width: 60px;\n    min-height: 1.5em;\n    background-color: black;\n    border: 0;\n    color: white;\n    padding-left: 10px;\n    margin-right: 5px;\n}\n\n.litegraph.litesearchbox .name {\n    display: inline-block;\n    min-width: 60px;\n    min-height: 1.5em;\n    padding-left: 10px;\n}\n\n.litegraph.litesearchbox .helper {\n    overflow: auto;\n    max-height: 200px;\n    margin-top: 2px;\n}\n\n.litegraph.lite-search-item {\n    font-family: Tahoma, sans-serif;\n    background-color: rgba(0, 0, 0, 0.5);\n    color: white;\n    padding-top: 2px;\n}\n\n.litegraph.lite-search-item.not_in_filter{\n    /*background-color: rgba(50, 50, 50, 0.5);*/\n    /*color: #999;*/\n    color: #B99;\n    font-style: italic;\n}\n\n.litegraph.lite-search-item.generic_type{\n    /*background-color: rgba(50, 50, 50, 0.5);*/\n    /*color: #DD9;*/\n    color: #999;\n    font-style: italic;\n}\n\n.litegraph.lite-search-item:hover,\n.litegraph.lite-search-item.selected {\n    cursor: pointer;\n    background-color: white;\n    color: black;\n}\n\n/* DIALOGs ******/\n\n.litegraph .dialog {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-top: -150px;\n    margin-left: -200px;\n\n    background-color: #2A2A2A;\n\n    min-width: 400px;\n    min-height: 200px;\n\tbox-shadow: 0 0 4px #111;\n    border-radius: 6px;\n}\n\n.litegraph .dialog.settings {\n\tleft: 10px;\n\ttop: 10px;\n\theight: calc( 100% - 20px );\n\tmargin: auto;\n    max-width: 50%;\n}\n\n.litegraph .dialog.centered {\n    top: 50px;\n    left: 50%;\n    position: absolute;\n    transform: translateX(-50%);\n    min-width: 600px;\n    min-height: 300px;\n    height: calc( 100% - 100px );\n\tmargin: auto;\n}\n\n.litegraph .dialog .close {\n    float: right;\n\tmargin: 4px;\n\tmargin-right: 10px;\n\tcursor: pointer;\n\tfont-size: 1.4em;\n}\n\n.litegraph .dialog .close:hover {\n\tcolor: white;\n}\n\n.litegraph .dialog .dialog-header {\n\tcolor: #AAA;\n\tborder-bottom: 1px solid #161616;\n}\n\n.litegraph .dialog .dialog-header { height: 40px; }\n.litegraph .dialog .dialog-footer { height: 50px; padding: 10px; border-top: 1px solid #1a1a1a;}\n\n.litegraph .dialog .dialog-header .dialog-title {\n    font: 20px \"Arial\";\n    margin: 4px;\n    padding: 4px 10px;\n    display: inline-block;\n}\n\n.litegraph .dialog .dialog-content, .litegraph .dialog .dialog-alt-content {\n    height: calc(100% - 90px);\n    width: 100%;\n\tmin-height: 100px;\n    display: inline-block;\n\tcolor: #AAA;\n    /*background-color: black;*/\n    overflow: auto;\n}\n\n.litegraph .dialog .dialog-content h3 {\n\tmargin: 10px;\n}\n\n.litegraph .dialog .dialog-content .connections {\n\tflex-direction: row;\n}\n\n.litegraph .dialog .dialog-content .connections .connections_side {\n\twidth: calc(50% - 5px);\n\tmin-height: 100px;\n\tbackground-color: black;\n\tdisplay: flex;\n}\n\n.litegraph .dialog .node_type {\n\tfont-size: 1.2em;\n\tdisplay: block;\n\tmargin: 10px;\n}\n\n.litegraph .dialog .node_desc {\n\topacity: 0.5;\n\tdisplay: block;\n\tmargin: 10px;\n}\n\n.litegraph .dialog .separator {\n\tdisplay: block;\n\twidth: calc( 100% - 4px );\n\theight: 1px;\n\tborder-top: 1px solid #000;\n\tborder-bottom: 1px solid #333;\n\tmargin: 10px 2px;\n\tpadding: 0;\n}\n\n.litegraph .dialog .property {\n\tmargin-bottom: 2px;\n\tpadding: 4px;\n}\n\n.litegraph .dialog .property:hover {\n\tbackground: #545454;\n}\n\n.litegraph .dialog .property_name {\n\tcolor: #737373;\n    display: inline-block;\n    text-align: left;\n    vertical-align: top;\n    width: 160px;\n\tpadding-left: 4px;\n\toverflow: hidden;\n    margin-right: 6px;\n}\n\n.litegraph .dialog .property:hover .property_name {\n    color: white;\n}\n\n.litegraph .dialog .property_value {\n    display: inline-block;\n    text-align: right;\n\tcolor: #AAA;\n\tbackground-color: #1A1A1A;\n    /*width: calc( 100% - 122px );*/\n    max-width: calc( 100% - 162px );\n    min-width: 200px;\n\tmax-height: 300px;\n    min-height: 20px;\n    padding: 4px;\n\tpadding-right: 12px;\n\toverflow: hidden;\n\tcursor: pointer;\n\tborder-radius: 3px;\n}\n\n.litegraph .dialog .property_value:hover {\n\tcolor: white;\n}\n\n.litegraph .dialog .property.boolean .property_value {\n\tpadding-right: 30px;\n    color: #A88;\n    /*width: auto;\n    float: right;*/\n}\n\n.litegraph .dialog .property.boolean.bool-on .property_name{\n    color: #8A8;\n}\n.litegraph .dialog .property.boolean.bool-on .property_value{\n    color: #8A8;\n}\n\n.litegraph .dialog .btn {\n\tborder: 0;\n\tborder-radius: 4px;\n    padding: 4px 20px;\n    margin-left: 0px;\n    background-color: #060606;\n    color: #8e8e8e;\n}\n\n.litegraph .dialog .btn:hover {\n    background-color: #111;\n    color: #FFF;\n}\n\n.litegraph .dialog .btn.delete:hover {\n    background-color: #F33;\n    color: black;\n}\n\n.litegraph .subgraph_property {\n\tpadding: 4px;\n}\n\n.litegraph .subgraph_property:hover {\n\tbackground-color: #333;\n}\n\n.litegraph .subgraph_property.extra {\n    margin-top: 8px;\n}\n\n.litegraph .subgraph_property span.name {\n\tfont-size: 1.3em;\n\tpadding-left: 4px;\n}\n\n.litegraph .subgraph_property span.type {\n\topacity: 0.5;\n\tmargin-right: 20px;\n\tpadding-left: 4px;\n}\n\n.litegraph .subgraph_property span.label {\n\tdisplay: inline-block;\n\twidth: 60px;\n\tpadding:  0px 10px;\n}\n\n.litegraph .subgraph_property input {\n\twidth: 140px;\n\tcolor: #999;\n\tbackground-color: #1A1A1A;\n\tborder-radius: 4px;\n\tborder: 0;\n\tmargin-right: 10px;\n\tpadding: 4px;\n\tpadding-left: 10px;\n}\n\n.litegraph .subgraph_property button {\n\tbackground-color: #1c1c1c;\n\tcolor: #aaa;\n\tborder: 0;\n\tborder-radius: 2px;\n\tpadding: 4px 10px;\n\tcursor: pointer;\n}\n\n.litegraph .subgraph_property.extra {\n\tcolor: #ccc;\n}\n\n.litegraph .subgraph_property.extra input {\n\tbackground-color: #111;\n}\n\n.litegraph .bullet_icon {\n\tmargin-left: 10px;\n\tborder-radius: 10px;\n\twidth: 12px;\n\theight: 12px;\n\tbackground-color: #666;\n\tdisplay: inline-block;\n\tmargin-top: 2px;\n\tmargin-right: 4px;\n    transition: background-color 0.1s ease 0s;\n    -moz-transition: background-color 0.1s ease 0s;\n}\n\n.litegraph .bullet_icon:hover {\n\tbackground-color: #698;\n\tcursor: pointer;\n} \n\n/* OLD */\n\n.graphcontextmenu {\n    padding: 4px;\n    min-width: 100px;\n}\n\n.graphcontextmenu-title {\n    color: #dde;\n    background-color: #222;\n    margin: 0;\n    padding: 2px;\n    cursor: default;\n}\n\n.graphmenu-entry {\n    box-sizing: border-box;\n    margin: 2px;\n    padding-left: 20px;\n    user-select: none;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    transition: all linear 0.3s;\n}\n\n.graphmenu-entry.event,\n.litemenu-entry.event {\n    border-left: 8px solid orange;\n    padding-left: 12px;\n}\n\n.graphmenu-entry.disabled {\n    opacity: 0.3;\n}\n\n.graphmenu-entry.submenu {\n    border-right: 2px solid #eee;\n}\n\n.graphmenu-entry:hover {\n    background-color: #555;\n}\n\n.graphmenu-entry.separator {\n    background-color: #111;\n    border-bottom: 1px solid #666;\n    height: 1px;\n    width: calc(100% - 20px);\n    -moz-width: calc(100% - 20px);\n    -webkit-width: calc(100% - 20px);\n}\n\n.graphmenu-entry .property_name {\n    display: inline-block;\n    text-align: left;\n    min-width: 80px;\n    min-height: 1.2em;\n}\n\n.graphmenu-entry .property_value,\n.litemenu-entry .property_value {\n    display: inline-block;\n    background-color: rgba(0, 0, 0, 0.5);\n    text-align: right;\n    min-width: 80px;\n    min-height: 1.2em;\n    vertical-align: middle;\n    padding-right: 10px;\n}\n\n.graphdialog {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    min-height: 2em;\n    background-color: #333;\n    font-size: 1.2em;\n    box-shadow: 0 0 10px black !important;\n\tz-index: 10;\n}\n\n.graphdialog.rounded {\n    border-radius: 12px;\n    padding-right: 2px;\n}\n\n.graphdialog .name {\n    display: inline-block;\n    min-width: 60px;\n    min-height: 1.5em;\n    padding-left: 10px;\n}\n\n.graphdialog input,\n.graphdialog textarea,\n.graphdialog select {\n    margin: 3px;\n    min-width: 60px;\n    min-height: 1.5em;\n    background-color: black;\n    border: 0;\n    color: white;\n    padding-left: 10px;\n    outline: none;\n}\n\n.graphdialog textarea {\n\tmin-height: 150px;\n}\n\n.graphdialog button {\n    margin-top: 3px;\n    vertical-align: top;\n    background-color: #999;\n\tborder: 0;\n}\n\n.graphdialog button.rounded,\n.graphdialog input.rounded {\n    border-radius: 0 12px 12px 0;\n}\n\n.graphdialog .helper {\n    overflow: auto;\n    max-height: 200px;\n}\n\n.graphdialog .help-item {\n    padding-left: 10px;\n}\n\n.graphdialog .help-item:hover,\n.graphdialog .help-item.selected {\n    cursor: pointer;\n    background-color: white;\n    color: black;\n}\n\n.litegraph .dialog {\n    min-height: 0;\n}\n.litegraph .dialog .dialog-content {\ndisplay: block;\n}\n.litegraph .dialog .dialog-content .subgraph_property {\npadding: 5px;\n}\n.litegraph .dialog .dialog-footer {\nmargin: 0;\n}\n.litegraph .dialog .dialog-footer .subgraph_property {\nmargin-top: 0;\ndisplay: flex;\nalign-items: center;\npadding: 5px;\n}\n.litegraph .dialog .dialog-footer .subgraph_property .name {\nflex: 1;\n}\n.litegraph .graphdialog {\ndisplay: flex;\nalign-items: center;\nborder-radius: 20px;\npadding: 4px 10px;\nposition: fixed;\n}\n.litegraph .graphdialog .name {\npadding: 0;\nmin-height: 0;\nfont-size: 16px;\nvertical-align: middle;\n}\n.litegraph .graphdialog .value {\nfont-size: 16px;\nmin-height: 0;\nmargin: 0 10px;\npadding: 2px 5px;\n}\n.litegraph .graphdialog input[type=\"checkbox\"] {\nwidth: 16px;\nheight: 16px;\n}\n.litegraph .graphdialog button {\npadding: 4px 18px;\nborder-radius: 20px;\ncursor: pointer;\n}\n  \n\n");

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/local-label.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './util.ts', './local.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Label, Component, Msg, UtilNode, Local;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      UtilNode = module.UtilNode;
    }, function (module) {
      Local = module.Local;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fab76mfQ8NBRqQEPZXamO3u", "local-label", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LocalLabel = exports('LocalLabel', (_dec = ccclass('LocalLabel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LocalLabel, _Component);

        function LocalLabel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.label = void 0;
          _this.key = '';
          return _this;
        }

        var _proto = LocalLabel.prototype;

        _proto.start = function start() {
          Msg.bind('refresh_local', this.refresh, this);
          this.label = UtilNode.getComponent(this.node, Label);
          this.key = this.node.name.slice(6);
          this.refresh();
        };

        _proto.onDestroy = function onDestroy() {
          Msg.off('refresh_local', this.refresh);
        };

        _proto.refresh = function refresh() {
          this.label.string = Local.Instance.get(this.key);
        };

        return LocalLabel;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/local.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './save.ts', './msg.ts', './singleton.ts', './res-cache.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Save, Msg, Singleton, ResCache;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Save = module.Save;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      cclegacy._RF.push({}, "593c2Gv5lpB/7Edb63mhm2g", "local", undefined);

      var Local = exports('Local', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(Local, _Singleton);

        function Local() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this.index = 1;
          _this.max = 2;
          _this._data = Object.create(null);
          _this._map = Object.create(null);
          return _this;
        }

        var _proto = Local.prototype;

        _proto.init = function init() {
          var _this2 = this;

          this._data = ResCache.Instance.getJson('local').json;
          this.max = this._data.language.length;
          this.index = Save.Instance._cur.languageIndex;

          if (this.index === -1) {
            var sys_language = window.navigator.language.toLocaleLowerCase();
            sys_language = sys_language.replace('-', '_');
            console.log(sys_language);

            for (var i = 0; i < this._data.language.length; i++) {
              var name = this._data.language[i];

              if (sys_language.includes(name)) {
                this.index = i;
                break;
              }
            }

            if (this.index === -1) this.index = 2;
          }

          Msg.on('next_language', function () {
            _this2.index++;
            if (_this2.index >= _this2.max) _this2.index = 0;
            Msg.emit('msg_save_set', {
              key: 'languageIndex',
              value: _this2.index
            });
            Local.Instance.refresh();
          });
          Msg.on('pre_language', function () {
            _this2.index--;
            if (_this2.index < 0) _this2.index = _this2.max - 1;
            Msg.emit('msg_save_set', {
              key: 'languageIndex',
              value: _this2.index
            });
            Local.Instance.refresh();
          });
          this.refresh();
        };

        _proto.get = function get(name) {
          var val = this._map[name];

          if (val) {
            return val;
          } else {
            return name;
          }
        };

        _proto.getShowName = function getShowName() {
          return this._data.show_name[this.index];
        };

        _proto.refresh = function refresh() {
          var name = this._data.language[this.index];
          this._map = ResCache.Instance.getJson(name).json; //refresh

          Msg.emit('refresh_local');
        };

        return Local;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/log.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c4df3A9q5lAjoQvwRuVAAFl", "log", undefined);

      var Log = exports('Log', /*#__PURE__*/function () {
        function Log() {}

        Log.Init = function Init() {};

        Log.info = function info(data) {
          console.info(data);
        };

        Log.debug = function debug(data) {
          console.log(data);
        };

        Log.error = function error(data) {
          console.error(data);
        };

        Log.warn = function warn(data) {
          console.warn(data);
        };

        return Log;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/logo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1a1264ux6tKUpHijpjonNf7", "logo", undefined);

      var ccclass = _decorator.ccclass,
          type = _decorator.type,
          property = _decorator.property;
      var logo = exports('logo', (_dec = ccclass('logo'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(logo, _Component);

        function logo() {
          return _Component.apply(this, arguments) || this;
        }

        return logo;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./test-ghost.ts', './action.ts', './actor-base.ts', './actor-task-go-target.ts', './actor-tasks.ts', './astar.ts', './brain.ts', './steering-basic.ts', './steering-behaviors.ts', './steering-seek.ts', './Electron.ts', './music-compose-random.ts', './music-compose-state.ts', './music-compose-value.ts', './sound-actor.ts', './sound-enable-play.ts', './sound.ts', './data-base.ts', './fx-actor-fall-point.ts', './fx-auto-remove.ts', './fx-base.ts', './fx-group.ts', './fx-init.ts', './fx.ts', './light-flash.ts', './graphics.ts', './guide.ts', './aim-control.ts', './aim-ik.ts', './ik-bone.ts', './ik-point.ts', './ik-solver-aim.ts', './ik-solver-heuristic.ts', './ik-solver.ts', './math-util.ts', './weapon-aim.ts', './IActorInput.ts', './input-base.ts', './input-equip-select.ts', './input-gamepad.ts', './input-handle.ts', './input-joystick.ts', './input-keyboard.ts', './input-mouse.ts', './input-pointer-lock.ts', './joystick-auto-hidden.ts', './joystick-move.ts', './joystick-pad-action.ts', './joystick-pad.ts', './joystick.ts', './joytick-pad-rotation.ts', './touch-cancel.ts', './io.ts', './json-tool.ts', './log.ts', './notify.ts', './local-label.ts', './local.ts', './msg.ts', './singleton.ts', './render-tool.ts', './res-cache.ts', './res-destroy.ts', './res-editor-cache.ts', './res-pool.ts', './res-texture.ts', './res.ts', './g-scene.ts', './sensor-actions.ts', './sensor-anig.ts', './sensor-audio.ts', './sensor-effect.ts', './sensor-ground.ts', './sensor-msg.ts', './sensor-probe.ts', './sensor-ray-node-to-node.ts', './sensor-rays-angle.ts', './sensor-rays.ts', './sensor-slope.ts', './task.ts', './fil-smooth.ts', './slider-2d.ts', './ui-auto-hidden.ts', './ui-base.ts', './ui-display-by-state-auto-hidden.ts', './ui-display-by-state.ts', './ui-enable-play-anim.ts', './ui-enable-play-animation.ts', './ui-enable-play.ts', './ui-fadein.ts', './ui.ts', './MsgPlayAnimation.ts', './collider-group.ts', './data-structure.ts', './debug-util.ts', './delay-show-node.ts', './destroy-settings.ts', './force-area.ts', './fun.ts', './g-math.ts', './grandom.ts', './light-flow-camera.ts', './msg-events.ts', './stretched-billboard.ts', './ui-roller.ts', './util.ts', './gm.ts', './actor-animation-graph-group.ts', './actor-animation-graph.ts', './actor-animator-contorller.ts', './actor-axe.ts', './actor-bag.ts', './actor-brain.ts', './actor-crossbow.ts', './actor-enemy-gun.ts', './actor-equip-base.ts', './actor-equipment.ts', './actor-face.ts', './actor-follow-path-move.ts', './actor-grenade.ts', './actor-handgun.ts', './actor-input-brain.ts', './actor-input.ts', './actor-interface.ts', './actor-items.ts', './actor-lookat.ts', './actor-machine-gun.ts', './actor-main.ts', './actor-melee-weapon.ts', './actor-move-slope.ts', './actor-move.ts', './actor-part.ts', './actor-physical-skin.ts', './actor-piranha.ts', './actor-sensor-drop-item.ts', './actor-shotgun.ts', './actor-sound.ts', './actor-statistics.ts', './actor.ts', './animationgraph-move.ts', './damage-core.ts', './infrared-tracker.ts', './level-enable-play.ts', './projectile-grenade.ts', './camera-auto-bind-occlusion.ts', './camera-controller.ts', './camera-fps.ts', './camera-move-target.ts', './camera-msg.ts', './camera-tps.ts', './smooth-local-z.ts', './GameQuality.ts', './achievement.ts', './bind.ts', './buff.ts', './data-camera.ts', './data-core.ts', './data-equip.ts', './data-game.ts', './data-level.ts', './data-navigation.ts', './data-sound.ts', './data-upgrade-card.ts', './game-type.ts', './game.ts', './save.ts', './fx-bullet-tracer.ts', './fx-car-random-move.ts', './fx-fly-car.ts', './fx-ghost-vertex.ts', './fx-ghost.ts', './fx-light-flash.ts', './fx-ray-line.ts', './gun-tracer-pool.ts', './sfx-heart.ts', './init.ts', './preload.ts', './check-auto-pick.ts', './drop-item.ts', './substance-core.ts', './level-events-card.ts', './level-events-enemy.ts', './level-events-items.ts', './level-events.ts', './level.ts', './spwans-group.ts', './logo.ts', './navigation-debugger.ts', './navigation-map.ts', './navigation-point.ts', './navigation-points.ts', './navigation-region.ts', './navigation-system.ts', './jump-points.ts', './ui-aim-range.ts', './ui-animation.ts', './ui-fx.ts', './ui-grp-picked-tips.ts', './ui-guide-platform.ts', './ui-loading.ts', './ui-move-show.ts', './ui-svc-reset-pos.ts', './delay-play.ts', './delay_play_animation.ts', './test-move-target.ts', './test-steering-init.ts', './tap-play.ts', './test-actor-move.ts', './test-amoy-animation.ts', './test-anig.ts', './test-camera-debug.ts', './test-collider-mesh-switch.ts', './test-forward.ts', './test-gun-fire.ts', './test-gun-tracer.ts', './test-ik.ts', './test-normal.ts', './test-rigidbody-vector.ts', './test-slope-direction.ts', './test-slope-move.ts', './test-slope-vector.ts', './test-stairs.ts', './test-stretched-billboard.ts', './test-ui.ts', './disable-update-ubo.ts', './switch-probe.ts', './animation-to-oribit.ts', './generate-white-box.ts', './move-camera-x.ts', './test-reflect.ts', './test-taa.ts', './camera-setting.ts', './bloom.ts', './light-cluster.ts', './reflection-cluster.ts', './utils.ts', './world-cluster.ts', './delay-active.ts', './height-fog.ts', './static-occlusion-area.ts', './static-occlusion-block.ts', './static-occlusion-culling.ts', './halton.ts', './pool.ts', './raycast-gpu.ts', './raycast.ts', './utils3.ts', './pipeline-assets.ts', './reflection-probe-utils.ts', './scene-particles.ts', './sky.ts', './save-gltf.ts', './static-area-batch.ts', './static-batch-comp.ts', './static-culling.ts', './taa.ts', './graph-data.ts', './graph.ts', './litegragh-css.ts', './output-texture.ts', './pipeline.ts', './render-quality.ts', './render-to-screen.ts', './router.ts', './stage.ts', './vec2.ts', './pipeline-graph.ts', './start.ts', './nodes.ts', './hack.ts', './instance-buffer.ts', './opaque-depth.ts', './pipeline-manager.ts', './gpu-mobiles.ts', './gpu.ts', './href-setting.ts', './render-setting.ts', './spector.ts', './base-stage.ts', './blit-stage.ts', './bloom-stage.ts', './deferred-gbuffer-stage.ts', './deferred-lighting-stage.ts', './deferred-post-stage.ts', './forward-post-stage.ts', './forward-stage.ts', './fsr-stage.ts', './fxaa-stage.ts', './setting.ts', './shadow-stage.ts', './taa-stage.ts', './zoom-screen-stage.ts', './test-custom.ts', './transparent-depth.ts', './ubo.ts', './debug.ts', './editor-camera-placer.ts', './editor.ts', './event.ts', './math.ts', './npm.ts', './orbit-camera.ts', './pass-utils.ts', './utils2.ts'], function () {
  'use strict';

  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/math-util.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator, Quat, Vec3, Mat4, geometry, game;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Quat = module.Quat;
      Vec3 = module.Vec3;
      Mat4 = module.Mat4;
      geometry = module.geometry;
      game = module.game;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "deef428f9JOPLejXO+uNHyr", "math-util", undefined); //import { ColliderGroup, ControlType, CameraRotateType } from '../scene/define';


      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var _tempQuat = new Quat();

      var _tempVec3 = new Vec3();

      var _tempVec3_2 = new Vec3();

      var _tempMat = new Mat4();

      var _tempMat_2 = new Mat4();

      var _forward = new Vec3(0, 0, 1);

      var _ray = new geometry.Ray();

      var MathUtil = exports('default', (_dec = ccclass('MathUtil'), _dec(_class = /*#__PURE__*/function () {
        function MathUtil() {}

        MathUtil.degreesToRadians = function degreesToRadians(degValue) {
          return degValue * (Math.PI / 180.0);
        };

        MathUtil.radiansToDegrees = function radiansToDegrees(radValue) {
          return radValue * (180.0 / Math.PI);
        };

        MathUtil.clamp01 = function clamp01(value) {
          if (value < 0) return 0;
          if (value > 1) return 1;
          return value;
        };

        MathUtil.clampDegrees = function clampDegrees(value, min, max) {
          if (min === void 0) {
            min = -180;
          }

          if (max === void 0) {
            max = 180;
          }

          while (value < min) {
            value += 360;
          }

          while (value > max) {
            value -= 360;
          }

          return value;
        };

        MathUtil.transformDegreesToNear = function transformDegreesToNear(value, target) {
          if (Math.abs(value - target) < 180) return value;

          if (value < target) {
            while (value < target) {
              value += 360;
            }

            return value;
          }

          while (value > target) {
            value -= 360;
          }

          return value;
        };

        MathUtil.clamp = function clamp(value, min, max) {
          if (value < min) return min;
          if (value > max) return max;
          return value;
        };

        MathUtil.inverseLerp = function inverseLerp(a, b, v) {
          var ba = b - a;
          if (Math.abs(ba) < 0.000001) return 0;
          v = (v - a) / ba;
          return MathUtil.clamp01(v);
        };

        MathUtil.remap = function remap(x, a, b, c, d) {
          var remappedValue = c + (x - a) / (b - a) * (d - c);
          return remappedValue;
        };

        MathUtil.convertToNodeSpace = function convertToNodeSpace(out, worldPosition, node) {
          node.getWorldMatrix(_tempMat);
          Mat4.invert(_tempMat_2, _tempMat);
          return Vec3.transformMat4(out, worldPosition, _tempMat_2);
        };

        MathUtil.convertToWorldSpace = function convertToWorldSpace(out, localPosition, node) {
          node.getWorldMatrix(_tempMat);
          return Vec3.transformMat4(out, localPosition, _tempMat);
        };

        MathUtil.randomInt = function randomInt(min, max) {
          if (min > max) return -1;
          return min + Math.round((max - min) * Math.random());
        };

        MathUtil.directionToNodeSpace = function directionToNodeSpace(out, worldDirection, node) {
          node.getWorldPosition(_tempVec3);

          _tempVec3.add(worldDirection);

          MathUtil.convertToNodeSpace(out, _tempVec3, node);
          return out;
        };

        MathUtil.getWorldLine = function getWorldLine(beginNode, endNode, worldRotation, worldPosition) {
          beginNode.getWorldPosition(_tempVec3);
          endNode.getWorldPosition(_tempVec3_2);
          Vec3.lerp(worldPosition, _tempVec3, _tempVec3_2, 0.5);

          _tempVec3_2.subtract(_tempVec3);

          var length = _tempVec3_2.length();

          _tempVec3_2.normalize();

          Quat.rotationTo(worldRotation, _forward, _tempVec3_2);
          return length;
        };

        MathUtil.getWorldLineByPos = function getWorldLineByPos(beginPos, endPos, worldRotation, worldPosition) {
          Vec3.copy(_tempVec3, beginPos);
          Vec3.copy(_tempVec3_2, endPos);
          Vec3.lerp(worldPosition, _tempVec3, _tempVec3_2, 0.5);

          _tempVec3_2.subtract(_tempVec3);

          var length = _tempVec3_2.length();

          _tempVec3_2.normalize();

          Quat.rotationTo(worldRotation, _forward, _tempVec3_2);
          return length;
        }
        /*
        public static getFieldViewPoint (points: Node[], testPoint: Node, resultPoints: Node[], pointMask = ColliderGroup.PathPointAim, resultPointsMap: Map<Node, boolean> | null = null, yEnoughDistance = 99999) {
            testPoint.getWorldPosition(_tempVec3);
            resultPoints.length = 0;
            if (resultPointsMap) {
                resultPointsMap.clear();
            }
             for (let i = 0; i < points.length; i++) {
                let point = points[i];
                if (testPoint == point) continue;
                 point.getWorldPosition(_tempVec3_2);
                 let yDistance = Math.abs(_tempVec3.y - _tempVec3_2.y);
                if (yDistance > yEnoughDistance) continue;
                 Vec3.subtract(_tempVec3_2, _tempVec3_2, _tempVec3);
                _tempVec3_2.normalize();
                geometry.Ray.set(_ray,
                    _tempVec3.x, _tempVec3.y, _tempVec3.z,
                    _tempVec3_2.x, _tempVec3_2.y, _tempVec3_2.z);
                 let hasHit = PhysicsSystem.instance.raycastClosest(_ray, pointMask);
                if (!hasHit) continue;
                let hitResult = PhysicsSystem.instance.raycastClosestResult;
                if (hitResult.collider.node != point) continue;
                 (point as any).__distance = hitResult.distance;
                resultPoints.push(point);
                if (resultPointsMap) {
                    resultPointsMap.set(point, true);
                }
            }
             resultPoints.sort((a, b) => (a as any).__distance - (b as any).__distance);
            return resultPoints;
        }
        */
        ;

        MathUtil.distance = function distance(a, b) {
          a.getWorldPosition(_tempVec3);
          b.getWorldPosition(_tempVec3_2);
          return Vec3.distance(_tempVec3, _tempVec3_2);
        };

        MathUtil.hDistance = function hDistance(a, b) {
          Vec3.copy(_tempVec3, a);
          Vec3.copy(_tempVec3_2, b);
          _tempVec3.y = 0;
          _tempVec3_2.y = 0;
          return Vec3.distance(_tempVec3, _tempVec3_2);
        };

        MathUtil.getMoveDirectionByCameraDirection = function getMoveDirectionByCameraDirection(out, rotateValue, rotateVector, node) {
          var x = rotateValue.x;
          var y = rotateValue.y;
          var deg = Math.atan2(-y, x) - Math.PI * 0.5;
          Vec3.rotateY(out, rotateVector, Vec3.ZERO, deg);
          return out;
        };

        MathUtil.getLocalDegree = function getLocalDegree(rotateValue, rotateVector, node) {
          // because input is base on engine z and x axis, so it's like

          /*
              |
          ____|_____\ x
              |     /
              |
             \ /
             z
          */
          // now we need to handle direction with the camera observe direction, so we need to reversal the z axis, the z is primary movement's y axis
          // the x and y is zero when beginning, that's mean it point to x axis, but camera point to -z direction, so need to minus 90
          var x = rotateValue.x;
          var y = rotateValue.y;
          var deg = Math.atan2(-y, x) - Math.PI * 0.5;
          Vec3.rotateY(_tempVec3, rotateVector, Vec3.ZERO, deg);
          node.getWorldPosition(_tempVec3_2);

          _tempVec3_2.add(_tempVec3);

          MathUtil.convertToNodeSpace(_tempVec3, _tempVec3_2, node);
          _tempVec3.y = 0;

          _tempVec3.normalize();

          return MathUtil.radiansToDegrees(Math.atan2(_tempVec3.x, _tempVec3.z));
        };

        MathUtil.smoothDamp = function smoothDamp(current, target, currentVelocity, smoothTime, maxSpeed) {
          if (maxSpeed === void 0) {
            maxSpeed = 100;
          }

          smoothTime = Math.max(0.0001, smoothTime);
          var num1 = 2.0 / smoothTime;
          var num2 = num1 * game.deltaTime;
          var num3 = 1.0 / (1.0 + num2 + 0.479999989271164 * num2 * num2 + 0.234999999403954 * num2 * num2 * num2);
          var num4 = current - target;
          var num5 = target;
          var max = maxSpeed * smoothTime;
          var num6 = MathUtil.clamp(num4, -max, max);
          target = current - num6;
          var num7 = (currentVelocity.value + num1 * num6) * game.deltaTime;
          currentVelocity.value = (currentVelocity.value - num1 * num7) * num3;
          var num8 = target + (num6 + num7) * num3;

          if (num5 - current > 0.0 == num8 > num5) {
            num8 = num5;
            currentVelocity.value = (num8 - num5) / game.deltaTime;
          }

          return num8;
        } // it equal Quat.rotationTo(_tempQuat, fromDir.normalize(), toDir.normalize());
        ;

        MathUtil.fromToRotation = function fromToRotation(out, fromDir, toDir) {
          if (fromDir.equals(Vec3.ZERO) || toDir.equals(Vec3.ZERO)) return Quat.IDENTITY; // fromDir normalize by max

          var max = Math.abs(fromDir.x);
          max = max > Math.abs(fromDir.y) ? max : Math.abs(fromDir.y);
          max = max > Math.abs(fromDir.z) ? max : Math.abs(fromDir.z);
          fromDir = fromDir.multiplyScalar(1 / max); //    fromDir = fromDir / max;
          // toDir normalize by max

          max = Math.abs(toDir.x);
          max = max > Math.abs(toDir.y) ? max : Math.abs(toDir.y);
          max = max > Math.abs(toDir.z) ? max : Math.abs(toDir.z);
          toDir = toDir.multiplyScalar(1 / max); //         toDir = toDir / max;
          // set miniThreshold

          var miniThreshold = 0.001;
          fromDir.x = Math.abs(fromDir.x) <= miniThreshold ? 0 : fromDir.x;
          fromDir.y = Math.abs(fromDir.y) <= miniThreshold ? 0 : fromDir.y;
          fromDir.z = Math.abs(fromDir.z) <= miniThreshold ? 0 : fromDir.z;
          toDir.x = Math.abs(toDir.x) <= miniThreshold ? 0 : toDir.x;
          toDir.y = Math.abs(toDir.y) <= miniThreshold ? 0 : toDir.y;
          toDir.z = Math.abs(toDir.z) <= miniThreshold ? 0 : toDir.z;
          Vec3.normalize(_tempVec3, toDir);
          Vec3.normalize(_tempVec3_2, fromDir);
          Vec3.add(_tempVec3, _tempVec3, _tempVec3_2);
          var mid = new Vec3();
          Vec3.normalize(mid, _tempVec3);

          if (mid.equals(Vec3.ZERO)) {
            // X
            if (fromDir.x != 0 && fromDir.y == 0 && fromDir.z == 0) {
              return new Quat(0, 1, 0, 0);
            } // Y
            else if (fromDir.x == 0 && fromDir.y != 0 && fromDir.z == 0) {
                return new Quat(1, 0, 0, 0);
              } // Z
              else if (fromDir.x == 0 && fromDir.y == 0 && fromDir.z != 0) {
                  return new Quat(1, 0, 0, 0);
                } // X
                else if (fromDir.x == 0 && fromDir.y != 0 && fromDir.z != 0) {
                    return new Quat(1, 0, 0, 0);
                  } // Y
                  else if (fromDir.x != 0 && fromDir.y == 0 && fromDir.z != 0) {
                      Vec3.normalize(_tempVec3, toDir);
                      Vec3.normalize(_tempVec3_2, fromDir);
                      var X = _tempVec3.z;
                      var Z = _tempVec3_2.x;

                      if (X + Z < 0 || X + Z == 0 && X < 0) {
                        return new Quat(-X, 0, -Z, 0);
                      } else {
                        return new Quat(X, 0, Z, 0);
                      }
                    } // Z
                    else if (fromDir.x != 0 && fromDir.y != 0 && fromDir.z == 0) {
                        Vec3.normalize(_tempVec3, toDir);
                        Vec3.normalize(_tempVec3_2, fromDir);
                        var _X = _tempVec3.y;
                        var Y = _tempVec3_2.x;

                        if (_X + Y < 0 || _X + Y == 0 && _X < 0) {
                          return new Quat(-_X, -Y, 0, 0);
                        } else {
                          return new Quat(_X, Y, 0, 0);
                        }
                      } else {
                        mid.y = fromDir.z;
                        mid.z = toDir.y;
                        mid.normalize();
                      }
          }

          Vec3.normalize(_tempVec3, toDir);
          Vec3.normalize(_tempVec3_2, mid);
          Quat.multiply(out, new Quat(-_tempVec3.x, -_tempVec3.y, -_tempVec3.z, 0), new Quat(_tempVec3_2.x, _tempVec3_2.y, _tempVec3_2.z, 0));
          return out;
        };

        MathUtil.deltaAngle = function deltaAngle(src, tar) {
          src = src % 360;
          tar = tar % 360;
          return tar - src > 180 ? src - tar : tar - src;
        } // axisAngle = Quat.fromAxisAngle
        ;

        MathUtil.axisAngle = function axisAngle(out, a1, angle) {
          var s = Math.sin(angle / 2);
          out = new Quat(a1.x * s, a1.y * s, a1.z * s, Math.cos(angle / 2));
          return out;
        } // Quat.lerp normalize out
        ;

        MathUtil.quatLerp = function quatLerp(out, a, b, t) {
          if (Quat.dot(a, b) < 0.0) {
            _tempQuat.set(-b.x, -b.y, -b.z, -b.w);
          } else {
            _tempQuat.set(b);
          }

          Quat.lerp(out, a, _tempQuat, MathUtil.clamp01(t));
          Quat.normalize(out, out);
          return out;
        } //  Vector sLerp
        // 	v(t) = k(t)*(v1 + t*(v2-v1))
        //  k(t) = |v1|/|v(t)|=|v1|/|v1+t*(v2-v1)|
        ;

        MathUtil.sLerp = function sLerp(out, a, b, t) {
          Vec3.subtract(_tempVec3, b, a);
          Vec3.multiplyScalar(_tempVec3, _tempVec3, t);
          Vec3.add(_tempVec3_2, a, _tempVec3);

          var k = a.length() / _tempVec3_2.length();

          Vec3.multiplyScalar(out, _tempVec3_2, k);
          return out;
        };

        MathUtil.orthoNormalize = function orthoNormalize(outA, outB, direction, center) {
          Vec3.normalize(_tempVec3, direction);
          Vec3.rotateY(outA, _tempVec3, center, 90);
          Vec3.cross(outB, outA, _tempVec3);
        };

        MathUtil.clampVec3 = function clampVec3(out, minVec, maxVec) {
          if (minVec === void 0) {
            minVec = null;
          }

          if (maxVec === void 0) {
            maxVec = null;
          }

          if (minVec) {
            if (out.x < minVec.x) {
              out.x = minVec.x;
            }

            if (out.y < minVec.y) {
              out.y = minVec.z;
            }

            if (out.z < minVec.y) {
              out.z = minVec.z;
            }
          }

          if (maxVec) {
            if (out.x > maxVec.x) {
              out.x = maxVec.x;
            }

            if (out.y > maxVec.y) {
              out.y = maxVec.z;
            }

            if (out.z > maxVec.y) {
              out.z = maxVec.z;
            }
          }

          return out;
        };

        return MathUtil;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/math.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports({
        RGBE2Linear: RGBE2Linear,
        lerp: lerp,
        powerOfTwo: powerOfTwo,
        roundUp: roundUp,
        sRGB2Linear: sRGB2Linear,
        vec3_ceil: vec3_ceil,
        vec3_floor: vec3_floor,
        vec3_max: vec3_max,
        vec3_min: vec3_min
      });

      cclegacy._RF.push({}, "c9667xadYhBUZ/AstRYtfMf", "math", undefined);

      function lerp(from, to, ratio, EPLISION) {
        if (EPLISION === void 0) {
          EPLISION = 0.01;
        }

        var v = from + (to - from) * ratio;

        if (Math.abs(to - v) <= EPLISION) {
          v = to;
        }

        return v;
      }

      function vec3_min(out, a, b) {
        out.x = Math.min(a.x, b.x);
        out.y = Math.min(a.y, b.y);
        out.z = Math.min(a.z, b.z);
        return out;
      }

      function vec3_max(out, a, b) {
        out.x = Math.max(a.x, b.x);
        out.y = Math.max(a.y, b.y);
        out.z = Math.max(a.z, b.z);
        return out;
      }

      function vec3_floor(out, a) {
        out.x = Math.floor(a.x);
        out.y = Math.floor(a.y);
        out.z = Math.floor(a.z);
        return out;
      }

      function vec3_ceil(out, a) {
        out.x = Math.ceil(a.x);
        out.y = Math.ceil(a.y);
        out.z = Math.ceil(a.z);
        return out;
      }

      function roundUp(numToRound, multiple) {
        if (multiple === 0) return numToRound;
        return Math.ceil(numToRound / multiple) * multiple;
      }

      function sRGB2Linear(v) {
        v /= 255;
        v = Math.pow(v, 2.2);
        return v;
      }

      function RGBE2Linear(rgbe, out) {
        var e = Math.pow(2.0, rgbe.w - 128.0) / 255;
        out.x *= e;
        out.y *= e;
        out.z *= e;
        out.w = 1;
      }

      function powerOfTwo(v) {
        var target = 1;

        while (target < v) {
          target *= 2;
        }

        return target;
      }

      var toHalf16 = exports('toHalf16', function () {
        var floatView = new Float32Array(1);
        var int32View = new Int32Array(floatView.buffer);
        /* This method is faster than the OpenEXR implementation (very often
         * used, eg. in Ogre), with the additional benefit of rounding, inspired
         * by James Tursa?s half-precision code. */

        return function toHalf16(val) {
          floatView[0] = val;
          var x = int32View[0];
          var bits = x >> 16 & 0x8000;
          /* Get the sign */

          var m = x >> 12 & 0x07ff;
          /* Keep one extra bit for rounding */

          var e = x >> 23 & 0xff;
          /* Using int is faster here */

          /* If zero, or denormal, or exponent underflows too much for a denormal
           * half, return signed zero. */

          if (e < 103) {
            return bits;
          }
          /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */


          if (e > 142) {
            bits |= 0x7c00;
            /* If exponent was 0xff and one mantissa bit was set, it means NaN,
             * not Inf, so make sure we set one mantissa bit too. */

            bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;
            return bits;
          }
          /* If exponent underflows but not too much, return a denormal */


          if (e < 113) {
            m |= 0x0800;
            /* Extra rounding may overflow and set mantissa to 0 and exponent
             * to 1, which is OK. */

            bits |= (m >> 114 - e) + (m >> 113 - e & 1);
            return bits;
          }

          bits |= e - 112 << 10 | m >> 1;
          /* Extra rounding. An overflow will set mantissa to 0 and increment
           * the exponent, which is OK. */

          bits += m & 1;
          return bits;
        };
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/move-camera-x.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, input, Input, KeyCode, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e7e17QFrg5Os5Tcfn68mMit", "move-camera-x", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var move_camera_x = exports('move_camera_x', (_dec = ccclass('move_camera_x'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(move_camera_x, _Component);

        function move_camera_x() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "speed", _descriptor, _assertThisInitialized(_this));

          _this._run = false;
          return _this;
        }

        var _proto = move_camera_x.prototype;

        _proto.start = function start() {
          var _this2 = this;

          input.on(Input.EventType.KEY_DOWN, function (e) {
            if (e.keyCode === KeyCode.KEY_M) {
              _this2._run = true;
            }
          });
        };

        _proto.update = function update(deltaTime) {
          if (!this._run) return;
          var pos = this.node.position;
          this.node.setPosition(pos.x + deltaTime * this.speed, pos.y, pos.z);
        };

        return move_camera_x;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/msg-events.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, Msg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "55111opCcxJ47T+RlZB1BDC", "msg-events", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MsgEvents = exports('MsgEvents', (_dec = ccclass('MsgEvents'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MsgEvents, _Component);

        function MsgEvents() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "msg", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = MsgEvents.prototype;

        _proto.start = function start() {
          Msg.bind(this.msg, this.setActive, this);
        };

        _proto.setActive = function setActive(active) {
          this.node.active = active;
        };

        return MsgEvents;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "msg", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/msg.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "67a38mOSWNH2YAjqnIAO/fp", "msg", undefined);
      /**
       * Msg
       */


      var Msg = exports('Msg', /*#__PURE__*/function () {
        function Msg() {}

        Msg.on = function on(key, fun) {
          if (!this._map[key]) {
            this._map[key] = [];
          }

          this._map[key].push(fun);
        };

        Msg.bind = function bind(key, fun, target) {
          fun = fun.bind(target);

          if (!this._map[key]) {
            this._map[key] = [];
          }

          this._map[key].push(fun);
        };

        Msg.off = function off(key, fun) {
          if (fun === null) {
            this._map[key] = [];
          } else {
            var index = this._map[key].indexOf(fun);

            this._map[key].splice(index, 1);
          }
        };

        Msg.emit = function emit(key, data) {
          var info = this._map[key];

          if (info) {
            info.forEach(function (item) {
              item(data);
            });
          }
        };

        return Msg;
      }());
      Msg._map = {};

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MsgPlayAnimation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCString, Animation, Component, Msg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "dd954Tk32ZHXJiMMOc2fI8e", "MsgPlayAnimation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MsgPlayAnimation = exports('MsgPlayAnimation', (_dec = ccclass('MsgPlayAnimation'), _dec2 = property(CCString), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MsgPlayAnimation, _Component);

        function MsgPlayAnimation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "animName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "msg", _descriptor2, _assertThisInitialized(_this));

          _this.animation = void 0;
          return _this;
        }

        var _proto = MsgPlayAnimation.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.animation = this.getComponent(Animation);
          Msg.on(this.msg, function () {
            var _this2$animation, _this2$animation2;

            (_this2$animation = _this2.animation) == null ? void 0 : _this2$animation.stop();
            (_this2$animation2 = _this2.animation) == null ? void 0 : _this2$animation2.play(_this2.animName);
          });
        };

        return MsgPlayAnimation;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'animation';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "msg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'msg_play_animation';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/music-compose-random.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './sound.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, AudioClip, CCFloat, AudioSource, math, randomRangeInt, Component, Sound;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      CCFloat = module.CCFloat;
      AudioSource = module.AudioSource;
      math = module.math;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
    }, function (module) {
      Sound = module.Sound;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "5c45c/8MHVK0I2YuVganX/d", "music-compose-random", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MusicComposeRandom = exports('MusicComposeRandom', (_dec = ccclass('MusicComposeRandom'), _dec2 = property([AudioClip]), _dec3 = property([CCFloat]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MusicComposeRandom, _Component);

        function MusicComposeRandom() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "clips", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "probability", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "time", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "least_count", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smooth", _descriptor5, _assertThisInitialized(_this));

          _this._selects = [];
          _this._curs = [];
          _this._t = 0;
          _this._audios = [];
          return _this;
        }

        var _proto = MusicComposeRandom.prototype;

        _proto.start = function start() {
          for (var i = 0; i < this.clips.length; i++) {
            var as = this.node.addComponent(AudioSource);
            as.clip = this.clips[i];
            as.volume = 0;
            as.loop = true;
            as.play();

            this._audios.push(as);

            this._curs.push(0);

            this._selects.push(1);
          }

          this.randomPlay();
        };

        _proto.update = function update(deltaTime) {
          if (this._t > this.time) {
            this._t -= this.time;
            this.randomPlay();
          }

          this._t += deltaTime;

          for (var i = 0; i < this._audios.length; i++) {
            this._curs[i] = math.lerp(this._curs[i], this._selects[i], deltaTime * this.smooth);
            this._audios[i].volume = this._curs[i] * Sound.volume;
          }
        };

        _proto.randomPlay = function randomPlay() {
          var count = 0;

          for (var i = 0; i < this.clips.length; i++) {
            if (Math.random() < this.probability[i]) {
              this._selects[i] = 1;
              count++;
            } else {
              this._selects[i] = 0;
            }
          }

          if (count === 0) {
            var select_one = randomRangeInt(0, this.clips.length);
            this._selects[select_one] = 1;
          }
        };

        return MusicComposeRandom;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "clips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "probability", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "time", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "least_count", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "smooth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/music-compose-state.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './sound.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, AudioClip, CCFloat, AudioSource, math, Component, Sound;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      CCFloat = module.CCFloat;
      AudioSource = module.AudioSource;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      Sound = module.Sound;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "12b52kXv5JPY6UG2G1Y0KyH", "music-compose-state", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MusicComposeState = exports('MusicComposeState', (_dec = ccclass('MusicComposeState'), _dec2 = property([AudioClip]), _dec3 = property(CCFloat), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MusicComposeState, _Component);

        function MusicComposeState() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "clips", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smooth", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "selects", _descriptor3, _assertThisInitialized(_this));

          _this._curs = [];
          _this._audios = [];
          return _this;
        }

        var _proto = MusicComposeState.prototype;

        _proto.start = function start() {
          for (var i = 0; i < this.clips.length; i++) {
            var as = this.node.addComponent(AudioSource);
            as.clip = this.clips[i];
            as.volume = 0;
            as.loop = true;
            as.play();

            this._audios.push(as);

            this._curs.push(0);
          }
        };

        _proto.update = function update(deltaTime) {
          for (var i = 0; i < this._audios.length; i++) {
            this._curs[i] = math.lerp(this._curs[i], this.selects[i], deltaTime * this.smooth);
            this._audios[i].volume = this._curs[i] * Sound.volume;
          }
        };

        return MusicComposeState;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "clips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "smooth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "selects", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/music-compose-value.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './sound.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, AudioClip, CCFloat, AudioSource, math, Component, Msg, Sound;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioClip = module.AudioClip;
      CCFloat = module.CCFloat;
      AudioSource = module.AudioSource;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Sound = module.Sound;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "0abe6myLSpHe5xkiK8Qe1jO", "music-compose-value", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MusicComposeValue = exports('MusicComposeValue', (_dec = ccclass('MusicComposeValue'), _dec2 = property([AudioClip]), _dec3 = property([CCFloat]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MusicComposeValue, _Component);

        function MusicComposeValue() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "clips", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "weight", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "smooth", _descriptor3, _assertThisInitialized(_this));

          _this._selects = [];
          _this._curs = [];
          _this._audios = [];
          _this._value = 0;
          return _this;
        }

        var _proto = MusicComposeValue.prototype;

        _proto.start = function start() {
          Msg.on('music_level_by_speed', this.setValue.bind(this));

          for (var i = 0; i < this.clips.length; i++) {
            var as = this.node.addComponent(AudioSource);
            as.clip = this.clips[i];
            as.volume = 0;
            as.loop = true;
            as.play();

            this._audios.push(as);

            this._curs.push(0);

            this._selects.push(1);
          }
        };

        _proto.onDestroy = function onDestroy() {
          Msg.off('music_level_by_speed', this.setValue.bind(this));
        };

        _proto.setValue = function setValue(speed) {
          this._value = speed;

          for (var i = 0; i < this.clips.length; i++) {
            if (this.weight[i] <= this._value) this._selects[i] = 1;else this._selects[i] = 0;
          }
        };

        _proto.update = function update(deltaTime) {
          for (var i = 0; i < this._audios.length; i++) {
            this._curs[i] = math.lerp(this._curs[i], this._selects[i], deltaTime * this.smooth);
            this._audios[i].volume = this._curs[i] * Sound.volume;
          }
        };

        return MusicComposeValue;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "clips", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "weight", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "smooth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/navigation-debugger.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, director, v3, Color, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      v3 = module.v3;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8cffeNbpr1GWIViXLS9wnvF", "navigation-debugger", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var navigation_debugger = exports('navigation_debugger', (_dec = ccclass('navigation_debugger'), _dec(_class = executeInEditMode(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(navigation_debugger, _Component);

        function navigation_debugger() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = navigation_debugger.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        _proto.editorUpdate = function editorUpdate() {
          var _director$root;

          var render = (_director$root = director.root) == null ? void 0 : _director$root.pipeline.geometryRenderer;
          render == null ? void 0 : render.addLine(v3(0, 0, 0), v3(3, 0, 3), Color.GREEN, false);
        };

        return navigation_debugger;
      }(Component)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/navigation-map.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "79294q72uBLCbRGlepQJ9Dg", "navigation-map", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var NavigationMap = exports('NavigationMap', (_dec = ccclass('NavigationMap'), _dec(_class = executeInEditMode(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NavigationMap, _Component);

        function NavigationMap() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.points = [];
          return _this;
        }

        var _proto = NavigationMap.prototype;

        _proto.__preload = function __preload() {//Navigation.init(this.node);
        };

        _proto.update = function update(deltaTime) {};

        _proto.updateEditModel = function updateEditModel() {
          console.log('navigation edit');
          this.linkChildNode(this.node);
        };

        _proto.linkChildNode = function linkChildNode(root) {
          var children = root.children;

          for (var i = 0; i < children.length - 1; i++) {
            var p0 = children[i];
            var p1 = children[i + 1];
            var pos0 = p0.position;
            var pos1 = p1.position; //let line = new geometry.Line(pos0.x, pos0.y, pos0.z, pos1.x, pos1.y, pos1.z);
            //const l0 = p0.getComponent(Line);
            //l0.positions[0] = pos0 as never;
            //l0.positions[1] = pos1 as never;
          }
        };

        return NavigationMap;
      }(Component)) || _class) || _class));
      /*
       export class Navigation {
           public static node:Node;
           public static init(_node:Node) {
             this.node = _node;
          }
           static calculateRandomPoint(curPos:Vec3) {
               // find closet point.
              var closet:Node | undefined = this.findChildren(this.node, curPos);
               if (closet === undefined) {
                  console.error('closet not find', curPos, this.node);
                  return [];
              }
               // random target node.
              const target:Node = this.randomChildren();
               // go target node.
              let paths:Vec3[] = [];
              paths.push(curPos);
              paths.push(closet.worldPosition);
              this.findTargetNode(paths, closet, target);
               return paths;
           }
           static findChildren(node:Node, curPos:Vec3) {
              let minDistance = Number.MAX_VALUE;
              const children = node.children;
              let minNode:Node | undefined = undefined;
              for(let i = 0; i < children.length; i++) {
                  const child = children[i];
                  if (node === child) continue;
                  const distance = Vec3.distance(curPos, child.worldPosition);
                  if (distance < minDistance) {
                      minNode = child;
                      minDistance = distance;
                  }
              }
              return minNode;
          }
           static randomChildren() {
              const randomIndex = randomRangeInt(0, this.node.children.length);
              return this.node.children[randomIndex];
          }
           static findTargetNode(paths:Vec3[], node:Node, target:Node) {
              const children = node.parent?.children ?? undefined;
              if (children === undefined) return;
              for(let i = 0; i < children.length; i++) {
                  paths.push(children[i].worldPosition);
                  if (children[i] === node) {
                      break;
                  }
              }
           } 
       }
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/navigation-point.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCFloat, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCFloat = module.CCFloat;
      Component = module.Component;
    }, null],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "54e2emPbVxIXpWxKORiO631", "navigation-point", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var NavigationPoint = exports('NavigationPoint', (_dec = ccclass('NavigationPoint'), _dec2 = property([Node]), _dec3 = property([CCFloat]), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NavigationPoint, _Component);

        function NavigationPoint() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "linkNodes", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "weights", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "radius", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "showRay", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "segment", _descriptor5, _assertThisInitialized(_this));

          _this._rays = void 0;
          return _this;
        }

        var _proto = NavigationPoint.prototype;

        _proto.onEnable = function onEnable() {};

        _proto.update = function update(deltaTime) {};

        return NavigationPoint;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "linkNodes", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "weights", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "radius", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "showRay", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "segment", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 20;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/navigation-points.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8f399fec+dJ96YEwmhKIlR4", "navigation-points", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var navigation_points = exports('navigation_points', (_dec = ccclass('NavigationPoints'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(navigation_points, _Component);

        function navigation_points() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = navigation_points.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        return navigation_points;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/navigation-region.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './json-tool.ts', './util.ts', './navigation-point.ts', './navigation-system.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, game, geometry, v3, Vec3, PhysicsSystem, Color, Component, JsonTool, UtilVec3, Gizmo, NavigationPoint, NavSystem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      game = module.game;
      geometry = module.geometry;
      v3 = module.v3;
      Vec3 = module.Vec3;
      PhysicsSystem = module.PhysicsSystem;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      JsonTool = module.JsonTool;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
      Gizmo = module.Gizmo;
    }, function (module) {
      NavigationPoint = module.NavigationPoint;
    }, function (module) {
      NavSystem = module.NavSystem;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "5a2dcZcWU9Iiru9JcsXaF7F", "navigation-region", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var NavigationRegion = exports('NavigationRegion', (_dec = ccclass('NavigationRegion'), _dec2 = property(Node), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NavigationRegion, _Component);

        function NavigationRegion() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "maxDistance", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "height", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxHeight", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slopHeight", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slopDistance", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mapBlockX", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mapBlockY", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mapBlockZ", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "testPath", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "testNode", _descriptor10, _assertThisInitialized(_this));

          _this.findPaths = Array();
          return _this;
        }

        var _proto = NavigationRegion.prototype;

        _proto.onEnable = function onEnable() {};

        _proto.refreshMapPoints = function refreshMapPoints() {
          var children = this.node.children;
          var data = {
            blockX: this.mapBlockX,
            blockY: this.mapBlockY,
            blockZ: this.mapBlockZ,
            count: children.length,
            nodeMap: {},
            nodes: [],
            links: [],
            weights: []
          };

          for (var i = 0; i < children.length; i++) {
            var child = children[i];
            child.name = "point_" + i;
            var navigationPoint = child.getComponent(NavigationPoint);

            if (!navigationPoint) {
              child.addComponent(NavigationPoint);
            }

            var worldPosition = child.worldPosition;
            var pos = {
              x: Number(worldPosition.x.toFixed(3)),
              y: Number(worldPosition.y.toFixed(3)),
              z: Number(worldPosition.z.toFixed(3)),
              id: child.getSiblingIndex(),
              radius: navigationPoint == null ? void 0 : navigationPoint.radius
            };
            var keyX = Math.floor(pos.x / this.mapBlockX);
            var keyY = Math.floor(pos.y / this.mapBlockY);
            var keyZ = Math.floor(pos.z / this.mapBlockZ);
            var key = keyX + "," + keyY + "," + keyZ;
            if (data.nodeMap[key] === undefined) data.nodeMap[key] = [];
            data.nodeMap[key].push(child.getSiblingIndex());
            data.nodes.push(pos);
            var linkInfo = this.calculateCircleLink(child);
            data.links.push(linkInfo.links);
            data.weights.push(linkInfo.weights);
          }

          console.log(JsonTool.toJson(data));

          if (this.testPath) {
            NavSystem.Init(data); // Test Random paths.
            //this.testRandomPath();
            // Test Find paths.

            var times = 10000;
            var time = game.totalTime;

            for (var _i = 0; _i < times; _i++) {
              this.testFindPath();
            }

            console.log('run ', times, ' time:', game.totalTime - time, ' ms');
          }
        };

        _proto.calculateCircleLink = function calculateCircleLink(node) {
          var children = this.node.children;
          var origin = node.worldPosition;
          var ray = new geometry.Ray();
          ray.o = node.worldPosition;
          var position = v3(0, 0, 0);
          var link = [];
          var weights = [];
          var linkIndex = [];

          for (var i = 0; i < children.length; i++) {
            var child = children[i];
            if (child === node) continue;
            UtilVec3.copy(position, child.worldPosition);
            ray.d = position.subtract(origin).normalize();
            var distance = Vec3.distance(origin, child.worldPosition);
            if (distance > this.maxDistance) continue;
            var heightDifference = Math.abs(origin.y - child.worldPosition.y);
            if (heightDifference > this.maxHeight) continue;
            if (heightDifference > this.slopHeight && distance > this.slopDistance) continue;

            if (!PhysicsSystem.instance.raycastClosest(ray, undefined, distance)) {
              link.push(child);
              linkIndex.push(child.getSiblingIndex());
              weights.push(Number(distance.toFixed(3)));
            }
          }

          var navigationPoint = node.getComponent(NavigationPoint);
          navigationPoint.linkNodes = link;
          navigationPoint.weights = weights;
          return {
            links: linkIndex,
            weights: weights
          };
        };

        _proto.update = function update(deltaTime) {};

        _proto.testFindPaths = function testFindPaths() {
          if (this.findPaths.length <= 0) return;
          var p0 = v3(0, 0, 0);
          var p1 = v3(0, 0, 0); //Gizmo.drawBox(p0, v3(10, 1, 10), Color.YELLOW);

          Gizmo.drawBox(this.findPaths[0], Vec3.ONE, Color.WHITE);

          for (var i = 1; i < this.findPaths.length; i++) {
            var start = this.findPaths[i - 1];
            var end = this.findPaths[i];
            UtilVec3.copy(p0, start);
            UtilVec3.copy(p1, end);
            p0.y += 0.1;
            p1.y += 0.1;
            var isLast = i === this.findPaths.length - 1;

            if (isLast) {
              Gizmo.drawBox(p1, Vec3.ONE, Color.RED);
            } else {
              Gizmo.drawCircle(p1, 1, Color.RED);
            }

            Gizmo.drawLine(p0, p1, Color.RED);
          }
        };

        _proto.testRandomPath = function testRandomPath() {
          var _this$testNode; // random point.


          var point = NavSystem.randomPoint();
          (_this$testNode = this.testNode) == null ? void 0 : _this$testNode.setWorldPosition(point.position);
          NavSystem.randomPaths(this.findPaths, this.testNode.worldPosition, 20, point.closestNavigationPon);
        };

        _proto.testFindPath = function testFindPath() {
          // random start.
          var start = NavSystem.randomPoint(); // random end.

          var end = NavSystem.randomPoint();
          NavSystem.findPaths(this.findPaths, start.position, -1, end.position); //console.log('find paths:', this.findPaths);
        };

        return NavigationRegion;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "maxDistance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "height", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "maxHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "slopHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "slopDistance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 7;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "mapBlockX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "mapBlockY", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "mapBlockZ", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 15;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "testPath", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "testNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/navigation-system.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator, randomRangeInt, v3, randomRange, Vec3;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      randomRangeInt = module.randomRangeInt;
      v3 = module.v3;
      randomRange = module.randomRange;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      exports('NavSystem', void 0);

      cclegacy._RF.push({}, "6d9eehPRgpNnpasDFvliTrC", "navigation-system", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var NavSystem;

      (function (_NavSystem) {
        var data;

        function Init(_data) {
          data = _data;
        }

        _NavSystem.Init = Init;

        function nodePosition(nodeID) {
          return data.nodes[nodeID];
        }

        _NavSystem.nodePosition = nodePosition;

        function randomPoint(size) {
          if (size === void 0) {
            size = 0.5;
          }

          var randomNode = randomRangeInt(0, data.count);
          var node = data.nodes[randomNode];
          var radius = node.radius - size;
          var position = v3(node.x + randomRange(-radius, radius), node.y, node.z + randomRange(-radius, radius));
          return {
            closestNavigationPon: randomNode,
            position: position
          };
        }

        _NavSystem.randomPoint = randomPoint;

        function randomPaths(paths, position, count, nearest) {
          if (nearest === void 0) {
            nearest = -1;
          }

          paths.length = 0;

          if (nearest === -1) {
            // find nearest point.
            nearest = findNearestPoint(position);
          }

          if (nearest === -1) {
            return [];
          } // search path.


          calculateRandomPaths(paths, nearest, count);
          return paths;
        }

        _NavSystem.randomPaths = randomPaths;

        function randomFirePath(paths, node) {
          paths.length = 0;
          var length = randomRangeInt(5, 11);
          var nodeData = data.nodes[node];

          for (var i = 0; i < length; i++) {
            var point = v3(nodeData.x + randomRange(-nodeData.radius, nodeData.radius), nodeData.y, nodeData.z + randomRange(-nodeData.radius, nodeData.radius));
            paths[i] = {
              x: point.x,
              y: point.y,
              z: point.z,
              id: nodeData.id,
              radius: nodeData.radius
            };
          }

          return paths;
        }

        _NavSystem.randomFirePath = randomFirePath;

        function findNearest(position) {
          var length = data.nodes.length;
          var minlength = Number.MAX_VALUE;
          var index = -1;

          for (var i = 0; i < length; i++) {
            var node = data.nodes[i];
            var curLen = Vec3.distance(position, node);

            if (curLen < minlength) {
              index = i;
              minlength = curLen;
            }
          }

          if (index === -1) {
            throw new Error("'can not find target node.");
          }

          return index;
        }

        _NavSystem.findNearest = findNearest;

        function findNearestPoint(position) {
          if (data == undefined) {
            console.warn(' Navigation data not init.');
            return 0;
          }

          return findNearest(position);
          /*
           let closestNavigationPon = -1;
          const x = Math.floor(position.x/data.blockX);
          const y = Math.floor(position.y/data.blockY);
          const z = Math.floor(position.z/data.blockZ);
           const key = `${x},${y},${z}`;
          const blockNodes = data.nodeMap[key];
          if(blockNodes === undefined) {
              console.warn(`Can not find block:${key}, position:${position}`)
              return -1;
          }
           let minDistance = Number.MAX_VALUE;
          //console.log(blockNodes);
          for (let i = 0; i < blockNodes.length; i++) {
              const nodeID = blockNodes[i]
              const nodePosition = data.nodes[nodeID];
              const currentDistance = Vec3.distance(position, nodePosition);
              if(currentDistance < minDistance) {
                  closestNavigationPon = nodeID;
              }
          } 
           return closestNavigationPon;
          */
        }

        function calculateRandomPaths(paths, start, count) {
          if (data == undefined) {
            console.warn(' Navigation data not init.');
            return 0;
          }

          paths[0] = data.nodes[start]; //console.log('start node:', start, paths[0]);

          var currentNode = start;

          for (var i = 1; i < count; i++) {
            // random children.
            var links = data.links[currentNode];
            var randomLinkIndex = randomRangeInt(0, links.length);
            currentNode = links[randomLinkIndex];
            paths[i] = data.nodes[currentNode]; //console.log('point_', currentNode, links, randomLinkIndex, paths[i]);
          }
        }

        function findPaths(paths, start, startNearest, end) {
          if (startNearest === void 0) {
            startNearest = -1;
          }

          paths.length = 0; // open table.

          var openTable = []; // close table.

          var closeTable = [];

          if (startNearest === -1) {
            // find nearest point.
            startNearest = findNearestPoint(start);
            openTable.push({
              node: startNearest,
              g: 0,
              h: 0,
              f: 0,
              parent: undefined
            });
          } // find nearest end point.


          var endNearest = findNearestPoint(end); //console.log('endNearest id', endNearest);
          // check start equal end.

          if (startNearest === endNearest) {
            paths.push(data.nodes[startNearest]);
            return paths;
          }

          var findMinCostPoint = function findMinCostPoint() {
            if (openTable.length <= 0) return -1;
            var cost = Number.MAX_VALUE;
            var minNode = -1;

            for (var i = 0; i < openTable.length; i++) {
              var current = openTable[i];

              if (current.f < cost) {
                minNode = i;
                cost = current.f;
              }
            }

            return minNode;
          };

          var checkInOpenTable = function checkInOpenTable(node) {
            for (var openTableI = 0; openTableI < openTable.length; openTableI++) {
              if (openTable[openTableI].node === node) return true;
            }

            return false;
          };

          var checkInCloseTable = function checkInCloseTable(node) {
            for (var closeTableI = 0; closeTableI < closeTable.length; closeTableI++) {
              if (closeTable[closeTableI].node === node) return true;
            }

            return false;
          };

          var pushOpenTable = function pushOpenTable(node, parent) {
            var nodeData = data.nodes[node]; // find target.

            if (nodeData.id == endNearest) {
              //console.log('find target.', nodeData.id, ' target id:', endNearest);
              return {
                node: node,
                g: 0,
                h: 0,
                f: 0,
                parent: parent
              };
            } //console.log(start, nodeData);


            var g = Vec3.distance(start, nodeData);
            var h = Vec3.distance(nodeData, end);
            var f = g + h; //console.log('distances start:', distanceStart, 'distances target:', distanceTarget, 'f:', f);

            openTable.push({
              node: node,
              f: f,
              g: g,
              h: h,
              parent: parent
            });
            return undefined;
          };

          var searchNeighbor = function searchNeighbor(parent) {
            var links = data.links[parent.node]; //console.log('node:', node, 'neighbor links', links);

            for (var i = 0; i < links.length; i++) {
              var linkNode = links[i]; // find in close table.
              // console.log('neighbor:', links[i], 'close table:', closeTable, 'state:', inCloseTable);

              if (checkInCloseTable(linkNode)) continue; // find in open table.

              if (checkInOpenTable(linkNode)) continue; // push in open table.

              var findPathPoint = pushOpenTable(linkNode, parent);
              if (findPathPoint) return findPathPoint;
            }

            return false;
          };

          var find = function find() {
            // find min cost point.
            var minNodeIndex = findMinCostPoint();

            if (minNodeIndex == -1) {
              //console.log('can not find target.');
              return null;
            } //console.log('open table:', openTable, 'minNode:', minNode);
            // open table.


            var minNode = openTable[minNodeIndex]; // remove open table.

            openTable.splice(minNodeIndex, 1); // insert close table.

            closeTable.push(minNode); // search neighbors.

            var findPathPoint = searchNeighbor(minNode);

            if (findPathPoint) {
              //console.log('find node target:', findPathPoint);
              return findPathPoint;
            }

            return undefined;
          };

          var calculateParent = function calculateParent(targetNode) {
            var parent = targetNode.parent;
            if (parent == undefined) return;
            var node = data.nodes[parent.node];
            paths.push(node);
            calculateParent(parent);
          };

          var index = -1;
          var max = 112;
          var findTargetPoint;

          while (true) {
            index++; //console.log('index:', index, 'close table count:', closeTable.length, 'open table count:', openTable.length);

            if (index > max) break;
            findTargetPoint = find();
            if (findTargetPoint !== undefined) break;
          } //calculate paths


          if (findTargetPoint) {
            //console.log('find target point:', findTargetPoint);
            // push end node.
            paths.push(data.nodes[endNearest]); // get end to start list.

            calculateParent(findTargetPoint);
            paths.reverse();
          }

          return paths;
        }

        _NavSystem.findPaths = findPaths;
      })(NavSystem || (NavSystem = exports('NavSystem', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/nodes.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('updateNextNodes', updateNextNodes);

      cclegacy._RF.push({}, "989c9cFlLdCZZuSYOOEi2k9", "nodes", undefined);

      function updateNextNodes(node, stages, outSlotID, nexts) {
        if (outSlotID === void 0) {
          outSlotID = 0;
        }

        nexts = nexts || node.getOutputNodes(outSlotID);

        if (!nexts) {
          return;
        }

        nexts.sort(function (a, b) {
          return a.pos[1] - b.pos[1];
        });

        for (var i = 0; i < nexts.length; i++) {
          var next = nexts[i];

          if (next.onUpdateStage) {
            next.onUpdateStage(node, stages);
          }
        }
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/notify.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './game.ts', './msg.ts', './singleton.ts', './data-structure.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, Game, Msg, Singleton, Queue;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Game = module.Game;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      Queue = module.Queue;
    }],
    execute: function () {
      cclegacy._RF.push({}, "12630emi6VP7bUT1a2ng/CZ", "notify", undefined);

      var Notify = exports('Notify', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(Notify, _Singleton);

        function Notify() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this.queue = new Queue();
          _this.cur = null;
          _this.counter = 0;
          return _this;
        }

        var _proto = Notify.prototype;

        _proto.push = function push(title, info, fun) {
          if (fun === void 0) {
            fun = null;
          }

          this.queue.push({
            'title': title,
            'info': info,
            'call': fun
          });
          this.counter++;
          if (Game.Instance._isInit) this.check_notify();
          Msg.on('msg_check_notify', this.check_notify.bind(this));
        };

        _proto.check_notify = function check_notify() {
          if (this.cur !== null && this.cur.call !== null) {
            this.cur.call();
          }

          if (this.counter === 0) return;

          if (this.queue.empty()) {
            this.counter = 0;
            this.cur = null;
          } else {
            this.cur = this.queue.pop();
            Msg.emit('push', 'notify');
          }
        };

        return Notify;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/npm.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './env'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy, resources, assetManager, path$1, EDITOR;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      resources = module.resources;
      assetManager = module.assetManager;
      path$1 = module.path;
    }, function (module) {
      EDITOR = module.EDITOR;
    }],
    execute: function () {
      exports({
        getAssetPath: getAssetPath,
        loadResource: loadResource,
        loadResources: loadResources,
        readFile: readFile,
        saveJson: saveJson,
        saveString: saveString
      });

      cclegacy._RF.push({}, "72fa1I8cXVJ6ZoMbd3O3NZf", "npm", undefined);

      var useNpm = globalThis.electron;
      var GAME_VIEW = exports('GAME_VIEW', cc.GAME_VIEW);
      var fse = exports('fse', useNpm && globalThis.require('fs-extra'));
      var path = exports('path', useNpm && globalThis.require('path'));
      var Editor = exports('Editor', useNpm && globalThis.Editor);
      var projectPath = exports('projectPath', EDITOR);
      var projectAssetPath = exports('projectAssetPath', EDITOR);
      var globby = exports('globby', useNpm && globalThis.require('globby'));
      var InPlayMode = exports('InPlayMode', GAME_VIEW || !EDITOR);
      var resUrl = exports('resUrl', 'db://pipeline/resources/');

      function readFile(path) {
        try {
          return fse.readFileSync(path, 'utf8');
        } catch (err) {
          console.error(err);
        }
      }

      function loadResource(_x, _x2) {
        return _loadResource.apply(this, arguments);
      }

      function _loadResource() {
        _loadResource = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(relativePath, cb) {
          var resourcePath;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getAssetPath(relativePath);

              case 2:
                resourcePath = _context.sent;
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  function onLoad(err, asset) {
                    if (err) {
                      // console.error(err);
                      reject(err);
                      return;
                    }

                    if (cb) {
                      cb(asset);
                    }

                    resolve(asset);
                  }

                  if (!InPlayMode) {
                    var metaPath = resourcePath + '.meta';

                    try {
                      var json = fse.readFileSync(metaPath, 'utf8');
                      json = JSON.parse(json);
                      assetManager.loadAny([json.uuid], onLoad);
                    } catch (err) {// console.error(err);
                    }
                  } else {
                    relativePath = path$1.changeExtname(relativePath, '');
                    resources.load(relativePath, onLoad);
                  }
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return _loadResource.apply(this, arguments);
      }

      function getAssetPath(_x3) {
        return _getAssetPath.apply(this, arguments);
      }

      function _getAssetPath() {
        _getAssetPath = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(relPath) {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return Editor.Message.request('asset-db', 'query-path', resUrl + relPath);

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return _getAssetPath.apply(this, arguments);
      }

      function saveJson(_x4, _x5) {
        return _saveJson.apply(this, arguments);
      }

      function _saveJson() {
        _saveJson = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(relativeJsonPath, json) {
          var jsonPath, data;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return getAssetPath(relativeJsonPath);

              case 2:
                jsonPath = _context3.sent;
                data = JSON.stringify(json, null, 4);
                fse.ensureDirSync(path.dirname(jsonPath));
                fse.writeFileSync(jsonPath, data);

              case 6:
              case "end":
                return _context3.stop();
            }
          }, _callee3);
        }));
        return _saveJson.apply(this, arguments);
      }

      function saveString(_x6, _x7) {
        return _saveString.apply(this, arguments);
      }

      function _saveString() {
        _saveString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(relativePath, str) {
          var dst;
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return getAssetPath(relativePath);

              case 2:
                dst = _context4.sent;
                fse.ensureDirSync(path.dirname(dst));
                fse.writeFileSync(dst, str);

              case 5:
              case "end":
                return _context4.stop();
            }
          }, _callee4);
        }));
        return _saveString.apply(this, arguments);
      }

      function loadResources(_x8) {
        return _loadResources.apply(this, arguments);
      }

      function _loadResources() {
        _loadResources = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(relDir) {
          var absDir, metaPaths;
          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) switch (_context6.prev = _context6.next) {
              case 0:
                if (InPlayMode) {
                  _context6.next = 11;
                  break;
                }

                _context6.next = 3;
                return getAssetPath(relDir);

              case 3:
                absDir = _context6.sent;
                metaPaths = globby.sync(absDir + '/**/*.meta');

                if (!metaPaths) {
                  _context6.next = 9;
                  break;
                }

                _context6.next = 8;
                return Promise.all(metaPaths.map( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(metaPath) {
                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                    while (1) switch (_context5.prev = _context5.next) {
                      case 0:
                        return _context5.abrupt("return", new Promise(function (resolve, reject) {
                          var json = fse.readFileSync(metaPath, 'utf8');
                          json = JSON.parse(json);
                          assetManager.loadAny([json.uuid], function (err, asset) {
                            if (err) {
                              return reject(err);
                            }

                            resolve(asset);
                          });
                        }));

                      case 1:
                      case "end":
                        return _context5.stop();
                    }
                  }, _callee5);
                }))));

              case 8:
                return _context6.abrupt("return", _context6.sent);

              case 9:
                _context6.next = 14;
                break;

              case 11:
                _context6.next = 13;
                return new Promise(function (resolve, reject) {
                  resources.loadDir(relDir, function (err, as) {
                    if (err) {
                      return reject(err);
                    }

                    resolve(as);
                  });
                });

              case 13:
                return _context6.abrupt("return", _context6.sent);

              case 14:
              case "end":
                return _context6.stop();
            }
          }, _callee6);
        }));
        return _loadResources.apply(this, arguments);
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/opaque-depth.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, MeshRenderer, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3da1afBsrBNmpjWmsKX3qIK", "opaque-depth", undefined);

      var ccclass = _decorator.ccclass,
          executeInEditMode = _decorator.executeInEditMode;
      var OpaqueDepth = exports('OpaqueDepth', {
        models: []
      });
      var OpaqueDepthObject = exports('OpaqueDepthObject', (_dec = ccclass('OpaqueDepthObject'), _dec(_class = executeInEditMode(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(OpaqueDepthObject, _Component);

        function OpaqueDepthObject() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = OpaqueDepthObject.prototype;

        _proto.onEnable = function onEnable() {
          var mr = this.getComponent(MeshRenderer);

          if (mr && mr.model) {
            OpaqueDepth.models.push(mr.model);
          }
        };

        _proto.onDisable = function onDisable() {
          var mr = this.getComponent(MeshRenderer);

          if (mr) {
            var index = OpaqueDepth.models.indexOf(mr.model);

            if (index !== -1) {
              OpaqueDepth.models.splice(index, 1);
            }
          }
        };

        return OpaqueDepthObject;
      }(Component)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/orbit-camera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec3, Quat, input, Input, Component, Vec2;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      input = module.input;
      Input = module.Input;
      Component = module.Component;
      Vec2 = module.Vec2;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "b3832Lkx/dOBZ7+Tok0/UO4", "orbit-camera", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          type = _decorator.type;
      var tempVec3 = new Vec3();
      var tempVec3_2 = new Vec3();
      var tempQuat = new Quat();
      var DeltaFactor = 1 / 200;
      var PositiveForward = new Vec3(0, 0, 1);
      var OrbitCamera = exports('default', (_dec = ccclass('OrbitCamera'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(OrbitCamera, _Component);

        function OrbitCamera() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "enableTouch", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rotateSpeed", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "xRotationRange", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_startRotation", _descriptor4, _assertThisInitialized(_this));

          _this._touched = false;
          _this._targetRotation = new Vec3();
          _this._rotation = new Quat();
          return _this;
        }

        var _proto = OrbitCamera.prototype;

        _proto.start = function start() {
          if (this.enableTouch) {
            input.on(Input.EventType.TOUCH_START, this.onTouchStart, this);
            input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
            input.on(Input.EventType.TOUCH_END, this.onTouchEnd, this);
          }

          this._targetRotation.set(this.node.eulerAngles);

          this._rotation.set(this.node.rotation);

          this.limitRotation();
        };

        _proto.onTouchStart = function onTouchStart() {
          this._targetRotation.set(this.node.eulerAngles);

          this._rotation.set(this.node.rotation);

          this._touched = true;
        };

        _proto.onTouchMove = function onTouchMove(touch) {
          // if (!this._touched) return;
          var delta = touch.getDelta();
          Quat.fromEuler(tempQuat, this._targetRotation.x, this._targetRotation.y, this._targetRotation.z);
          Quat.rotateX(tempQuat, tempQuat, delta.y * DeltaFactor);
          Quat.rotateAround(tempQuat, tempQuat, Vec3.UP, -delta.x * DeltaFactor);
          Quat.toEuler(this._targetRotation, tempQuat);
          this.limitRotation();
        };

        _proto.onTouchEnd = function onTouchEnd() {
          this._touched = false;
        };

        _proto.limitRotation = function limitRotation() {
          var rotation = this._targetRotation;

          if (rotation.x < this.xRotationRange.x) {
            rotation.x = this.xRotationRange.x;
          } else if (rotation.x > this.xRotationRange.y) {
            rotation.x = this.xRotationRange.y;
          }

          rotation.z = 0;
        };

        _proto.update = function update(dt) {
          var targetRotation = this._targetRotation;
          Quat.fromEuler(tempQuat, targetRotation.x, targetRotation.y, targetRotation.z);
          Quat.slerp(this._rotation, this._rotation, tempQuat, dt * 7 * this.rotateSpeed);
          this.node.rotation = this._rotation;
        };

        _createClass(OrbitCamera, [{
          key: "targetRotation",
          get: function get() {
            {
              this._startRotation.set(this._targetRotation);
            }
            return this._startRotation;
          },
          set: function set(v) {
            this._targetRotation.set(v);

            this._startRotation.set(v);
          }
        }]);

        return OrbitCamera;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "enableTouch", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rotateSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "xRotationRange", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec2(5, 70);
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "targetRotation", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "targetRotation"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_startRotation", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/output-texture.ts", ['cc', './graph.ts'], function (exports) {
  'use strict';

  var cclegacy, liteGraph;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      liteGraph = module.liteGraph;
    }],
    execute: function () {
      exports('OutputTexture', OutputTexture);

      cclegacy._RF.push({}, "bbbc3oRsgRNlqN8FfWh1qOm", "output-texture", undefined);

      function OutputTexture() {
        var self = this;
        self.addInput('RenderTexture', 'RenderTexture');
        self.addProperty('OutputName', '', undefined);
        self.addWidget("text", 'OutputName', '', 'OutputName');

        this.onUpdateStage = function updateStage(prev, stages) {
          var stage = prev.stage;
        };

        self.size = self.computeSize();
      }

      delete liteGraph.registered_node_types["pipeline/OutputTexture"];
      liteGraph.registerNodeType("pipeline/OutputTexture", OutputTexture);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pass-utils.ts", ['cc', './setting.ts'], function (exports) {
  'use strict';

  var cclegacy, rendering, gfx, settings;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      rendering = module.rendering;
      gfx = module.gfx;
    }, function (module) {
      settings = module.settings;
    }],
    execute: function () {
      cclegacy._RF.push({}, "39afbIbkWxEqKruoABsAaX6", "pass-utils", undefined);

      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;

      var PassUtils = /*#__PURE__*/function () {
        function PassUtils() {
          this.clearFlag = gfx.ClearFlagBit.COLOR;
          this.clearColor = new gfx.Color();
          this.clearDepthColor = new gfx.Color();
          this.ppl = void 0;
          this.camera = void 0;
          this.material = void 0;
          this.pass = void 0;
          this.rasterWidth = 0;
          this.rasterHeight = 0;
          this.layoutName = '';
        }

        var _proto = PassUtils.prototype;

        _proto.version = function version() {
          {
            settings.passPathName += "_" + this.pass.name + "_" + this.layoutName;
            this.pass.setVersion(settings.passPathName, settings.passVersion);
          }
        };

        _proto.addRasterPass = function addRasterPass(width, height, layoutName, passName) {
          var pass = this.ppl.addRasterPass(width, height, layoutName);
          pass.name = passName;
          this.pass = pass;
          this.rasterWidth = width;
          this.rasterHeight = height;
          this.layoutName = layoutName;
          return this;
        };

        _proto.setViewport = function setViewport(x, y, w, h) {
          this.pass.setViewport(new Viewport(x, y, w, h));
          return this;
        };

        _proto.addRasterView = function addRasterView(name, format, offscreen, residency) {
          if (offscreen === void 0) {
            offscreen = true;
          }

          if (!this.ppl.containsResource(name)) {
            if (format === gfx.Format.DEPTH_STENCIL) {
              this.ppl.addDepthStencil(name, format, this.rasterWidth, this.rasterHeight, ResourceResidency.MANAGED);
            } else {
              if (offscreen) {
                this.ppl.addRenderTarget(name, format, this.rasterWidth, this.rasterHeight, residency || ResourceResidency.MANAGED);
              } else {
                this.ppl.addRenderTexture(name, format, this.rasterWidth, this.rasterHeight, this.camera.window);
              }
            }
          }

          if (format !== gfx.Format.DEPTH_STENCIL) {
            if (!offscreen) {
              this.ppl.updateRenderWindow(name, this.camera.window);
            } else {
              this.ppl.updateRenderTarget(name, this.rasterWidth, this.rasterHeight);
            }
          } else {
            this.ppl.updateDepthStencil(name, this.rasterWidth, this.rasterHeight);
          }

          var clearOp = LoadOp.CLEAR;

          if (this.clearFlag === ClearFlagBit.NONE) {
            // if (JSB) {
            //     clearOp = LoadOp.DISCARD;
            // }
            // else {
            clearOp = LoadOp.LOAD; // }
          }

          var view;

          if (format === gfx.Format.DEPTH_STENCIL) {
            view = new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, clearOp, StoreOp.STORE, this.clearFlag, this.clearDepthColor);
          } else {
            view = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, clearOp, StoreOp.STORE, this.clearFlag, this.clearColor);
          }

          this.pass.addRasterView(name, view);
          return this;
        };

        _proto.setPassInput = function setPassInput(inputName, shaderName) {
          if (this.ppl.containsResource(inputName)) {
            var computeView = new ComputeView();
            computeView.name = shaderName;
            this.pass.addComputeView(inputName, computeView);
          }

          return this;
        };

        _proto.blitScreen = function blitScreen(passIdx) {
          if (passIdx === void 0) {
            passIdx = 0;
          }

          this.pass.addQueue(QueueHint.RENDER_TRANSPARENT).addCameraQuad(this.camera, this.material, passIdx, SceneFlags.NONE);
          return this;
        };

        return PassUtils;
      }();

      var passUtils = exports('passUtils', new PassUtils());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pipeline-assets.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './graph.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Material, path, Component, loadGraph;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      path = module.path;
      Component = module.Component;
    }, function (module) {
      loadGraph = module.loadGraph;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "18607fs9EVCRqm7WHMLFwTW", "pipeline-assets", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var PipelineAssets = exports('PipelineAssets', (_dec = ccclass('PipelineAssets'), _dec2 = property(Material), _dec3 = property(Material), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PipelineAssets, _Component);

        function PipelineAssets() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_materials", _descriptor, _assertThisInitialized(_this));

          _this.materialNames = [];
          _this.materialMap = new Map();
          return _this;
        }

        var _proto = PipelineAssets.prototype;

        _proto.getMaterial = function getMaterial(name) {
          return this.materialMap.get(name);
        };

        _proto.updateMaterials = function updateMaterials() {
          var _this2 = this;

          this.materialMap.clear();
          this.materialNames = this.materials.map(function (m) {
            if (!m) {
              return;
            }

            var name = path.basename(m.effectName);

            _this2.materialMap.set(name, m);

            return name;
          });
          this.materials.map(function (m) {});
        };

        _proto.onEnable = function onEnable() {
          globalThis.pipelineAssets = this;
          this.updateMaterials();

          try {
            loadGraph();
          } catch (err) {}
        };

        _proto.onDisable = function onDisable() {
          if (globalThis.pipelineAssets === this) {
            globalThis.pipelineAssets = undefined;
          }
        };

        _createClass(PipelineAssets, [{
          key: "materials",
          get: function get() {
            return this._materials;
          },
          set: function set(ms) {
            this._materials = ms;
            this.updateMaterials();
          }
        }]);

        return PipelineAssets;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_materials", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "materials", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "materials"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pipeline-graph.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './env', './graph.ts', './editor.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, sys, Component, EDITOR, showGraph;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      EDITOR = module.EDITOR;
    }, function (module) {
      showGraph = module.showGraph;
    }, null],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "3eb72YG65ZEiYl17GAdaqYq", "pipeline-graph", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var PiepelineGraph = exports('PiepelineGraph', (_dec = ccclass('custom.PiepelineGraph'), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PiepelineGraph, _Component);

        function PiepelineGraph() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_edit", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PiepelineGraph.prototype;

        _proto.start = function start() {
          this.onEditChanged();
        };

        _proto.onEditChanged = function onEditChanged() {
          var _this2 = this;

          if (!sys.isBrowser || !EDITOR) {
            return;
          }

          var show = this._edit;
          showGraph(show, function () {
            _this2._edit = false;

            if (globalThis.cce) {
              globalThis.cce.Node.emit('change', _this2.node);
            }
          });
        };

        _proto.update = function update() {};

        _createClass(PiepelineGraph, [{
          key: "edit",
          get: function get() {
            return this._edit;
          },
          set: function set(v) {
            this._edit = v;
            this.onEditChanged();
          }
        }]);

        return PiepelineGraph;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_edit", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "edit", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "edit"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pipeline-manager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './camera-setting.ts', './pass-utils.ts', './setting.ts', './href-setting.ts', './taa-stage.ts', './shadow-stage.ts', './utils2.ts'], function (exports) {
  'use strict';

  var _createClass, cclegacy, ReflectionProbeManager, Node, CCObject, director, ReflectionProbe, renderer, Mat4, rendering, game, Game, CameraSetting, passUtils, settings, HrefSetting, TAAStage, CustomShadowStage, getCameraUniqueID;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      ReflectionProbeManager = module.ReflectionProbeManager;
      Node = module.Node;
      CCObject = module.CCObject;
      director = module.director;
      ReflectionProbe = module.ReflectionProbe;
      renderer = module.renderer;
      Mat4 = module.Mat4;
      rendering = module.rendering;
      game = module.game;
      Game = module.Game;
    }, function (module) {
      CameraSetting = module.CameraSetting;
    }, function (module) {
      passUtils = module.passUtils;
    }, function (module) {
      settings = module.settings;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }, function (module) {
      TAAStage = module.TAAStage;
    }, function (module) {
      CustomShadowStage = module.CustomShadowStage;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cd2dfC7AGtO66cmENnWM2Q3", "pipeline-manager", undefined);

      var EditorCameras = [// 'scene:material-previewcamera',
        // 'Scene Gizmo Camera',
        // 'Editor UIGizmoCamera',
        // 'Main Camera'
      ];
      var CustomPipelineBuilder = exports('CustomPipelineBuilder', /*#__PURE__*/function () {
        function CustomPipelineBuilder() {
          this._shadowStage = void 0;
        }

        CustomPipelineBuilder.registerStages = function registerStages(name, stages) {
          this.pipelines.set(name, stages);
        };

        CustomPipelineBuilder.unregisterStages = function unregisterStages(name) {
          this.pipelines.set(name, null);
        };

        var _proto = CustomPipelineBuilder.prototype;

        _proto.setupReflectionProbe = function setupReflectionProbe(cameras, ppl) {
          if (ReflectionProbeManager === undefined) {
            return;
          }

          var probes = ReflectionProbeManager.probeManager.getProbes();

          for (var i = 0; i < probes.length; i++) {
            var probe = probes[i];

            if (probe.needRender) {
              settings.outputRGBE = true;
              settings.bakingReflection = true;
              var originCameraNode = probe.cameraNode;
              var originCamera = probe.camera;
              var originName = originCamera.name;

              if (!probe.cameras || !probe.cameras.length) {
                probe.cameras = [];

                for (var faceIdx = 0; faceIdx < 6; faceIdx++) {
                  probe._camera = null;
                  var tempNode = new Node(probe.node.name + ' Camera ' + faceIdx);
                  tempNode.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;
                  tempNode.parent = probe.node;

                  var camera = probe._createCamera(tempNode);

                  camera._name = originName + faceIdx;
                  probe.cameras.push(camera);
                }
              }

              for (var _faceIdx = 0; _faceIdx < 6; _faceIdx++) {
                var _camera = probe.cameras[_faceIdx];

                _camera.attachToScene(probe.node.scene.renderScene);

                var window = probe.bakedCubeTextures[_faceIdx].window;

                _camera.changeTargetWindow(window);

                _camera.setFixedSize(window.width, window.height);

                _camera.update();

                passUtils.camera = _camera;
                probe._camera = _camera;
                probe.cameraNode = _camera.node; //update camera dirction

                probe.updateCameraDir(_faceIdx);
                this.renderCamera(_camera, ppl, 'reflection-probe');
                var index = cameras.indexOf(_camera);

                if (index !== -1) {
                  cameras.splice(index, 1);
                }
              }

              probe._camera = originCamera;
              probe.cameraNode = originCameraNode;
              probe.needRender = false;
              settings.outputRGBE = false;
              settings.bakingReflection = false;
            }
          }
        };

        _proto.setup = function setup(cameras, ppl) {
          if (!globalThis.pipelineAssets) {
            return;
          }

          director.root.pipeline.pipelineSceneData.shadingScale = HrefSetting.shadingScale;
          settings.renderProfiler = false;
          passUtils.ppl = ppl;
          this.setupReflectionProbe(cameras, ppl);

          for (var i = 0; i < cameras.length; i++) {
            var camera = cameras[i];

            if (!camera.scene) {
              continue;
            }

            if (camera.node.getComponent(ReflectionProbe)) {
              continue;
            } // buildDeferred(camera, ppl);


            if (i === cameras.length - 1) {
              settings.renderProfiler = true;
            }

            passUtils.camera = camera;
            this.renderCamera(camera, ppl);
          }
        };

        _proto.renderCamera = function renderCamera(camera, ppl, pipelineName) {
          if (pipelineName === void 0) {
            pipelineName = '';
          } // const isGameView = camera.cameraUsage === renderer.scene.CameraUsage.GAME
          // || camera.cameraUsage === renderer.scene.CameraUsage.GAME_VIEW;


          if (EditorCameras.includes(camera.name)) {
            return;
          } // reset states


          {
            settings.tonemapped = false;
            settings.shadowStage = undefined;
            settings.gbufferStage = false;
            settings.passPathName = ''; // camera._submitInfo = null;
            // camera.culled = false;
          }
          var cameraSetting = camera.node.getComponent(CameraSetting);

          if (!pipelineName) {
            pipelineName = 'forward';

            if (cameraSetting) {
              pipelineName = cameraSetting.pipeline;
            } else if (camera.name === 'Editor Camera') {
              if (camera.projectionType === renderer.scene.CameraProjection.ORTHO) {
                pipelineName = 'forward';
              } else {
                pipelineName = 'main';
              }
            }
          } // else if (EDITOR && !EditorCameras.includes(camera.name)) {
          //     return;
          // }


          var stages = CustomPipelineBuilder.pipelines.get(pipelineName);

          if (!stages) {
            return;
          }

          var taaStage = stages.find(function (s) {
            return s instanceof TAAStage;
          });

          if (taaStage && taaStage.checkEnable()) {
            camera._isProjDirty = true;
            camera.update(true);
            camera.matProj.m12 += globalThis.TAASetting.instance.sampleOffset.x;
            camera.matProj.m13 += globalThis.TAASetting.instance.sampleOffset.y;
            Mat4.invert(camera.matProjInv, camera.matProj);
            Mat4.multiply(camera.matViewProj, camera.matProj, camera.matView);
            Mat4.invert(camera.matViewProjInv, camera.matViewProj);
            camera.frustum.update(camera.matViewProj, camera.matViewProjInv);
          }

          settings.passPathName += getCameraUniqueID(camera);
          var lastStage = undefined;

          for (var i = 0; i < stages.length; i++) {
            var stage = stages[i];

            if (!stage.checkEnable()) {
              continue;
            }

            stage.lastStage = lastStage; // settings.passPathName += '_' + stage.name;

            stage.render(camera, ppl);
            lastStage = stage;
          }
        };

        _createClass(CustomPipelineBuilder, [{
          key: "shadowStage",
          get: function get() {
            if (!this._shadowStage) {
              this._shadowStage = new CustomShadowStage();
            }

            return this._shadowStage;
          }
        }]);

        return CustomPipelineBuilder;
      }()); // if (JSB) {
      //     debugger;
      // }
      // if (!JSB) {

      CustomPipelineBuilder.pipelines = new Map();
      rendering.setCustomPipeline('Deferred', new CustomPipelineBuilder()); // }

      game.on(Game.EVENT_RENDERER_INITED, function () {
        director.root.pipeline.setMacroInt('CC_PIPELINE_TYPE', 1);
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pipeline.ts", ['cc', './pipeline-manager.ts', './graph.ts', './nodes.ts'], function () {
  'use strict';

  var cclegacy, CustomPipelineBuilder, liteGraph, updateNextNodes;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CustomPipelineBuilder = module.CustomPipelineBuilder;
    }, function (module) {
      liteGraph = module.liteGraph;
    }, function (module) {
      updateNextNodes = module.updateNextNodes;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a6363+LSghOI6H6d1ONOM/f", "pipeline", undefined);

      function Pipeline() {
        var self = this;
        self.addOutput('Camera Output', 'Camera Output');
        var stages = this.stages = [];
        var name = 'Pipeline_' + Date.now();
        CustomPipelineBuilder.registerStages(name, stages);
        self.addProperty('Name', name, undefined);
        self.addWidget("text", 'Name', name, 'Name');
        self.addProperty('Enable', true, undefined);
        self.addWidget("toggle", 'Enable', false, 'Enable');

        self.onPropertyChanged = function (name, value, prevalue) {
          if (name === 'Name') {
            CustomPipelineBuilder.unregisterStages(prevalue);
            CustomPipelineBuilder.registerStages(value, stages);
          }
        };

        self.onExecute = function () {
          stages.length = 0;

          if (!self.properties.Enable) {
            return;
          }

          updateNextNodes(self, stages);
        };

        self.size = self.computeSize();
      }

      delete liteGraph.registered_node_types["pipeline/Pipeline"];
      liteGraph.registerNodeType("pipeline/Pipeline", Pipeline);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/pool.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Vec2, Vec3, Vec4, Quat, Mat4;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
      Vec3 = module.Vec3;
      Vec4 = module.Vec4;
      Quat = module.Quat;
      Mat4 = module.Mat4;
    }],
    execute: function () {
      cclegacy._RF.push({}, "853590lOw9FE7+DhNoAzrtR", "pool", undefined);

      var PrivatePool = exports('PrivatePool', /*#__PURE__*/function () {
        function PrivatePool(ctor) {
          this._pool = [];
          this._ctor = void 0;
          this._ctor = ctor;
        }

        var _proto = PrivatePool.prototype;

        _proto.get = function get() {
          var instance = this._pool.pop();

          if (!instance) {
            instance = new this._ctor();
          }

          return instance;
        };

        _proto.put = function put(instance) {
          this._pool.push(instance);
        };

        return PrivatePool;
      }());
      var Pool = exports('Pool', {
        Vec2: new PrivatePool(Vec2),
        Vec3: new PrivatePool(Vec3),
        Vec4: new PrivatePool(Vec4),
        Quat: new PrivatePool(Quat),
        Mat4: new PrivatePool(Mat4)
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/preload.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './game.ts', './msg.ts', './res-cache.ts', './g-scene.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, CCString, Node, JsonAsset, ProgressBar, Label, lerp, Component, setDisplayStats, director, resources, instantiate, UITransform, Game, Msg, ResCache, GScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Node = module.Node;
      JsonAsset = module.JsonAsset;
      ProgressBar = module.ProgressBar;
      Label = module.Label;
      lerp = module.lerp;
      Component = module.Component;
      setDisplayStats = module.setDisplayStats;
      director = module.director;
      resources = module.resources;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
    }, function (module) {
      Game = module.Game;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      GScene = module.GScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "59e03flVchPcYI+RuBOA7xg", "preload", undefined);

      var ccclass = _decorator.ccclass,
          type = _decorator.type,
          property = _decorator.property;
      var Preload = exports('Preload', (_dec = ccclass('Preload'), _dec2 = type(CCString), _dec3 = type(Node), _dec4 = type(Node), _dec5 = property(JsonAsset), _dec6 = type(ProgressBar), _dec7 = type(Label), _dec8 = type(CCString), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Preload, _Component);

        function Preload() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "initGame", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabToLoad", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabRoot", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "removeWhenLoaded", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "savejson", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progress", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressInfo", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ui", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "inst_actions", _descriptor9, _assertThisInitialized(_this));

          _this.progressTarget = 0;
          _this.tasks = [];
          _this.startTime = 0;
          return _this;
        }

        var _proto = Preload.prototype;

        _proto.initGameTasks = function initGameTasks() {
          if (!this.initGame) return;
          this.startTime = performance.now();
          GScene.isPreload = true;
          Game.Instance.preInit(this.savejson);
          this.tasks.push({
            name: 'Loading Resources',
            task: function () {
              var _task = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      console.time('Load Resources');
                      _context.next = 3;
                      return new Promise(function (resolve) {
                        ResCache.Instance.load(function () {
                          Game.Instance.init();
                          setDisplayStats(false);
                          console.timeEnd('Load Resources');
                          resolve(null);
                        });
                      });

                    case 3:
                    case "end":
                      return _context.stop();
                  }
                }, _callee);
              }));

              function task() {
                return _task.apply(this, arguments);
              }

              return task;
            }()
          }, {
            name: 'Preload Scene',
            task: function () {
              var _task2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.next = 2;
                      return Promise.all(['scene-menu', 'scene-editor', 'scene-map'].map(function (sceneName) {
                        return new Promise(function (resolve) {
                          director.preloadScene(sceneName, function () {
                            resolve(null);
                          });
                        });
                      }));

                    case 2:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2);
              }));

              function task() {
                return _task2.apply(this, arguments);
              }

              return task;
            }()
          }, {
            name: 'Preload Material',
            task: function () {
              var _task3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
                return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                  while (1) switch (_context3.prev = _context3.next) {
                    case 0:
                      _context3.next = 2;
                      return new Promise(function (resolve) {
                        resources.loadDir('materials', function () {
                          resolve(null);
                        });
                      });

                    case 2:
                      _context3.next = 4;
                      return new Promise(function (resolve) {
                        resources.loadDir('preload_prefabs', function (err, prefabs) {
                          prefabs.forEach(function (p) {
                            var n = instantiate(p);
                            n.parent = director.getScene();
                            n.parent = null;
                          });
                          resolve(null);
                        });
                      });

                    case 4:
                    case "end":
                      return _context3.stop();
                  }
                }, _callee3);
              }));

              function task() {
                return _task3.apply(this, arguments);
              }

              return task;
            }()
          });
        };

        _proto.load = /*#__PURE__*/function () {
          var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            var _this2 = this;

            var lights, i;
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  GScene.isPreload = true;

                  if (this.progress) {
                    this.progress.getComponent(UITransform);
                    this.progress.progress = 0;
                  }

                  this.initGameTasks();
                  this.tasks;
                  lights = [];
                  _context4.next = 7;
                  return new Promise(function (resolve) {
                    var i = setInterval(function () {
                      if (1 - _this2.progress.progress < 0.01) {
                        resolve(null);
                        clearInterval(i);
                      }
                    });
                  });

                case 7:
                  lights.forEach(function (l) {
                    l.node.active = true;
                  });

                  for (i = 0; i < this.removeWhenLoaded.length; i++) {
                    this.removeWhenLoaded[i].active = false;
                  }

                  GScene.isPreload = false;
                  GScene.isLoadScene = false;
                  _context4.next = 13;
                  return new Promise(function (resolve) {
                    setTimeout(function () {
                      resolve(null);
                    }, 1000);
                  });

                case 13:
                  // if (profiler._stats) {
                  //     (profiler._stats as any).fps.counter._accumValue = 120
                  // }
                  // setDisplayStats(Save.Instance._cur && Save.Instance._cur.debugIndex)
                  if (this.initGame) {
                    Msg.emit('preload-inited-game', this.startTime);
                  }

                case 14:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));

          function load() {
            return _load.apply(this, arguments);
          }

          return load;
        }();

        _proto.start = /*#__PURE__*/function () {
          var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.load();

                case 2:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, this);
          }));

          function start() {
            return _start.apply(this, arguments);
          }

          return start;
        }();

        _proto.update = function update(deltaTime) {
          if (this.progress) {
            this.progress.progress = lerp(this.progress.progress, this.progressTarget, deltaTime);
          }
        };

        return Preload;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "initGame", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "prefabToLoad", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "prefabRoot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "removeWhenLoaded", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "savejson", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "progress", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "progressInfo", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "ui", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "inst_actions", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/projectile-grenade.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './damage-core.ts', './sound.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Vec3, Collider, RigidBody, v3, Component, calculateDamageNode, Sound;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Vec3 = module.Vec3;
      Collider = module.Collider;
      RigidBody = module.RigidBody;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      calculateDamageNode = module.calculateDamageNode;
    }, function (module) {
      Sound = module.Sound;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "b56c0MoOdlHyKrrs0ShL+YC", "projectile-grenade", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ProjectileGrenade = exports('ProjectileGrenade', (_dec = ccclass('ProjectileGrenade'), _dec2 = property(CCFloat), _dec3 = property(Vec3), _dec4 = property(Collider), _dec5 = property(RigidBody), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ProjectileGrenade, _Component);

        function ProjectileGrenade() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._data = void 0;
          _this._size = v3(1, 1, 1);

          _initializerDefineProperty(_this, "explodeTime", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "endSize", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "collider", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rigidbody", _descriptor4, _assertThisInitialized(_this));

          _this.updateFunction = void 0;
          _this.actor = void 0;
          return _this;
        }

        var _proto = ProjectileGrenade.prototype;

        _proto.onThrow = function onThrow(weaponData, force, shootActor) {
          var _this$rigidbody;

          this._data = weaponData;
          this.actor = shootActor;
          (_this$rigidbody = this.rigidbody) == null ? void 0 : _this$rigidbody.applyImpulse(force);
          this.updateFunction = this.waitExplode;
        };

        _proto.onExplode = function onExplode() {
          this.collider.isTrigger = true;
          this.rigidbody.useGravity = false;
          this.updateFunction = this.exploding;
          this.collider.on('onTriggerEnter', this.onTriggerEnter, this);
          Sound.on(this._data.sound_explode);
        };

        _proto.onExplodeEnd = function onExplodeEnd() {
          this.updateFunction = undefined;
          this.collider.off('onTriggerEnter', this.onTriggerEnter, this);
          this.node.active = false;
        };

        _proto.onTriggerEnter = function onTriggerEnter(event) {
          var hitPoint = event.otherCollider.node.getWorldPosition();
          calculateDamageNode(this._data, event.otherCollider.node, hitPoint, this.actor);
        };

        _proto.waitExplode = function waitExplode(deltaTime) {
          this.explodeTime -= deltaTime;

          if (this.explodeTime <= 0) {
            this.onExplode();
          }
        };

        _proto.exploding = function exploding(deltaTime) {
          Vec3.lerp(this._size, this._size, this.endSize, deltaTime * 5);
          this.node.setWorldScale(this._size);

          if (Math.abs(this._size.x - this.endSize.x) < 0.1) {
            this.onExplodeEnd();
          }
        };

        _proto.update = function update(deltaTime) {
          if (this.updateFunction !== undefined) this.updateFunction(deltaTime);
        };

        return ProjectileGrenade;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "explodeTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "endSize", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(6, 6, 6);
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "collider", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rigidbody", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/raycast-gpu.ts", ['cc'], function (exports) {
  'use strict';

  var Mat4, cclegacy;
  return {
    setters: [function (module) {
      Mat4 = module.Mat4;
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bb282UvgvBGcLg+YL3yYbAL", "raycast-gpu", undefined);

      function normalizeGPU(v) {
        var d = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
        d = 1 / Math.sqrt(d);
        return [v[0] * d, v[1] * d, v[2] * d];
      }

      function crossGPU(a, b) {
        var ax = a[0],
            ay = a[1],
            az = a[2];
        var bx = b[0],
            by = b[1],
            bz = b[2];
        return [ay * bz - az * by, az * bx - ax * bz, ax * by - ay * bx];
      }

      function dotGPU(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
      }

      function lengthGPU(a) {
        return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
      }

      function newVec3(x, y, z) {
        return [x, y, z];
      }

      function subtract(a, b) {
        return [a[0] - b[0], a[1] - b[1], a[2] - b[2]];
      }

      function add(a, b) {
        return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];
      }

      function rayAABB(o, d, min, max) {
        var ix = 1 / d[0];
        var iy = 1 / d[1];
        var iz = 1 / d[2];
        var t1 = (min[0] - o[0]) * ix;
        var t2 = (max[0] - o[0]) * ix;
        var t3 = (min[1] - o[1]) * iy;
        var t4 = (max[1] - o[1]) * iy;
        var t5 = (min[2] - o[2]) * iz;
        var t6 = (max[2] - o[2]) * iz;
        var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
        var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6));

        if (tmax < 0 || tmin > tmax) {
          return 0;
        }

        return tmin > 0 ? tmin : tmax; // ray origin inside aabb
      }

      function mul(a, scale) {
        return [a[0] * scale, a[1] * scale, a[2] * scale];
      }

      function mulV3(a, b) {
        return [a[0] * b[0], a[1] * b[1], a[2] * b[2]];
      }

      function rayTriangle(ro, rd, v0, v1, v2) {
        var EPSILON = 10e-6;
        var ab = subtract(v1, v0);
        var ac = subtract(v2, v0);
        var pvec = crossGPU(rd, ac);
        var det = dotGPU(ab, pvec);

        if (det < EPSILON &&
        /*!doubleSided ||*/
        det > -EPSILON) {
          return 0;
        }

        var inv_det = 1 / det;
        var tvec = subtract(ro, v0);
        var u = dotGPU(tvec, pvec) * inv_det;

        if (u < -EPSILON || u > 1 + EPSILON) {
          return 0;
        }

        var qvec = crossGPU(tvec, ab);
        var v = dotGPU(rd, qvec) * inv_det;

        if (v < -EPSILON || u + v > 1 + EPSILON) {
          return 0;
        }

        var t = dotGPU(ac, qvec) * inv_det;
        return t < 0 ? 0 : t;
      }

      function inverseMat4(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33) {
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

        if (det === 0) {
          return createEmptyMat4();
        }

        det = 1.0 / det;
        var out = createEmptyMat4();
        out[0][0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out[0][1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out[0][2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out[0][3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        out[1][0] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out[1][1] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out[1][2] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out[1][3] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        out[2][0] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out[2][1] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out[2][2] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        out[2][3] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        out[3][0] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        out[3][1] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        out[3][2] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        out[3][3] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return out;
      }

      function createEmptyMat4() {
        return [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];
      }

      function initMat4(m, start) {
        var arr = createEmptyMat4();

        for (var x = 0; x < 4; x++) {
          for (var y = 0; y < 4; y++) {
            arr[x][y] = m[y + x * 4 + start];
          }
        }

        return arr;
      }

      function v3_lv3(v, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        var im = inverseMat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
        var x = v[0];
        var y = v[1];
        var z = v[2];
        var rhw = im[0][3] * x + im[1][3] * y + im[2][3] * z + im[3][3];
        rhw = rhw !== 0 ? Math.abs(1 / rhw) : 1;
        var out = newVec3((im[0][0] * x + im[1][0] * y + im[2][0] * z + im[3][0]) * rhw, (im[0][1] * x + im[1][1] * y + im[2][1] * z + im[3][1]) * rhw, (im[0][2] * x + im[1][2] * y + im[2][2] * z + im[3][2]) * rhw);
        return out;
      }

      var _gpu;

      function getGPU() {
        if (!_gpu) {
          // @ts-ignore
          _gpu = new GPU({// mode: 'dev'
            // mode: 'gpu'
            // mode: 'webgl'
            // mode: 'webgl2'
          });

          _gpu.addFunction(newVec3);

          _gpu.addFunction(subtract);

          _gpu.addFunction(add);

          _gpu.addFunction(createEmptyMat4);

          _gpu.addFunction(initMat4);

          _gpu.addFunction(inverseMat4);

          _gpu.addFunction(v3_lv3);

          _gpu.addFunction(rayTriangle);

          _gpu.addFunction(mul);

          _gpu.addFunction(mulV3);

          _gpu.addFunction(rayAABB);

          _gpu.addFunction(dotGPU);

          _gpu.addFunction(normalizeGPU);

          _gpu.addFunction(lengthGPU);

          _gpu.addFunction(crossGPU);
        }

        return _gpu;
      }

      var _kernel;

      var _meshBuffer;

      var _subModelCount = 0;
      var raycastGpu = exports('default', {
        createKernel: function createKernel(models, maxDirection, cornersCount) {
          var subModels = [];

          for (var mi = 0; mi < models.length; mi++) {
            var m = models[mi];

            for (var smi = 0; smi < m.subModels.length; ++smi) {
              subModels.push(m.subModels[smi]);
            }
          }

          _subModelCount = subModels.length;
          var directionSize = Math.floor(Math.sqrt(maxDirection)) + 1;
          var threadSize = [directionSize, directionSize, cornersCount]; // @ts-ignore

          var gpu = getGPU(); // @ts-ignore

          _kernel = gpu.createKernel(function (buffer, norners, points, subModelCount) {
            // @ts-ignore
            var nornerOffset = this.thread.z * 3;
            var ro = newVec3(norners[nornerOffset + 0], norners[nornerOffset + 1], norners[nornerOffset + 2]); // @ts-ignore

            var pointsOffset = (this.thread.x + this.thread.y * this.constants.threadXCount) * 3;
            var point = newVec3(points[pointsOffset], points[pointsOffset + 1], points[pointsOffset + 2]);
            var rd = subtract(point, ro);
            rd = normalizeGPU(rd);
            var closedDistance = 10e6;
            var closedModelIndex = -1;
            var subModelOffset = 0;
            var testResult = -1;
            var subModelIndex = 0;
            var maxIBCount = -1;
            var ibIndex = 0;

            while (subModelIndex < subModelCount) {
              while (subModelIndex < subModelCount) {
                var vbOffset = buffer[subModelOffset++];
                var vbCount = buffer[subModelOffset++];
                var ibOffset = buffer[subModelOffset++];
                var ibCount = buffer[subModelOffset++];
                var modelIndex = buffer[subModelOffset++]; // model info

                var modelOffset = buffer[subModelOffset++];
                var mat = initMat4(buffer, modelOffset);
                modelOffset += 16;
                var worldScale = newVec3(buffer[modelOffset++], buffer[modelOffset++], buffer[modelOffset++]); // broad phase

                var worldBoundCenter = newVec3(buffer[modelOffset++], buffer[modelOffset++], buffer[modelOffset++]);
                var worldBoundHalfE = newVec3(buffer[modelOffset++], buffer[modelOffset++], buffer[modelOffset++]);
                var broadPhaseDistance = rayAABB(ro, rd, subtract(worldBoundCenter, worldBoundHalfE), add(worldBoundCenter, worldBoundHalfE));

                if (broadPhaseDistance <= 0) {
                  subModelIndex++;
                  continue;
                }

                testResult = -2; // narraw phase

                var lro = v3_lv3(ro, mat[0][0], mat[0][1], mat[0][2], mat[0][3], mat[1][0], mat[1][1], mat[1][2], mat[1][3], mat[2][0], mat[2][1], mat[2][2], mat[2][3], mat[3][0], mat[3][1], mat[3][2], mat[3][3]);
                var lrd = v3_lv3(point, mat[0][0], mat[0][1], mat[0][2], mat[0][3], mat[1][0], mat[1][1], mat[1][2], mat[1][3], mat[2][0], mat[2][1], mat[2][2], mat[2][3], mat[3][0], mat[3][1], mat[3][2], mat[3][3]);
                lrd = subtract(lrd, lro);
                lrd = normalizeGPU(lrd);
                var distanceScale = lengthGPU(mulV3(lrd, worldScale));
                maxIBCount = Math.max(maxIBCount, ibCount);
                ibIndex = 0;

                while (ibIndex < ibCount) {
                  while (ibIndex < ibCount) {
                    var v1 = buffer[ibOffset + ibIndex] * 3;
                    var v2 = buffer[ibOffset + ibIndex + 1] * 3;
                    var v3 = buffer[ibOffset + ibIndex + 2] * 3;
                    var a = newVec3(buffer[vbOffset + v1], buffer[vbOffset + v1 + 1], buffer[vbOffset + v1 + 2]);
                    var b = newVec3(buffer[vbOffset + v2], buffer[vbOffset + v2 + 1], buffer[vbOffset + v2 + 2]);
                    var c = newVec3(buffer[vbOffset + v3], buffer[vbOffset + v3 + 1], buffer[vbOffset + v3 + 2]);
                    var distance = rayTriangle(lro, lrd, a, b, c);
                    distance *= distanceScale;

                    if (distance > 0) {
                      testResult = -3;

                      if (distance < closedDistance) {
                        closedDistance = distance;
                        closedModelIndex = modelIndex;
                      }
                    }

                    ibIndex += 3;
                  }
                }

                subModelIndex++;
              }
            }

            testResult = -maxIBCount;

            if (closedModelIndex < 0) {
              closedModelIndex = testResult;
            }

            return closedModelIndex;
          }, {
            constants: {
              threadXCount: threadSize[0],
              threadYCount: threadSize[1],
              cornersCount: cornersCount
            },
            output: threadSize // output: [maxDirection, cornersCount],

          });
          this.createMeshBuffer(models);

          if (!_gpu._hacked) {
            _gpu._hacked = true;

            var _loop = function _loop() {
              if (typeof _gpu.context[name] === 'function') {
                var _ori = _gpu.context[name];

                _gpu.context[name] = function () {
                  // if (name === 'texStorage2D') {
                  //     var b = 1;
                  // }
                  // if (name === 'bufferSubData') {
                  //     var b = 1;
                  // }
                  // if (name === 'bufferData') {
                  //     var b = 1;
                  // }
                  // if (name === 'useProgram') {
                  //     var b = 1;
                  // }
                  // if (name === 'uniform1f') {
                  //     var b = 1;
                  //     if (arguments[1] === 1) {
                  //         debugger;
                  //     }
                  // }
                  // let args = '';//'   : '
                  // // for (var i = 0; i < arguments.length; i++) {
                  // //     args += arguments[i] + ', '
                  // // }
                  // console.time('--- gl.' + name + args)
                  var ret = _ori.apply(_gpu.context, arguments); // console.timeEnd('--- gl.' + name + args)


                  return ret;
                };
              }
            };

            for (var name in _gpu.context) {
              _loop();
            }
          } // console.time('_kernel.build');
          // _kernel.build(_meshBuffer, new Array(cornersCount * 3).fill(0), new Array(maxDirection * 3).fill(0))
          // console.timeEnd('_kernel.build');

        },
        createMeshBuffer: function createMeshBuffer(models) {
          console.time('prepare buffers');
          var subModels = [];
          var meshes = [];
          var bufferCount = 0;
          var submodelBuffers = [];
          var modelBuffers = [];

          for (var mi = 0; mi < models.length; mi++) {
            var m = models[mi];

            for (var smi = 0; smi < m.subModels.length; ++smi) {
              subModels.push(m.subModels[smi]);
              var subMesh = m.subModels[smi].subMesh;
              var subMeshAny = subMesh;
              var meshIndex = meshes.indexOf(subMesh);

              if (meshIndex === -1) {
                meshIndex = meshes.length;
                meshes.push(subMesh);
                subMeshAny._vbOffset = bufferCount;
                subMeshAny._vbCount = subMesh.geometricInfo.positions.length;
                bufferCount += subMesh.geometricInfo.positions.length;
                subMeshAny._ibOffset = bufferCount;
                subMeshAny._ibCount = subMesh.geometricInfo.indices.length;
                bufferCount += subMesh.geometricInfo.indices.length;
              }

              submodelBuffers.push(subMeshAny._vbOffset);
              submodelBuffers.push(subMeshAny._vbCount);
              submodelBuffers.push(subMeshAny._ibOffset);
              submodelBuffers.push(subMeshAny._ibCount);
              submodelBuffers.push(mi);
              submodelBuffers.push(modelBuffers.length);
            }

            Mat4.toArray(modelBuffers, m.node.worldMatrix, modelBuffers.length);
            var worldScale = m.node.worldScale;
            modelBuffers.push(worldScale.x, worldScale.y, worldScale.z);
            var center = m.worldBounds.center;
            var halfExtents = m.worldBounds.halfExtents;
            modelBuffers.push(center.x, center.y, center.z);
            modelBuffers.push(halfExtents.x, halfExtents.y, halfExtents.z);
          }

          var extraInfoCount = 1;
          _meshBuffer = new Float32Array(extraInfoCount + bufferCount + modelBuffers.length + submodelBuffers.length);

          for (var i = 0; i < submodelBuffers.length; i += 6) {
            submodelBuffers[i] += submodelBuffers.length + modelBuffers.length;
            submodelBuffers[i + 2] += submodelBuffers.length + modelBuffers.length;
            submodelBuffers[i + 5] += submodelBuffers.length;
          }

          _meshBuffer.set(submodelBuffers);

          _meshBuffer.set(modelBuffers, submodelBuffers.length);

          var triangleCount = 0;
          var bufferOffset = 0;
          meshes.forEach(function (m) {
            _meshBuffer.set(m.geometricInfo.positions, bufferOffset + submodelBuffers.length + modelBuffers.length);

            bufferOffset += m.geometricInfo.positions.length;

            _meshBuffer.set(m.geometricInfo.indices, bufferOffset + submodelBuffers.length + modelBuffers.length);

            bufferOffset += m.geometricInfo.indices.length;
            triangleCount += m.geometricInfo.indices.length / 3;
          });
          console.timeEnd('prepare buffers');
          console.log('submodelBuffers.length : ' + submodelBuffers.length);
          console.log('modelBuffers.length : ' + modelBuffers.length);
          console.log('_meshBuffer.length : ' + _meshBuffer.length);
        },
        raycastModels: function raycastModels(models, froms, points) {
          var resultModels = [];

          if (!_kernel) {
            return resultModels;
          }

          var pointsBuffer = [];
          points.forEach(function (d) {
            return pointsBuffer.push(d.x, d.y, d.z);
          });
          var fromsBuffer = [];
          froms.forEach(function (f) {
            return fromsBuffer.push(f.x, f.y, f.z);
          }); // console.time('build _kernel');
          // _kernel.build.apply(_kernel, [_meshBuffer, fromsBuffer, pointsBuffer, _subModelCount]);
          // console.timeEnd('build _kernel');
          // console.time('do _kernel');

          var raycastResults = _kernel(_meshBuffer, fromsBuffer, pointsBuffer, _subModelCount); // console.timeEnd('do _kernel');


          raycastResults.forEach(function (results) {
            results.forEach(function (results) {
              results.forEach(function (index) {
                var model = models[index];

                if (model && resultModels.indexOf(model) === -1) {
                  resultModels.push(model);
                }
              });
            });
          });
          return resultModels;
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/raycast.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createForOfIteratorHelperLoose, Layers, renderer, Mat4, Vec3, cclegacy, geometry, gfx;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      Layers = module.Layers;
      renderer = module.renderer;
      Mat4 = module.Mat4;
      Vec3 = module.Vec3;
      cclegacy = module.cclegacy;
      geometry = module.geometry;
      gfx = module.gfx;
    }],
    execute: function () {
      cclegacy._RF.push({}, "660470/Qm1MiZ+cla3ojBaJ", "raycast", undefined);

      var intersect = geometry.intersect,
          Ray = geometry.Ray,
          Triangle = geometry.Triangle;
      var resultModels = [];
      var m4 = new Mat4();
      var modelRay = new Ray();
      var tri = Triangle.create();
      var v3 = new Vec3();
      var narrowDis = Infinity;

      var narrowphase = function narrowphase(vb, ib, pm, sides, distance) {
        if (distance === void 0) {
          distance = Infinity;
        }

        narrowDis = distance;

        if (pm === gfx.PrimitiveMode.TRIANGLE_LIST) {
          var cnt = ib.length;

          for (var j = 0; j < cnt; j += 3) {
            var i0 = ib[j] * 3;
            var i1 = ib[j + 1] * 3;
            var i2 = ib[j + 2] * 3;
            Vec3.set(tri.a, vb[i0], vb[i0 + 1], vb[i0 + 2]);
            Vec3.set(tri.b, vb[i1], vb[i1 + 1], vb[i1 + 2]);
            Vec3.set(tri.c, vb[i2], vb[i2 + 1], vb[i2 + 2]);
            var dist = intersect.rayTriangle(modelRay, tri, sides);

            if (dist <= 0 || dist >= narrowDis) {
              continue;
            }

            narrowDis = dist;
          }
        } else if (pm === gfx.PrimitiveMode.TRIANGLE_STRIP) {
          var _cnt = ib.length - 2;

          var rev = 0;

          for (var _j = 0; _j < _cnt; _j += 1) {
            var _i = ib[_j - rev] * 3;

            var _i2 = ib[_j + rev + 1] * 3;

            var _i3 = ib[_j + 2] * 3;

            Vec3.set(tri.a, vb[_i], vb[_i + 1], vb[_i + 2]);
            Vec3.set(tri.b, vb[_i2], vb[_i2 + 1], vb[_i2 + 2]);
            Vec3.set(tri.c, vb[_i3], vb[_i3 + 1], vb[_i3 + 2]);
            rev = ~rev;

            var _dist = intersect.rayTriangle(modelRay, tri, sides);

            if (_dist <= 0 || _dist >= narrowDis) {
              continue;
            }

            narrowDis = _dist;
          }
        } else if (pm === gfx.PrimitiveMode.TRIANGLE_FAN) {
          var _cnt2 = ib.length - 1;

          var _i4 = ib[0] * 3;

          Vec3.set(tri.a, vb[_i4], vb[_i4 + 1], vb[_i4 + 2]);

          for (var _j2 = 1; _j2 < _cnt2; _j2 += 1) {
            var _i5 = ib[_j2] * 3;

            var _i6 = ib[_j2 + 1] * 3;

            Vec3.set(tri.b, vb[_i5], vb[_i5 + 1], vb[_i5 + 2]);
            Vec3.set(tri.c, vb[_i6], vb[_i6 + 1], vb[_i6 + 2]);

            var _dist2 = intersect.rayTriangle(modelRay, tri, sides);

            if (_dist2 <= 0 || _dist2 >= narrowDis) {
              continue;
            }

            narrowDis = _dist2;
          }
        }
      };

      var raycast = exports('default', {
        raycastAllModels: function raycastAllModels(renderScene, worldRay, mask, distance) {
          if (mask === void 0) {
            mask = Layers.Enum.DEFAULT;
          }

          if (distance === void 0) {
            distance = Infinity;
          }

          resultModels.length = 0;

          for (var _iterator = _createForOfIteratorHelperLoose(renderScene.models), _step; !(_step = _iterator()).done;) {
            var m = _step.value;
            var transform = m.transform;

            if (!transform || !m.enabled || !(m.node.layer & mask) || !m.worldBounds) {
              continue;
            } // broadphase


            var d = intersect.rayAABB(worldRay, m.worldBounds);

            if (d <= 0 || d >= distance) {
              continue;
            }

            if (m.type === renderer.scene.ModelType.DEFAULT) {
              // transform ray back to model space
              Mat4.invert(m4, transform.getWorldMatrix(m4));
              Vec3.transformMat4(modelRay.o, worldRay.o, m4);
              Vec3.normalize(modelRay.d, Vec3.transformMat4Normal(modelRay.d, worldRay.d, m4));
              d = Infinity;

              for (var i = 0; i < m.subModels.length; ++i) {
                var subModel = m.subModels[i].subMesh;

                if (subModel && subModel.geometricInfo) {
                  var _subModel$geometricIn = subModel.geometricInfo,
                      vb = _subModel$geometricIn.positions,
                      ib = _subModel$geometricIn.indices,
                      sides = _subModel$geometricIn.doubleSided;
                  narrowphase(vb, ib, subModel.primitiveMode, sides, distance);
                  d = Math.min(d, narrowDis * Vec3.multiply(v3, modelRay.d, transform.worldScale).length());
                }
              }
            }

            if (d < distance) {
              resultModels.push({
                node: m.node,
                distance: d
              });
            }
          }

          resultModels.sort(function (a, b) {
            return a.distance - b.distance;
          });
          return resultModels;
        },
        raycastModels: function raycastModels(models, worldRay, mask, distance, ignoreEnable) {
          if (mask === void 0) {
            mask = Layers.Enum.DEFAULT;
          }

          if (distance === void 0) {
            distance = Infinity;
          }

          if (ignoreEnable === void 0) {
            ignoreEnable = false;
          }

          resultModels.length = 0;

          for (var _iterator2 = _createForOfIteratorHelperLoose(models), _step2; !(_step2 = _iterator2()).done;) {
            var m = _step2.value;
            var transform = m.transform;

            if (!transform || !ignoreEnable && !m.enabled || !(m.node.layer & mask) || !m.worldBounds) {
              continue;
            } // broadphase


            var d = intersect.rayAABB(worldRay, m.worldBounds);

            if (d <= 0 || d >= distance) {
              continue;
            }

            if (m.type === renderer.scene.ModelType.DEFAULT) {
              // transform ray back to model space
              Mat4.invert(m4, transform.getWorldMatrix(m4));
              Vec3.transformMat4(modelRay.o, worldRay.o, m4);
              Vec3.normalize(modelRay.d, Vec3.transformMat4Normal(modelRay.d, worldRay.d, m4));
              d = Infinity;

              for (var i = 0; i < m.subModels.length; ++i) {
                var subModel = m.subModels[i].subMesh;

                if (subModel && subModel.geometricInfo) {
                  var _subModel$geometricIn2 = subModel.geometricInfo,
                      vb = _subModel$geometricIn2.positions,
                      ib = _subModel$geometricIn2.indices,
                      sides = _subModel$geometricIn2.doubleSided;
                  narrowphase(vb, ib, subModel.primitiveMode, sides, distance);
                  d = Math.min(d, narrowDis * Vec3.multiply(v3, modelRay.d, transform.worldScale).length());
                }
              }
            }

            if (d < distance) {
              resultModels.push({
                node: m.node,
                distance: d
              });
            }
          }

          resultModels.sort(function (a, b) {
            return a.distance - b.distance;
          });
          return resultModels;
        },
        raycastModel: function raycastModel(m, worldRay, distance) {
          if (distance === void 0) {
            distance = Infinity;
          }

          var transform = m.transform; // broadphase

          var d = intersect.rayAABB(worldRay, m.worldBounds);

          if (d <= 0 || d >= distance) {
            return null;
          }

          if (m.type === renderer.scene.ModelType.DEFAULT) {
            // transform ray back to model space
            Mat4.invert(m4, transform.getWorldMatrix(m4));
            Vec3.transformMat4(modelRay.o, worldRay.o, m4);
            Vec3.normalize(modelRay.d, Vec3.transformMat4Normal(modelRay.d, worldRay.d, m4));
            d = Infinity;

            for (var i = 0; i < m.subModels.length; ++i) {
              var subModel = m.subModels[i].subMesh;

              if (subModel && subModel.geometricInfo) {
                var _subModel$geometricIn3 = subModel.geometricInfo,
                    vb = _subModel$geometricIn3.positions,
                    ib = _subModel$geometricIn3.indices,
                    sides = _subModel$geometricIn3.doubleSided;
                narrowphase(vb, ib, subModel.primitiveMode, sides, distance);
                d = Math.min(d, narrowDis * Vec3.multiply(v3, modelRay.d, transform.worldScale).length());
              }
            }
          }

          if (d < distance) {
            return {
              node: m.node,
              distance: d
            };
          }

          return null;
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/reflection-cluster.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './world-cluster.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, director, ReflectionProbe, packCubemapAtlas, WorldCluster;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      director = module.director;
      ReflectionProbe = module.ReflectionProbe;
    }, function (module) {
      packCubemapAtlas = module.packCubemapAtlas;
    }, function (module) {
      WorldCluster = module.WorldCluster;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "74d5ezDh51Hd4NATqD2io/i", "reflection-cluster", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var tempVec3 = new Vec3();
      var ReflectionWorldCluster = exports('ReflectionWorldCluster', (_dec = ccclass('sync.ReflectionWorldCluster'), _dec(_class = (_class2 = /*#__PURE__*/function (_WorldCluster) {
        _inheritsLoose(ReflectionWorldCluster, _WorldCluster);

        function ReflectionWorldCluster() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _WorldCluster.call.apply(_WorldCluster, [this].concat(args)) || this;
          _this._atlas = void 0;
          _this.pixelsPerObjectFloat = 3;

          _initializerDefineProperty(_this, "forceUpdateAtlas", _descriptor, _assertThisInitialized(_this));

          _this.dirty = true;
          _this.probes = [];
          return _this;
        }

        var _proto = ReflectionWorldCluster.prototype;

        _proto.findObjects = function findObjects() {
          this.probes = director.getScene().getComponentsInChildren(ReflectionProbe);

          if (!this._atlas || this.forceUpdateAtlas) {
            var cubemaps = this.probes.map(function (probe) {
              return probe._cubemap;
            });
            this._atlas = packCubemapAtlas(cubemaps);
            this.forceUpdateAtlas = false;
          }

          return this.probes;
        };

        _proto.update = function update(dt) {
          if (!this.dirty) {
            return;
          }

          this.dirty = false;

          _WorldCluster.prototype.update.call(this, dt);
        };

        _proto.updateClusters = function updateClusters() {
          // clear clusters
          this.clustersCounts.fill(0);
          this.clustersData.fill(0);
          this.clustersDistances.fill(Infinity); // local accessors

          var divX = this._cells.x;
          var divY = this._cells.y;
          var divZ = this._cells.z;
          var counts = this.clustersCounts;
          var distances = this.clustersDistances;
          var limit = this._maxCellObjectCount;
          var clusters = this.clustersData;
          var pixelsPerCellCount = this._pixelsPerCellCount;
          var usedObjects = this._usedObjects; // started from index 1, zero is "no-light" index

          for (var i = 1; i < usedObjects.length; i++) {
            var clusteredObject = usedObjects[i];
            var object = clusteredObject.object; // add light data into textures

            if (object) {
              this.addObjectData(object, i);
            }
          }

          for (var y = 0; y < divY; y++) {
            for (var z = 0; z < divZ; z++) {
              for (var x = 0; x < divX; x++) {
                var clusterIndex = x + divX * (z + y * divZ);
                var center = tempVec3.set(this.boundsDelta).multiply3f((x + 0.5) / divX, (y + 0.5) / divY, (z + 0.5) / divZ).add(this.boundsMin);
                var count = counts[clusterIndex];

                for (var _i = 1; _i < usedObjects.length; _i++) {
                  var _clusteredObject = usedObjects[_i];
                  var dist = Vec3.squaredDistance(center, _clusteredObject.center);

                  if (count < limit) {
                    clusters[pixelsPerCellCount * clusterIndex * 4 + count] = usedObjects.indexOf(_clusteredObject);
                    counts[clusterIndex] = count;
                    distances[clusterIndex] = dist;
                    count++;
                  } else {
                    for (var _i2 = limit; _i2 >= 0; _i2--) {
                      var testIndex = pixelsPerCellCount * clusterIndex * 4 + _i2;

                      if (dist < distances[testIndex]) {
                        clusters[testIndex] = usedObjects.indexOf(_clusteredObject);
                        distances[testIndex] = dist;
                        break;
                      }
                    }
                  }
                }
              }
            }
          } // #if _DEBUG
          // if (tooManyObjects) {
          //     const reportLimit = 5;
          //     if (this.reportCount < reportLimit) {
          //         console.warn(`Too many objects in cluster ${this.name}, please adjust parameters. ${this.reportCount == reportLimit - 1 ? " Giving up on reporting it." : ""}`);
          //         this.reportCount++;
          //     }
          // }
          // #endif

        };

        _proto.addObjectData = function addObjectData(obj, index) {
          var dataInfoFloat = this.dataInfoFloat;
          var dataInfoFloatIndex = index * this.dataInfoTextureFloat.width * 4; // pos and radius

          var pos = obj.node.worldPosition;
          var radius = Math.max(obj.size.x, obj.size.y, obj.size.z);
          dataInfoFloat[dataInfoFloatIndex++] = pos.x;
          dataInfoFloat[dataInfoFloatIndex++] = pos.y;
          dataInfoFloat[dataInfoFloatIndex++] = pos.z;
          dataInfoFloat[dataInfoFloatIndex++] = radius; // offsets

          var indexInAtlas = this._atlas.cubemaps.indexOf(obj.cubemap);

          var offsets = this._atlas.offsets[indexInAtlas];

          if (offsets) {
            dataInfoFloat[dataInfoFloatIndex++] = offsets[0];
            dataInfoFloat[dataInfoFloatIndex++] = offsets[1];
            dataInfoFloat[dataInfoFloatIndex++] = offsets[2];
            dataInfoFloat[dataInfoFloatIndex++] = offsets[3];
          } //
          // dataInfoFloat[dataInfoFloatIndex++] = obj.averageBrightness;
          // dataInfoFloat[dataInfoFloatIndex++] = obj.brightness;

        };

        _proto.getBoundingBox = function getBoundingBox(obj, clusteredObject) {
          var radius = Math.max(obj.size.x, obj.size.y, obj.size.z);
          var pos = obj.node.worldPosition;
          clusteredObject.min.set(pos.x - radius, pos.y - radius, pos.z - radius);
          clusteredObject.max.set(pos.x + radius, pos.y + radius, pos.z + radius);
          clusteredObject.radius = radius;
          clusteredObject.center.set(pos);
        };

        _proto.drawObjects = function drawObjects() {// this._usedObjects.forEach(obj => {
          //     if (obj.object) {
          //         obj.object.drawDebug(this._drawer!)
          //     }
          // })
        };

        return ReflectionWorldCluster;
      }(WorldCluster), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "forceUpdateAtlas", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/reflection-probe-utils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, ReflectionProbe, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ReflectionProbe = module.ReflectionProbe;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b32cf5stuhFQIY+C5NC8FIp", "reflection-probe-utils", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var ReflectionProbes = exports('ReflectionProbes', {
        probes: []
      });
      var ReflectionProbeUtils = exports('ReflectionProbeUtils', (_dec = ccclass('ReflectionProbeUtils'), _dec(_class = executeInEditMode(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ReflectionProbeUtils, _Component);

        function ReflectionProbeUtils() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.probe = void 0;
          _this.capturing = false;
          return _this;
        }

        var _proto = ReflectionProbeUtils.prototype;

        _proto.onEnable = function onEnable() {
          this.probe = this.getComponent(ReflectionProbe);

          if (ReflectionProbes.probes.indexOf(this.probe) === -1) {
            ReflectionProbes.probes.push(this.probe);
          }
        };

        _proto.onDisable = function onDisable() {
          var index = ReflectionProbes.probes.indexOf(this.probe);

          if (index !== -1) {
            ReflectionProbes.probes.splice(index, 1);
          }
        };

        _proto.runtimeCapture = function runtimeCapture(capturing) {
          if (capturing === void 0) {
            capturing = true;
          }

          this.capturing = capturing;

          if (capturing) {
            if (!this.probe) {
              return;
            }

            if (!this.probe.probe) {
              this.probe._createProbe();
            }

            this.probe.probe.captureCubemap();
          }
        };

        _proto.update = function update() {
          if (this.capturing) {
            this.probe.probe._needRender = true;
          }
        };

        return ReflectionProbeUtils;
      }(Component)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/render-quality.ts", ['cc', './gpu.ts', './render-setting.ts', './graph.ts', './nodes.ts'], function (exports) {
  'use strict';

  var cclegacy, RenderQulity, renderSetting, liteGraph, updateNextNodes;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      RenderQulity = module.RenderQulity;
    }, function (module) {
      renderSetting = module.renderSetting;
    }, function (module) {
      liteGraph = module.liteGraph;
    }, function (module) {
      updateNextNodes = module.updateNextNodes;
    }],
    execute: function () {
      exports('RenderQulityNode', RenderQulityNode);

      cclegacy._RF.push({}, "13a5c4V3rBL7YB/n+z3aWit", "render-quality", undefined);

      function RenderQulityNode() {
        var self = this;
        self.properties = {
          High: false,
          Medium: false,
          Low: false
        };
        self.addWidget('toggle', 'High', false, 'High');
        self.addWidget('toggle', 'Medium', false, 'Medium');
        self.addWidget('toggle', 'Low', false, 'Low');
        self.addInput('RenderTexture', 'RenderTexture');
        self.addOutput('Output', 'RenderTexture');
        this.stage = null;

        this.onUpdateStage = function updateStage(prev, stages) {
          self.stage = prev.stage;

          if (renderSetting.quality === RenderQulity.High && self.properties.High || renderSetting.quality === RenderQulity.Medium && self.properties.Medium || renderSetting.quality === RenderQulity.Low && self.properties.Low) {
            updateNextNodes(self, stages);
          }
        };

        self.size = self.computeSize();
      }

      delete liteGraph.registered_node_types["input/RenderQulity"];
      liteGraph.registerNodeType("input/RenderQulity", RenderQulityNode);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/render-setting.ts", ['cc', './gpu.ts'], function (exports) {
  'use strict';

  var cclegacy, RenderQulity;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      RenderQulity = module.RenderQulity;
    }],
    execute: function () {
      cclegacy._RF.push({}, "45088MUEdJBm5ZVg36dK9vo", "render-setting", undefined);

      var renderSetting = exports('renderSetting', {
        get quality() {
          return RenderQulity.High;
        }

      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/render-to-screen.ts", ['cc', './graph.ts'], function (exports) {
  'use strict';

  var cclegacy, liteGraph;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      liteGraph = module.liteGraph;
    }],
    execute: function () {
      exports('RenderToScreen', RenderToScreen);

      cclegacy._RF.push({}, "50de7eq/mtO9bc2m7Zytn2t", "render-to-screen", undefined);

      function RenderToScreen() {
        var self = this;
        self.addInput('RenderTexture', 'RenderTexture');

        this.onUpdateStage = function updateStage(prev) {
          var stage = prev.stage;

          if (stage) {
            stage.renderToScreen = true;
          }
        };

        self.size = self.computeSize();
      }

      delete liteGraph.registered_node_types["pipeline/RenderToScreen"];
      liteGraph.registerNodeType("pipeline/RenderToScreen", RenderToScreen);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/render-tool.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, EffectAsset, Material, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EffectAsset = module.EffectAsset;
      Material = module.Material;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "626fePm0ulBBpiiJXvBNrQQ", "render-tool", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RenderTool = exports('RenderTool', (_dec = ccclass('RenderTool'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RenderTool, _Component);

        function RenderTool() {
          return _Component.apply(this, arguments) || this;
        }
        /**
         * Create material.
         */


        RenderTool.createMat = function createMat(name) {
          var effect = EffectAsset.get(name);
          var mat = new Material();
          mat.initialize({
            effectName: name
          });
          return mat;
        }
        /**
         * Change material
         */
        ;

        RenderTool.changeEffect = function changeEffect(name, mat) {
          var effect = EffectAsset.get(name);
          mat.initialize({
            effectName: name
          });
        };

        return RenderTool;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/res-cache.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './singleton.ts', './res.ts', './msg.ts', './fx-auto-remove.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Vec3, Singleton, Res, Msg, FxAutoRemove;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      FxAutoRemove = module.FxAutoRemove;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4a886JebGhDUZ9A8gI6mcjO", "res-cache", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ResCache = exports('ResCache', (_dec = ccclass('ResCache'), _dec(_class = /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(ResCache, _Singleton);

        function ResCache() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this._json = {};
          _this._prefab = {};
          _this._txt = {};
          _this._sprite = {};
          _this._sound = {};
          _this._callback = void 0;
          _this.msg = void 0;
          return _this;
        }

        var _proto = ResCache.prototype;

        _proto.load = /*#__PURE__*/function () {
          var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(callback) {
            var _this2 = this;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  this._callback = callback;
                  Msg.on('msg_check_res_cache_end', this.checkEnd.bind(this));
                  Res.loadJson('data/data-res-cache', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(err, asset) {
                    var jsonPrefab;
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                      while (1) switch (_context.prev = _context.next) {
                        case 0:
                          if (!err) {
                            _context.next = 3;
                            break;
                          }

                          console.error('Load cache res error:', err);
                          return _context.abrupt("return");

                        case 3:
                          _this2.msg = {
                            id: 1,
                            action: 'load cache',
                            current: 'resource',
                            wait_count: 1,
                            count: 1
                          };

                          if (!(!asset || !asset.json)) {
                            _context.next = 7;
                            break;
                          }

                          console.error('resource cache data is null', asset);
                          return _context.abrupt("return");

                        case 7:
                          jsonPrefab = asset.json['prefab'];
                          if (jsonPrefab) ResCache.Instance.loadPrefab(jsonPrefab);
                          ResCache.Instance.loadJson(asset.json['json']);
                          ResCache.Instance.loadSprite(asset.json['sprite']);
                          ResCache.Instance.loadSound(asset.json['sound']);
                          Msg.emit('msg_loading', _this2.msg);

                        case 13:
                        case "end":
                          return _context.stop();
                      }
                    }, _callee);
                  })));

                case 3:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function load(_x) {
            return _load.apply(this, arguments);
          }

          return load;
        }();

        _proto.addLoad = function addLoad() {
          this.msg.wait_count++;
          this.msg.count++; //console.log('add load count:', this.msg?.count, 'wait count:', this.msg?.wait_count,);
        };

        _proto.removeLoad = function removeLoad() {
          this.msg.wait_count--; //console.log('remove load wait count:', this.msg?.wait_count, ' count:', this.msg?.count);
        };

        _proto.getJson = function getJson(name) {
          var ret = this._json[name];

          if (ret) {
            return ret;
          } else {
            console.error('Res cache not find json res:', name);
            return null;
          }
        };

        _proto.getPrefab = function getPrefab(name) {
          var ret = this._prefab[name];

          if (ret) {
            return ret;
          } else {
            console.error('Res cache not find prefab res:', name);
            return undefined;
          }
        };

        _proto.getTxt = function getTxt(name) {
          var ret = this._txt[name];

          if (ret) {
            return ret;
          } else {
            console.error('Res cache not find text res:', name);
          }
        };

        _proto.getSprite = function getSprite(name) {
          var ret = this._sprite[name];

          if (ret !== undefined) {
            return ret;
          } else {
            console.error('Res cache not find sprite res:', name);
          }
        };

        _proto.getSound = function getSound(name) {
          var ret = this._sound[name];

          if (ret !== undefined) {
            return ret;
          } else {
            console.error('Res cache not find sound res:', name);
          }
        };

        _proto.setJson = function setJson(asset) {
          var _this3 = this;

          asset.forEach(function (element) {
            _this3._json[element.name] = element;
          });
        };

        _proto.preloadFxShader = function preloadFxShader(prefab) {
          if (prefab.name.includes('fx_')) {
            var preload = Res.inst(prefab, undefined, Vec3.ZERO);
            preload.addComponent(FxAutoRemove);
          }
        };

        _proto.setPrefab = function setPrefab(asset) {
          var _this4 = this;

          asset.forEach(function (element) {
            _this4.preloadFxShader(element);

            _this4._prefab[element.name] = element;
          });
        };

        _proto.setText = function setText(asset) {
          var _this5 = this;

          asset.forEach(function (element) {
            _this5._txt[element.name] = element;
          });
        };

        _proto.setSprite = function setSprite(asset) {
          var _this6 = this;

          asset.forEach(function (element) {
            _this6._sprite[element.name] = element;
          });
        };

        _proto.setSound = function setSound(asset) {
          var _this7 = this;

          asset.forEach(function (element) {
            _this7._sound[element.name] = element;
          });
        };

        _proto.loadJson = function loadJson(paths) {
          var _this8 = this;

          paths.forEach(function (element) {
            _this8.addLoad();

            Res.loadDirJson(element, function (err, asset) {
              if (asset) {
                ResCache.Instance.setJson(asset);

                _this8.removeLoad();
              }
            });
          });
        };

        _proto.loadPrefab = function loadPrefab(paths) {
          var _this9 = this;

          paths.forEach(function (element) {
            _this9.addLoad();

            Res.loadDirPrefab(element, function (err, asset) {
              if (asset) {
                ResCache.Instance.setPrefab(asset);

                _this9.removeLoad();
              }
            });
          });
        };

        _proto.loadText = function loadText(paths) {
          var _this10 = this;

          paths.forEach(function (element) {
            _this10.addLoad();

            Res.loadDirText(element, function (err, asset) {
              if (asset) {
                ResCache.Instance.setText(asset);

                _this10.removeLoad();
              }
            });
          });
        };

        _proto.loadSprite = function loadSprite(paths) {
          var _this11 = this;

          paths.forEach(function (element) {
            _this11.addLoad();

            Res.loadDirSprite(element, function (err, asset) {
              if (asset) {
                ResCache.Instance.setSprite(asset);

                _this11.removeLoad();
              }
            });
          });
        };

        _proto.loadSound = function loadSound(paths) {
          var _this12 = this;

          paths.forEach(function (element) {
            _this12.addLoad();

            Res.loadDirSound(element, function (err, asset) {
              if (asset) {
                ResCache.Instance.setSprite(asset);

                _this12.removeLoad();
              }
            });
          });
        };

        _proto.checkEnd = function checkEnd() {
          if (this._callback) {
            if (Res.count <= 0) {
              this._callback();

              this._callback = undefined;
            }
          }
        };

        return ResCache;
      }(Singleton)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/res-destroy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, Msg;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d03933Pia1K3KIbUS6vPnB8", "res-destroy", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ResDestroy = exports('ResDestroy', (_dec = ccclass('ResDestroy'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ResDestroy, _Component);

        function ResDestroy() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.isDestroy = false;
          _this.msg = void 0;
          return _this;
        }

        var _proto = ResDestroy.prototype;

        _proto.start = function start() {
          var _this2 = this;

          Msg.bind('msg_destroy_res', function () {
            _this2.isDestroy = true;
            var length = _this2.node.children.length - 1;
            _this2.msg = {
              id: 0,
              action: 'destroy',
              current: ' objects node. ',
              wait_count: length,
              count: length
            };
            Msg.emit('msg_loading', _this2.msg);

            if (globalThis.ppSettings) {
              globalThis.ppSettings.passVersion++;
              console.log('msg_destroy_res: passVersion - ' + globalThis.ppSettings.passVersion);
            }
          }, this);
        };

        _proto.update = function update(deltaTime) {
          if (this.isDestroy) {
            var length = this.node.children.length - 1;
            this.msg.wait_count = length; //this.msg!.current = this.node.children[length].name;

            if (length <= -1) {
              this.isDestroy = false;
              console.log('res is destroy');
              return;
            }

            this.node.children[length].destroy();
          }
        };

        return ResDestroy;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/res-editor-cache.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './res-cache.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Prefab, Component, ResCache;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "e457eyimp1BeIQqii83QS/s", "res-editor-cache", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ResEditorCache = exports('ResEditorCache', (_dec = ccclass('ResEditorCache'), _dec2 = property(JsonAsset), _dec3 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ResEditorCache, _Component);

        function ResEditorCache() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jsonAssets", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabs", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ResEditorCache.prototype;

        _proto.init = function init() {
          ResCache.Instance.setJson(this.jsonAssets);
          ResCache.Instance.setPrefab(this.prefabs);
        };

        return ResEditorCache;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jsonAssets", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "prefabs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/res-pool.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './singleton.ts', './res.ts', './res-cache.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Msg, Singleton, Res, ResCache;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b49ebXJauNL7piZ4hUve25/", "res-pool", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ResPool = exports('ResPool', (_dec = ccclass('ResPool'), _dec(_class = /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(ResPool, _Singleton);

        function ResPool() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this._root = null;
          _this._pool = new Map();
          return _this;
        }

        var _proto = ResPool.prototype;

        _proto.init = function init() {};

        _proto.initPool = function initPool(root) {
          this._root = root;
          Msg.on('pool_recycle', this.pool_recycle.bind(this));
        };

        _proto.pool_recycle = function pool_recycle() {
          this._pool.forEach(function (element) {
            element.recycle();
          });
        };

        _proto.pop = function pop(name) {
          if (!this._pool.has(name)) {
            this.newPool(name);
          }

          return this._pool.get(name).pop();
        };

        _proto.push = function push(obj) {
          console.log(obj.name);

          this._pool.get(obj.name).push(obj);
        };

        _proto.pushByName = function pushByName(name, obj) {
          console.log(name, obj);

          this._pool.get(name).push(obj);
        };

        _proto.newPool = function newPool(name) {
          var newpool = new pool(name, this._root);

          this._pool.set(name, newpool);
        };

        return ResPool;
      }(Singleton)) || _class));
      var pool = exports('pool', /*#__PURE__*/function () {
        function pool(name, root) {
          this._index = 0;
          this._items = [];
          this._state = [];
          this._max = 0;
          this._realMax = 0;
          this._name = '';
          this._prefab = null;
          this._root = null;
          this.IncreaseSize();
          this._name = name;
          this._prefab = ResCache.Instance.getPrefab(this._name);
          this._root = root;
        }

        var _proto2 = pool.prototype;

        _proto2.recycle = function recycle() {
          for (var i = 0; i < this._max; i++) {
            this._state[i] = 1;
            this._items[i].active = false;

            this._items[i].setPosition(10000, 10000, 10000);
          }
        };

        _proto2.pop = function pop() {
          for (var i = 0; i < this._max; i++) {
            var state = this._state[this._index];

            if (state === 1) {
              var n = this._items[this._index];
              this._state[this._index] = 2;
              n.active = true;
              this.next();
              return n;
            }

            this.next();
          } // Not find res.
          // Create new one.


          return this.newRes();
        };

        _proto2.next = function next() {
          this._index++;
          if (this._index >= this._max) this._index = 0;
        };

        _proto2.push = function push(obj) {
          obj.active = false;
          var poolindex = obj['pool_index'];
          this._state[poolindex] = 1;
        };

        _proto2.newRes = function newRes() {
          // Check & Increase pool size
          this.checkAndIncreaseSize(); // Inst new node.

          var newNode = Res.inst(this._prefab, this._root);
          this._index = this._max;
          this._max++;

          if (newNode['pool_index'] !== undefined) {
            console.log('pool create error.');
          }

          newNode['pool_index'] = this._index;
          this._items[this._index] = newNode;
          this._state[this._index] = 2;
          return newnode;
        };

        _proto2.checkAndIncreaseSize = function checkAndIncreaseSize() {
          // Check the size is full.
          // Judge last items is not null.
          var last = this._items.length - 1;
          if (this._items[last] === null) return; // Increase size.

          this.IncreaseSize();
        };

        _proto2.IncreaseSize = function IncreaseSize() {
          this._realMax += 8;

          this._items.push(null, null, null, null, null, null, null, null);

          this._state.push(0, 0, 0, 0, 0, 0, 0, 0);
        };

        return pool;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/res-texture.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy, loader;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      loader = module.loader;
    }],
    execute: function () {
      exports('loadTextures', loadTextures);

      cclegacy._RF.push({}, "0aad6yySg5JDryy0LMn9k/v", "res-texture", undefined);

      var ParallelMaxTextures = 10;
      var allTextures = ["CyborgEnemy01_BC", "CyborgEnemy01_N", "CyborgEnemy01_ORM", "CyborgEnemy02_BC", "CyborgEnemy02_N", "CyborgEnemy02_ORM", "DefaultMaterial_BaseColor", "DefaultMaterial_MetallicRoughness", "DefaultMaterial_Normal", "MI_AirConditioners01_BaseColor", "MI_AirConditioners01_MetallicRoughness", "MI_AirConditioners01_Normal", "MI_AirConditioners01_Occlusion", "MI_AirConditioner_Decal01_BaseColor", "MI_AirConditioner_Decal01_MetallicRoughness", "MI_AirConditioner_Decal01_Normal", "MI_AirConditioningPipe_01_BaseColor", "MI_AirConditioningPipe_01_MetallicRoughness", "MI_AirConditioningPipe_01_Normal", "MI_AirConditioningPipe_01_Occlusion", "MI_AirConditioning_01_BaseColor", "MI_AirConditioning_01_MetallicRoughness", "MI_AirConditioning_01_Normal", "MI_AirConditioning_01_Occlusion", "MI_CarsEmissive_Emissive", "MI_ContainerP4_01_BaseColor", "MI_ContainerP4_01_MetallicRoughness", "MI_ContainerP4_01_Normal", "MI_ContainerP4_01_Occlusion", "MI_EnvirAssets_01_Emissive", "MI_Fence_01_BaseColor", "MI_Fence_01_MetallicRoughness", "MI_Fence_01_Normal", "MI_Fence_01_Occlusion", "MI_FrontConcrete01_BaseColor", "MI_FrontConcrete01_MetallicRoughness", "MI_FrontConcrete01_Normal", "MI_FrontConcrete02_BaseColor", "MI_FrontConcrete02_MetallicRoughness", "MI_FrontConcrete02_Normal", "MI_FrontConDec03_BaseColor", "MI_FrontConDec03_MetallicRoughness", "MI_FrontConDec04_BaseColor", "MI_Glass03_BaseColor", "MI_Glass_02_BaseColor", "MI_LampSet02_Emissive", "MI_MetalBeam01_BaseColor", "MI_MetalBeam01_MetallicRoughness", "MI_MetalBeam01_Normal", "MI_MetalBeam01_Occlusion", "MI_MetalBeam_Painted01_BaseColor", "MI_MetalBumpers_BaseColor", "MI_MetalBumpers_MetallicRoughness", "MI_MetalBumpers_Normal", "MI_MetalBumpers_Occlusion", "MI_MetalWallPart_01_BaseColor", "MI_MetalWallPart_01_MetallicRoughness", "MI_MetalWallPart_01_Normal", "MI_MetalWallPart_01_Occlusion", "MI_MetalWallPart_Painted_01_BaseColor", "MI_PaperBoxes_01_BaseColor", "MI_PaperBoxes_02_BaseColor", "MI_PillarWithBreckets_BaseColor", "MI_PillarWithBreckets_MetallicRoughness", "MI_PillarWithBreckets_Normal", "MI_PillarWithBreckets_Occlusion", "MI_Pipes_square_01_BaseColor", "MI_Pipes_square_01_MetallicRoughness", "MI_Pipes_square_01_Normal", "MI_Pipes_square_01_Occlusion", "MI_Platform01_BaseColor", "MI_Platform01_MetallicRoughness", "MI_Platform01_Normal", "MI_Platform01_Occlusion", "MI_Platform02_BaseColor", "MI_Platform02_MetallicRoughness", "MI_Platform02_Normal", "MI_Platform02_Occlusion", "MI_PlatformRailing_01_BaseColor", "MI_PlatformRailing_01_MetallicRoughness", "MI_PlatformRailing_01_Normal", "MI_PlatformRailing_01_Occlusion", "MI_Platform_01_BaseColor", "MI_Platform_01_MetallicRoughness", "MI_Platform_01_Normal", "MI_Platform_01_Occlusion", "MI_PowderStorage_01_BaseColor", "MI_PowderStorage_01_MetallicRoughness", "MI_PowderStorage_01_Normal", "MI_PowderStorage_01_Occlusion", "MI_PropsSetEm01_BaseColor", "MI_PropsSetEm01_Emissive", "MI_PropsSetEm01_MetallicRoughness", "MI_PropsSetEm01_Normal", "MI_PropsSetEm01_Occlusion", "MI_Round_Pipes_01_BaseColor", "MI_Round_Pipes_01_MetallicRoughness", "MI_Round_Pipes_01_Normal", "MI_Round_Pipes_01_Occlusion", "MI_Signboards02_Emissive", "MI_SignboardText02_Emissive", "MI_Stair_01_Painted_BaseColor", "MI_Stair_02_BaseColor", "MI_Stair_02_MetallicRoughness", "MI_Stair_02_Normal", "MI_Stair_02_Occlusion", "MI_WGS_01_Emissive", "MI_WGS_03_Emissive", "M_AnimBoard01_BaseColor", "M_AnimBoard01_Emissive", "M_Building08_Emissive", "M_Hair_Alpha_BaseColor", "M_LampSet_01_Emissive", "M_Signboards01_Emissive", "M_SignboardsAnim03_Emissive", "M_Sky_Panning_Clouds2_Inst_Sky_BaseColor", "M_WindowsEmissive01_Emissive", "T_Asphalt03_BC", "T_Asphalt03_Normal", "T_Asphalt03_ORM", "T_Asphalt_BC", "T_Asphalt_Normal", "T_Asphalt_ORM", "T_BackgroundBuildingTrim01_BC", "T_BackgroundBuildingTrim01_N", "T_BackgroundBuildingTrim01_ORM", "T_BrokenAsphalt_BC", "T_BrokenAsphalt_N", "T_BrokenAsphalt_ORM", "T_Building05_BC", "T_Building05_N", "T_Building05_ORM", "T_Building07_BC", "T_Building07_BC_1", "T_Building07_N", "T_Building07_N_1", "T_Building07_ORM", "T_Building07_ORM_1", "T_Building08_BC", "T_Building08_N", "T_Building08_ORM", "T_Building09_BC", "T_Building09_N", "T_Building09_ORM", "T_Building10_BC", "T_Building10_N", "T_Building10_ORM", "T_Building12_BC", "T_Building12_N", "T_Building12_ORM", "T_Building13_BC", "T_Building13_N", "T_Building13_ORM", "T_Building4_BC", "T_Building4_N", "T_Building4_ORM", "T_car_BC", "T_car_Emiss", "T_car_N", "T_car_ORM", "T_Concrete_Poured_D", "T_Concrete_Poured_N", "T_CornerBuilding01_BC", "T_CornerBuilding01_N", "T_CornerBuilding01_ORM", "T_CyberSignBoards_BC_sRGB", "T_CyberSignBoards_N", "T_CyberSignBoards_ORM", "T_EnvirAssets01_BC_sRGB", "T_EnvirAssets01_N", "T_EnvirAssets01_ORM", "T_FactoryConcreteFloor01_BC", "T_FloorMats01_BC", "T_FloorMats01_N", "T_FloorMats01_ORM", "T_GarbageBag02_BC", "T_GarbageBag02_N", "T_GarbageBag02_ORM", "T_gun01_BC_sRGB", "T_gun01_N", "T_gun01_ORM", "T_gun03_BC", "T_gun03_N", "T_gun03_ORM", "T_Hair_BC", "T_Hair_N", "T_Hair_ORM", "T_Hero_Body_BC", "T_Hero_Body_N", "T_Hero_Body_ORM", "T_Hero_Head_BC", "T_Hero_Head_N", "T_Hero_Head_ORM", "T_LampSet02_BC", "T_LampSet02_N", "T_LampSet02_ORM", "T_LampSet_01_BC", "T_LampSet_01_N", "T_LampSet_01_ORM", "T_Metalbeam01_N", "T_Metalbeam01_ORM", "T_NeonSign02_BC", "T_NeonSign02_N", "T_NeonSign02_ORM", "T_PaperBoxes_01_N", "T_PaperBoxes_01_ORM", "T_PaperBoxes_02_N", "T_PaperBoxes_02_ORM", "T_PaperBoxes_03_BC", "T_PaperBoxes_03_N", "T_PaperBoxes_03_ORM", "T_Pavement01_BC", "T_Pavement01_N", "T_Pavement01_ORM", "T_PavementDetails01_BC", "T_PavementDetails01_N", "T_PavementDetails01_ORM", "T_PropsSet01_BC", "T_PropsSet01_N", "T_PropsSet01_ORM", "T_Roof01_BC", "T_Roof01_N", "T_Roof01_ORM", "T_SignboardText01_BC", "T_SignboardText01_N", "T_SignboardText01_ORM", "T_Stairs_02_N", "T_Stairs_02_ORM", "T_TiledGexGround01_BC", "T_TiledGexGround01_N", "T_TiledGexGround01_ORM", "T_TrashBox01_BC", "T_TrashBox01_N", "T_TrashBox01_ORM", "T_TrimSet02_BC", "T_TrimSet02_N", "T_TrimSet02_ORM", "T_TrimSheet01_BC", "T_TrimSheet01_N", "T_TrimSheet01_ORM", "T_WallTile01_BC", "T_WallTile01_N", "T_WallTile01_ORM", "T_Wall_01_N", "T_Wall_01_ORM", "T_WGS_01_BC_sRGB", "T_WGS_01_N", "T_WGS_01_ORM", "T_WGS_02_BC_sRGB", "T_WGS_02_N", "T_WGS_02_ORM", "T_WGS_03_BC_sRGB", "T_WGS_03_N", "T_WGS_03_ORM", "T_WGS_04_BC_sRGB", "T_WGS_04_N", "T_WGS_04_ORM", "T_WindowsSet01_BC", "T_WindowsSet01_N", "T_WindowsSet01_ORM", "Wall03_BC", "Wall03_Normal", "Wall03_ORM", "WorldGridMaterial_BaseColor", "WorldGridMaterial_MetallicRoughness", "WorldGridMaterial_Normal"];

      function loadTextures() {
        return _loadTextures.apply(this, arguments);
      }

      function _loadTextures() {
        _loadTextures = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var some;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                some = allTextures.splice(0, ParallelMaxTextures);
                _context2.next = 3;
                return Promise.all(some.map( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(u) {
                  return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                      case 0:
                        u = 'textures/' + u;
                        new Promise(function (resolve) {
                          loader.loadRes(u, function (err, a) {
                            resolve(null);
                          });
                        });

                      case 2:
                      case "end":
                        return _context.stop();
                    }
                  }, _callee);
                }))));

              case 3:
                if (!allTextures.length) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 6;
                return new Promise(function (resolve) {
                  setTimeout(function () {
                    resolve(null);
                  }, 60);
                });

              case 6:
                _context2.next = 8;
                return loadTextures();

              case 8:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return _loadTextures.apply(this, arguments);
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/res.ts", ['cc', './msg.ts'], function (exports) {
  'use strict';

  var cclegacy, resources, error, JsonAsset, TextAsset, Prefab, Texture2D, ImageAsset, SpriteFrame, SpriteAtlas, EffectAsset, AudioClip, AnimationClip, Mesh, Material, Skeleton, SceneAsset, Vec3, instantiate, director, Msg;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      resources = module.resources;
      error = module.error;
      JsonAsset = module.JsonAsset;
      TextAsset = module.TextAsset;
      Prefab = module.Prefab;
      Texture2D = module.Texture2D;
      ImageAsset = module.ImageAsset;
      SpriteFrame = module.SpriteFrame;
      SpriteAtlas = module.SpriteAtlas;
      EffectAsset = module.EffectAsset;
      AudioClip = module.AudioClip;
      AnimationClip = module.AnimationClip;
      Mesh = module.Mesh;
      Material = module.Material;
      Skeleton = module.Skeleton;
      SceneAsset = module.SceneAsset;
      Vec3 = module.Vec3;
      instantiate = module.instantiate;
      director = module.director;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      cclegacy._RF.push({}, "746d90hQc1HQ5mGBCnQ2+fK", "res", undefined);

      var Res = exports('Res', /*#__PURE__*/function () {
        function Res() {}

        Res.load = function load(path, type, cb) {
          this.count++;
          resources.load(path, type, function (err, res) {
            if (err) {
              error(path, err.message || err);
              Msg.emit('msg_res_error');
            }

            if (cb) {
              cb(err, res);
            }

            Res.count--;
            Msg.emit('msg_check_res_cache_end');
          });
        };

        Res.loadJson = function loadJson(path, cb) {
          this.load(path, JsonAsset, cb);
        };

        Res.loadTxt = function loadTxt(path, cb) {
          this.load(path, TextAsset, cb);
        };

        Res.loadPrefab = function loadPrefab(path, cb) {
          this.load(path, Prefab, cb);
        };

        Res.loadTex2D = function loadTex2D(path, cb) {
          this.load(path, Texture2D, cb);
        };

        Res.loadImage = function loadImage(path, cb) {
          this.load(path, ImageAsset, cb);
        };

        Res.loadSprite = function loadSprite(path, cb) {
          this.load(path, SpriteFrame, cb);
        };

        Res.loadSpriteAtlas = function loadSpriteAtlas(path, cb) {
          this.load(path, SpriteAtlas, cb);
        };

        Res.loadEffect = function loadEffect(path, cb) {
          this.load(path, EffectAsset, cb);
        };

        Res.loadAudio = function loadAudio(path, cb) {
          this.load(path, AudioClip, cb);
        };

        Res.loadAnimationClip = function loadAnimationClip(path, cb) {
          this.load(path, AnimationClip, cb);
        };

        Res.loadMesh = function loadMesh(path, cb) {
          this.load(path, Mesh, cb);
        };

        Res.loadMateiral = function loadMateiral(path, cb) {
          this.load(path, Material, cb);
        };

        Res.loadSkeleton = function loadSkeleton(path, cb) {
          this.load(path, Skeleton, cb);
        };

        Res.loadScene = function loadScene(path, cb) {
          this.load(path, SceneAsset, cb);
        };

        Res.inst = function inst(asset, root, pos) {
          if (root === void 0) {
            root = undefined;
          }

          if (pos === void 0) {
            pos = Vec3.ZERO;
          }

          var instObj = instantiate(asset);

          if (root === undefined) {
            var _director$getScene;

            (_director$getScene = director.getScene()) == null ? void 0 : _director$getScene.addChild(instObj);
          } else {
            instObj.setParent(root);
          }

          instObj.setPosition(pos);
          instObj.setScale(Vec3.ONE);
          return instObj;
        };

        Res.instNode = function instNode(node, root, pos) {
          if (root === void 0) {
            root = undefined;
          }

          if (pos === void 0) {
            pos = Vec3.ZERO;
          }

          var instObj = instantiate(node);

          if (root === undefined) {
            var _director$getScene2;

            (_director$getScene2 = director.getScene()) == null ? void 0 : _director$getScene2.addChild(instObj);
          } else {
            instObj.setParent(root);
          }

          instObj.setPosition(pos);
          instObj.setScale(Vec3.ONE);
          return instObj;
        };

        Res.loadDir = function loadDir(path, type, cb) {
          this.count++;
          resources.loadDir(path, type, function (err, res) {
            if (err) {
              error(err.message || err);
              Msg.emit('msg_res_error');
            }

            if (cb) {
              cb(err, res);
            }

            Res.count--;
            Msg.emit('msg_check_res_cache_end');
          });
        };

        Res.loadDirJson = function loadDirJson(path, cb) {
          this.loadDir(path, JsonAsset, cb);
        };

        Res.loadDirPrefab = function loadDirPrefab(path, cb) {
          this.loadDir(path, Prefab, cb);
        };

        Res.loadDirText = function loadDirText(path, cb) {
          this.loadDir(path, TextAsset, cb);
        };

        Res.loadDirSprite = function loadDirSprite(path, cb) {
          this.loadDir(path, SpriteFrame, cb);
        };

        Res.loadDirSound = function loadDirSound(path, cb) {
          this.loadDir(path, AudioClip, cb);
        };

        return Res;
      }());
      Res.count = 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/router.ts", ['cc', './graph.ts', './nodes.ts'], function (exports) {
  'use strict';

  var cclegacy, liteGraph, updateNextNodes;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      liteGraph = module.liteGraph;
    }, function (module) {
      updateNextNodes = module.updateNextNodes;
    }],
    execute: function () {
      exports('Router', Router);

      cclegacy._RF.push({}, "f6269jbCQFAmbxj9N6NSgcY", "router", undefined);

      function Router() {
        var self = this;
        self.addInput('RenderTexture 1', 'RenderTexture');
        self.addInput('RenderTexture 2', 'RenderTexture');
        self.addInput('RenderTexture 3', 'RenderTexture');
        self.addOutput('Output', 'RenderTexture');

        this.onUpdateStage = function updateStage(prev, stages) {
          self.stage = prev.stage;
          updateNextNodes(self, stages);
        };

        self.size = self.computeSize();
      }

      delete liteGraph.registered_node_types["input/Router"];
      liteGraph.registerNodeType("input/Router", Router);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/save-gltf.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './editor.ts', './npm.ts'], function (exports) {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy, Vec3, assetManager, base642arraybuffer, fse, path, Editor;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      assetManager = module.assetManager;
    }, function (module) {
      base642arraybuffer = module.base642arraybuffer;
    }, function (module) {
      fse = module.fse;
      path = module.path;
      Editor = module.Editor;
    }],
    execute: function () {
      exports({
        saveGltf: saveGltf,
        toGltfMesh: toGltfMesh
      });

      cclegacy._RF.push({}, "e13ff+XpahLU5jlboeVustC", "save-gltf", undefined);

      var _attributes = {
        vertices: {
          attr: 'POSITION',
          componentType: 5126,
          count: 3,
          bytesPerElement: 4,
          type: "VEC3"
        },
        normals: {
          attr: 'NORMAL',
          componentType: 5126,
          count: 3,
          bytesPerElement: 4,
          type: "VEC3"
        },
        colors: {
          attr: 'COLOR_0',
          componentType: 5126,
          count: 4,
          bytesPerElement: 4,
          type: "VEC4"
        },
        uv: {
          attr: 'TEXCOORD_0',
          componentType: 5126,
          count: 2,
          bytesPerElement: 4,
          type: "VEC2"
        },
        uv1: {
          attr: 'TEXCOORD_1',
          componentType: 5126,
          count: 2,
          bytesPerElement: 4,
          type: "VEC2"
        },
        boneWeights: {
          attr: 'WEIGHTS_0',
          componentType: 5126,
          count: 4,
          bytesPerElement: 4,
          type: "VEC4"
        },
        joints: {
          attr: 'JOINTS_0',
          componentType: 5126,
          count: 4,
          bytesPerElement: 4,
          type: "VEC4"
        },
        indices: {
          componentType: 5123,
          count: 1,
          bytesPerElement: 2,
          type: "SCALAR"
        }
      };
      var MeshData = exports('MeshData', function MeshData() {
        this.vertices = [];
        this.uv = [];
        this.uv1 = [];
        this.normals = [];
        this.colors = [];
        this.boneWeights = [];
        this.tangents = [];
        this.joints = [];
        this.indices = [];
        this.min = new Vec3(Infinity, Infinity, Infinity);
        this.max = new Vec3(-Infinity, -Infinity, -Infinity);
      });

      function toGltfMesh(name, mesh) {
        var gltf = {
          "asset": {
            "generator": "Khronos glTF Blender I/O v1.2.75",
            "version": "2.0"
          },
          "scene": 0,
          "scenes": [{
            "name": "Scene",
            "nodes": [0]
          }],
          "nodes": [{
            "mesh": 0,
            "name": "Mesh"
          }],
          "meshes": [{
            "name": name,
            "primitives": []
          }],
          "accessors": [],
          "bufferViews": [],
          "buffers": []
        };
        var gltfMesh = gltf.meshes[0];
        var bufferIndex = 0;
        var subMesh = mesh;
        var primitive = {
          indices: -1,
          attributes: {},
          mode: 4
        };
        gltfMesh.primitives.push(primitive);
        var byteOffset = 0;
        var bufferViews = gltf.bufferViews;

        for (var attrName in _attributes) {
          var values = subMesh[attrName];

          if (!values || !values.length) {
            continue;
          } // primitive


          var attrDef = _attributes[attrName];

          if (attrDef === _attributes.indices) {
            primitive.indices = bufferIndex;
          } else {
            primitive.attributes[attrDef.attr] = bufferIndex;
          } // accessor


          var accessor = {
            bufferView: bufferIndex,
            componentType: attrDef.componentType,
            count: values.length / attrDef.count,
            type: attrDef.type
          };

          if (attrDef === _attributes.vertices) {
            accessor.min = Vec3.toArray([], mesh.min);
            accessor.max = Vec3.toArray([], mesh.max);
          }

          gltf.accessors.push(accessor); // bufferView 

          var byteLength = values.length * attrDef.bytesPerElement;
          bufferViews.push({
            buffer: 0,
            byteOffset: byteOffset,
            byteLength: byteLength
          });
          byteOffset += byteLength;
          bufferIndex++;
        }

        var buffer = new ArrayBuffer(byteOffset);
        var float32Buffer = new Float32Array(buffer, 0, bufferViews[primitive.indices].byteOffset / 4);
        var uint16Buffer = new Uint16Array(buffer);

        for (var _attrName in _attributes) {
          var _values = subMesh[_attrName];

          if (!_values || !_values.length) {
            continue;
          }

          var _attrDef = _attributes[_attrName];

          var _bufferIndex = void 0;

          if (_attrDef === _attributes.indices) {
            _bufferIndex = primitive.indices;
          } else {
            _bufferIndex = primitive.attributes[_attrDef.attr];
          }

          if (_attrDef.bytesPerElement === 2) {
            uint16Buffer.set(_values, bufferViews[_bufferIndex].byteOffset / 2);
          } else if (_attrDef.bytesPerElement === 4) {
            float32Buffer.set(_values, bufferViews[_bufferIndex].byteOffset / 4);
          }
        }

        gltf.buffers.push({
          byteLength: byteOffset,
          uri: 'data:application/octet-stream;base64,' + base642arraybuffer.encode(buffer)
        });
        return gltf;
      }

      function loadAssetByUrl(_x, _x2) {
        return _loadAssetByUrl.apply(this, arguments);
      }

      function _loadAssetByUrl() {
        _loadAssetByUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, delay) {
          var assetUid;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (delay === void 0) {
                  delay = 10;
                }

                _context.next = 3;
                return Editor.Message.request('asset-db', 'query-uuid', url);

              case 3:
                assetUid = _context.sent;
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  if (!assetUid) {
                    console.error("Can not find uuid for : " + url);
                    return resolve(null);
                  }

                  setTimeout(function () {
                    assetManager.loadAny(assetUid, function (err, asset) {
                      if (err) {
                        console.error(err);
                        return resolve(null);
                      }

                      resolve(asset);
                    });
                  }, delay);
                }));

              case 5:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return _loadAssetByUrl.apply(this, arguments);
      }

      function saveGltf(_x3, _x4, _x5) {
        return _saveGltf.apply(this, arguments);
      }

      function _saveGltf() {
        _saveGltf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(gltf, gltfUrl, meshUrl) {
          var gltfPath;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return Editor.Message.request('asset-db', 'query-path', gltfUrl);

              case 2:
                gltfPath = _context2.sent;
                fse.ensureDirSync(path.dirname(gltfPath));
                fse.writeJSONSync(gltfPath, gltf);
                _context2.next = 7;
                return Editor.Message.request('asset-db', 'refresh-asset', gltfUrl);

              case 7:
                _context2.next = 9;
                return loadAssetByUrl(meshUrl, 100);

              case 9:
                return _context2.abrupt("return", _context2.sent);

              case 10:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return _saveGltf.apply(this, arguments);
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/save.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './singleton.ts', './g-math.ts', './io.ts', './util.ts', './json-tool.ts', './msg.ts', './res-cache.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _createClass, cclegacy, Singleton, GMath, IO, UtilArray, JsonTool, Msg, ResCache;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      GMath = module.GMath;
    }, function (module) {
      IO = module.IO;
    }, function (module) {
      UtilArray = module.UtilArray;
    }, function (module) {
      JsonTool = module.JsonTool;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      cclegacy._RF.push({}, "370a3Db3ktMC5T5vTd5RopR", "save", undefined);

      var max_history_statistics = 30;
      var Save = exports('Save', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(Save, _Singleton);

        function Save() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this._uuid = '';
          _this._cur = {};
          _this._uuidKey = 'uuid';
          _this._archiveKey = 'archive_list';
          _this._archiveList = void 0;
          _this._saveJson = void 0;
          _this._backup_counter = 0;
          _this._currentStatistics = {};
          return _this;
        }

        var _proto = Save.prototype;

        _proto.init = function init() {
          var _this2 = this;

          this._saveJson = ResCache.Instance.getJson('data-save').json;

          if (!IO.exist(this._archiveKey + '.json')) {
            this._archiveList = [];
            this.newArchive();
          } else {
            this._archiveList = JsonTool.toIOObject(this._archiveKey);
            this._uuid = this._archiveList[0];
            this.loadArchive(this._uuid);
            this._uuid = IO.read(this._uuidKey + '.json');
          }

          Msg.on('msg_save_set', function (data) {
            _this2.set(data.key, data.value);
          });
          Msg.on('msg_stat_times', this.statisticsTimes.bind(this));
          Msg.on('msg_stat_time', this.statisticsTime.bind(this));
          Msg.on('msg_stat_distance', this.statisticsDistance.bind(this));
          Msg.on('msg_save_archive', this.saveArchive.bind(this));
        };

        _proto.backup = function backup() {
          this._backup_counter--;
          if (this._backup_counter > 0) return;
          this._backup_counter = 5;
        };

        _proto.saveArchiveList = function saveArchiveList() {
          IO.write(this._archiveKey + '.json', JsonTool.toJson(this._archiveList));
        };

        _proto.saveArchive = function saveArchive() {
          try {
            //Achievement.Instance.updateData();
            var data = JsonTool.toJson(this._cur);
            IO.write(this._uuid + '.json', data);
            this.backup();
          } catch (error) {
            console.error('save archive error.');
          }
        };

        _proto.hasArchive = function hasArchive() {
          return this._archiveList.length > 0;
        };

        _proto.newArchive = function newArchive() {
          this._cur = this._saveJson;
          this._uuid = GMath.uuid();

          this._archiveList.push(this._uuid);

          IO.write(this._uuidKey + '.json', this._uuid);
          this.saveArchive();
          this.saveArchiveList();
        };

        _proto.loadArchive = function loadArchive(name) {
          this._uuid = name;
          IO.write(this._uuidKey + '.json', this._uuid);
          var read_data = IO.read(name + '.json'); //console.log(name, read_data);

          if (read_data === undefined) {
            console.error('can not read data uuid key:', this._uuid);
            this._cur = Object.assign(this._saveJson);
          } else {
            this._cur = JsonTool.toObject(read_data);
          } // Add new data input index.


          if (this._cur.input_index === undefined) this._cur.input_index = 0;
        };

        _proto.loadBackup = function loadBackup(name) {
          this._uuid = name;
          var data = IO.read(name + '_b0.json');
          this._cur = JsonTool.toObject(data);
        };

        _proto.deleteArchive = function deleteArchive(name) {
          UtilArray.remove(this._archiveList, name);
          this.saveArchiveList();
          IO["delete"](name + '.json');
        };

        _proto.deleteAllArchive = function deleteAllArchive() {
          if (this._archiveList) {
            this._archiveList.forEach(function (element) {
              IO["delete"](element + '.json');
            });

            this._archiveList = undefined;
          }

          IO["delete"](this._archiveKey + '.json');
          IO["delete"](this._uuid + '.json');
        };

        _proto.get = function get(name) {
          try {
            return this._cur[name];
          } catch (_unused) {
            throw new Error("Save not find key's value. The key is : " + name);
          }
        };

        _proto.set = function set(name, value) {
          this._cur[name] = value;
          this.saveArchive();
        };

        _proto.setValue = function setValue(name, value) {
          this._cur[name] = value;
        };

        _proto.setStatistics = function setStatistics(name, value) {
          this._currentStatistics[name] = value;
        };

        _proto.getStatistics = function getStatistics(name) {
          var value = this._currentStatistics[name];
          return value === undefined ? 0 : value;
        };

        _proto.saveGameOver = function saveGameOver() {
          this.statisticsFinalScore();
        };

        _proto.clearByKey = function clearByKey(key) {
          this._cur[key] = {};
          this.saveArchive();
        };

        _proto.statisticsTimes = function statisticsTimes(key) {
          var statKey = key + 'Times';
          if (this._currentStatistics[statKey] === undefined) this._currentStatistics[statKey] = 0;
          this._currentStatistics[statKey] += 1;
        };

        _proto.statisticsTime = function statisticsTime(data) {
          var statKey = data.key + 'Time';
          if (this._currentStatistics[statKey] === undefined) this._currentStatistics[statKey] = 0;
          this._currentStatistics[statKey] += data.time;
        };

        _proto.statisticsDistance = function statisticsDistance(data) {
          var statKey = data.key + 'Distance';
          if (this._currentStatistics[statKey] === undefined) this._currentStatistics[statKey] = 0;
          this._currentStatistics[statKey] += data.distance;
        };

        _proto.statisticsValue = function statisticsValue(key) {
          return this._currentStatistics[key];
        };

        _proto.statisticsFinalScore = function statisticsFinalScore() {
          for (var k in this._currentStatistics) {
            this._cur.statistics[k] += this._currentStatistics[k];
          }
        };

        _proto.nextStatistics = function nextStatistics() {
          if (this._cur.history_index === undefined) this._cur.history_index = -1;
          this._cur.history_index++;
          console.log('history index:', this._cur.history_index);
          if (this._cur.history_index > max_history_statistics) this._cur.history_index = 0;
          if (this._cur.history === undefined) this._cur.history = [];

          if (this._cur.history_index >= this._cur.history.length) {
            this._cur.history.push({});
          }

          this._currentStatistics = this._cur.history[this._cur.history_index];
        };

        _createClass(Save, [{
          key: "PlayerID",
          get: function get() {
            if (this._cur.player_id === undefined) this._cur.player_id = 27;
            return this._cur.player_id;
          }
        }]);

        return Save;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/scene-particles.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './href-setting.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, HrefSetting;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d06b3tLbEhJPrVhEOTmjCrY", "scene-particles", undefined);

      var ccclass = _decorator.ccclass;
      var SceneParticles = exports('SceneParticles', (_dec = ccclass('SceneParticles'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SceneParticles, _Component);

        function SceneParticles() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SceneParticles.prototype;

        _proto.start = function start() {
          if (!HrefSetting.sceneParticles) {
            this.node.removeFromParent();
          }
        };

        return SceneParticles;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-actions.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3ba35uF7IZGq57bXY7w0h7U", "sensor-actions", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SensorActions = exports('SensorActions', (_dec = ccclass('SensorActions'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorActions, _Component);

        function SensorActions() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SensorActions.prototype;

        _proto.start = function start() {};

        return SensorActions;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-anig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, animation, Collider, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      animation = module.animation;
      Collider = module.Collider;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "60403ZFtTFG0p3UJdPkKLiL", "sensor-anig", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SensorAnig = exports('SensorAnig', (_dec = ccclass('SensorAnig'), _dec2 = property(animation.AnimationController), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorAnig, _Component);

        function SensorAnig() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._collider = null;

          _initializerDefineProperty(_this, "graph", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "key", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SensorAnig.prototype;

        _proto.start = function start() {
          // [3]
          this._collider = this.getComponent(Collider);

          this._collider.on('onTriggerEnter', this.onTriggerEnter, this);

          this._collider.on('onCollisionEnter', this.onCollisionEnter, this);
        };

        _proto.onTriggerEnter = function onTriggerEnter(event) {
          this.play(this.key, true);
        };

        _proto.onCollisionEnter = function onCollisionEnter(event) {
          this.play(this.key, true);
        };

        _proto.play = function play(key, value) {
          var _this$graph;

          (_this$graph = this.graph) == null ? void 0 : _this$graph.setValue(key, value);
        };

        return SensorAnig;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "graph", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "key", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-audio.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bb019sTpbJHNKTd1iatEsWd", "sensor-audio", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SensorAudio = exports('SensorAudio', (_dec = ccclass('SensorAudio'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorAudio, _Component);

        function SensorAudio() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SensorAudio.prototype;

        _proto.start = function start() {};

        return SensorAudio;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-effect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "01389zdX6JEQIIUN0yJ/6JF", "sensor-effect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SensorEffect = exports('SensorEffect', (_dec = ccclass('SensorEffect'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorEffect, _Component);

        function SensorEffect() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SensorEffect.prototype;

        _proto.start = function start() {};

        return SensorEffect;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-ground.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor.ts', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Vec3, geometry, v3, Collider, PhysicsSystem, Component, Actor, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Vec3 = module.Vec3;
      geometry = module.geometry;
      v3 = module.v3;
      Collider = module.Collider;
      PhysicsSystem = module.PhysicsSystem;
      Component = module.Component;
    }, function (module) {
      Actor = module.Actor;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "bf45fM2hwNNIr8TzJOa0XCl", "sensor-ground", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SensorGround = exports('SensorGround', (_dec = ccclass('SensorGround'), _dec2 = property(CCFloat), _dec3 = property([Vec3]), _dec4 = property([CCFloat]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorGround, _Component);

        function SensorGround() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._collider = void 0;
          _this._actor = void 0;
          _this._isGround = false;
          _this._ray = new geometry.Ray();
          _this._velocity = v3(0, 0, 0);
          _this._rigid = void 0;

          _initializerDefineProperty(_this, "checkDistance", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "original", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "masks", _descriptor3, _assertThisInitialized(_this));

          _this._mask = 0;
          _this.pos = v3(0, 0, 0);
          return _this;
        }

        var _proto = SensorGround.prototype;

        _proto.start = function start() {
          this._collider = this.getComponent(Collider);
          this._ray.d.x = 0;
          this._ray.d.y = -1;
          this._ray.d.z = 0;
          this._actor = this.node.getComponent(Actor);

          for (var i = 0; i < this.masks.length; i++) this._mask = this._mask | 1 << this.masks[i];
        };

        _proto.update = function update(deltaTime) {
          this.checkGroundRays();
        };

        _proto.checkGroundRays = function checkGroundRays() {
          var _this$_actor2;

          for (var i = 0; i < this.original.length; i++) {
            UtilVec3.copy(this._ray.o, this.node.worldPosition);

            this._ray.o.add(this.original[i]);

            if (PhysicsSystem.instance.raycastClosest(this._ray, this._mask, this.checkDistance)) {
              var _this$_actor;

              var res = PhysicsSystem.instance.raycastClosestResult; //this._actor!._data.walk_in_type = SubstanceCore.Instance.checkNodeType(res.collider.node);

              if (!this._isGround) (_this$_actor = this._actor) == null ? void 0 : _this$_actor.onGround();
              this._isGround = true;
              return;
            }
          }

          if (this._isGround) (_this$_actor2 = this._actor) == null ? void 0 : _this$_actor2.offGround();
          this._isGround = false;
        };

        return SensorGround;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "checkDistance", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "original", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "masks", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-msg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCString, Collider, game, Component, Msg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Collider = module.Collider;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "921f4aN2JlDAKMS1fApt6Y4", "sensor-msg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SensorMsg = exports('SensorMsg', (_dec = ccclass('SensorMsg'), _dec2 = property([CCString]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorMsg, _Component);

        function SensorMsg() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._collider = null;

          _initializerDefineProperty(_this, "msg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "data", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "exit_msg", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "exit_data", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isHitRemove", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "filter", _descriptor6, _assertThisInitialized(_this));

          _this._safeTime = 500;
          _this._curTime = 0;
          return _this;
        }

        var _proto = SensorMsg.prototype;

        _proto.onEnable = function onEnable() {
          this._collider = this.getComponent(Collider);
          this.init();
        };

        _proto.onDisable = function onDisable() {
          this._collider.off('onTriggerEnter', this.onCollisionEnter, this);

          this._collider.off('onCollisionEnter', this.onCollisionEnter, this);

          if (this.exit_msg.length > 0) {
            this._collider.off('onTriggerExit', this.onTriggerExit, this);

            this._collider.off('onCollisionExit', this.onCollisionExit, this);
          }
        };

        _proto.init = function init() {
          if (this.msg === '') {
            var array = this.node.name.split('#');
            this.msg = array[0];
            if (array.length >= 2) this.data = array[1];
          }

          this._collider.on('onTriggerEnter', this.onTriggerEnter, this);

          this._collider.on('onCollisionEnter', this.onCollisionEnter, this);

          if (this.exit_msg.length > 0) {
            this._collider.on('onTriggerExit', this.onTriggerExit, this);

            this._collider.on('onCollisionExit', this.onCollisionExit, this);
          }

          this._curTime = game.totalTime;
        };

        _proto.onTriggerEnter = function onTriggerEnter(event) {
          if (this.checkFilter(event.otherCollider.name)) return;

          if (this.msg === "actor_event") {
            event.otherCollider.node.emit('do', this.data);
          } else {
            Msg.emit(this.msg, this.data);
            event.otherCollider.emit('do', this.data);
          }

          if (this.isHitRemove) {
            this.node.active = false;
          }
        };

        _proto.onTriggerExit = function onTriggerExit(event) {
          if (this.checkFilter(event.otherCollider.name)) return;

          if (this.exit_msg === "actor_event") {
            event.otherCollider.node.emit('do', this.exit_data);
          } else {
            Msg.emit(this.exit_msg, this.exit_data);
            event.otherCollider.emit('do', this.exit_data);
          }
        };

        _proto.onCollisionEnter = function onCollisionEnter(event) {
          if (this.checkFilter(event.otherCollider.name)) return;

          if (this.msg === "actor_event") {
            event.otherCollider.node.emit('do', this.data);
          } else {
            Msg.emit(this.msg, this.data);
          }

          if (this.isHitRemove) {
            this.node.active = false;
          }
        };

        _proto.onCollisionExit = function onCollisionExit(event) {
          if (this.checkFilter(event.otherCollider.name)) return;

          if (this.exit_msg === "actor_event") {
            event.otherCollider.node.emit('do', this.exit_data);
          } else {
            Msg.emit(this.exit_msg, this.exit_data);
          }
        };

        _proto.unSafeEnter = function unSafeEnter() {
          var deltaTime = game.totalTime - this._curTime;

          if (game.totalTime - this._curTime > this._safeTime) {
            this._curTime = game.totalTime;
            return false;
          } else {
            return true;
          }
        };

        _proto.checkFilter = function checkFilter(hit) {
          for (var i = 0; i < this.filter.length; i++) {
            var f = this.filter[i];
            if (hit.includes(f)) return true;
          }

          return false;
        };

        return SensorMsg;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "msg", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "data", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "exit_msg", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "exit_data", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isHitRemove", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "filter", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-probe.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Collider, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider = module.Collider;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fdcf6g/V0JAx4JtAlpB7Yeq", "sensor-probe", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SensorProbe = exports('SensorProbe', (_dec = ccclass('SensorProbe'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorProbe, _Component);

        function SensorProbe() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._collider = void 0;
          return _this;
        }

        var _proto = SensorProbe.prototype;

        _proto.start = function start() {
          this._collider = this.getComponent(Collider);

          this._collider.on('onCollisionEnter', this.onCollisionEnter, this);
        };

        _proto.onCollisionEnter = function onCollisionEnter(event) {
          console.log('on collision enter:', event.otherCollider.name);
          this.node.emit('onHit', event.otherCollider.name);
        };

        return SensorProbe;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-ray-node-to-node.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, CCFloat, v3, geometry, PhysicsSystem, Vec3, Component, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CCFloat = module.CCFloat;
      v3 = module.v3;
      geometry = module.geometry;
      PhysicsSystem = module.PhysicsSystem;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "4e0eeac2SVGPrWQmkdCyeFe", "sensor-ray-node-to-node", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SensorRayNodeToNode = exports('SensorRayNodeToNode', (_dec = ccclass('SensorRayNodeToNode'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property([CCFloat]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorRayNodeToNode, _Component);

        function SensorRayNodeToNode() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "startNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "endNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "masks", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "check_time", _descriptor4, _assertThisInitialized(_this));

          _this._mask = 0;
          _this._time = 0;
          _this._direction = v3(0, 0, 0);
          _this._ray = new geometry.Ray();
          _this.hitPoint = v3(0, 0, 0);
          return _this;
        }

        var _proto = SensorRayNodeToNode.prototype;

        _proto.start = function start() {
          for (var i = 0; i < this.masks.length; i++) this._mask = this._mask | 1 << this.masks[i];
        };

        _proto.update = function update(deltaTime) {
          this._time -= deltaTime;

          if (this._time < 0) {
            UtilVec3.copy(this._ray.o, this.startNode.worldPosition);
            UtilVec3.copy(this._direction, this.endNode.worldPosition);

            this._direction.subtract(this.startNode.worldPosition);

            var distance = this._direction.length();

            this._direction.normalize();

            UtilVec3.copy(this._ray.d, this._direction);

            if (PhysicsSystem.instance.raycastClosest(this._ray, this._mask, distance)) {
              var _this$hitPoint;

              UtilVec3.copy(this.hitPoint, PhysicsSystem.instance.raycastClosestResult.hitPoint);
              (_this$hitPoint = this.hitPoint) == null ? void 0 : _this$hitPoint.subtract(this._direction); //

              var hitDistance = this.hitPoint.clone().subtract(this.startNode.worldPosition).length();
            } else {
              UtilVec3.copy(this.hitPoint, Vec3.ZERO);
            }
          }
        };

        return SensorRayNodeToNode;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "startNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "endNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "masks", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "check_time", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-rays-angle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, CCFloat, geometry, v3, math, PhysicsSystem, randomRangeInt, Component, UtilVec3, UtilNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      CCFloat = module.CCFloat;
      geometry = module.geometry;
      v3 = module.v3;
      math = module.math;
      PhysicsSystem = module.PhysicsSystem;
      randomRangeInt = module.randomRangeInt;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
      UtilNode = module.UtilNode;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "2154dIBOBFE8akijr2j3PV8", "sensor-rays-angle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var SensorRaysAngle = exports('SensorRaysAngle', (_dec = ccclass('SensorRaysAngle'), _dec2 = property([Vec3]), _dec3 = property(CCFloat), _dec4 = property(CCFloat), _dec5 = property([CCFloat]), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorRaysAngle, _Component);

        function SensorRaysAngle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "dir", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "angle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "segment", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "masks", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "check_time", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "distance", _descriptor6, _assertThisInitialized(_this));

          _this._ray = new geometry.Ray();
          _this.checked = false;
          _this.checkedNode = void 0;
          _this.hitPoint = v3(0, 0, 0);
          _this._time = 0;
          _this._mask = 0;
          _this._curDir = v3(0, 0, 0);
          _this._dirs = void 0;
          _this.hitStates = void 0;
          _this.notHitCount = 0;
          return _this;
        }

        var _proto = SensorRaysAngle.prototype;

        _proto.onEnable = function onEnable() {
          for (var i = 0; i < this.masks.length; i++) this._mask = this._mask | 1 << this.masks[i];

          var count = this.dir.length * this.segment;
          this._dirs = new Array(count);
          this.hitStates = new Array(count);
          var eachAngle = this.angle / this.segment;
          var rotationOrigins = v3(0, 0, 0);

          for (var _i = 0; _i < this.dir.length; _i++) {
            var d = this.dir[_i];
            var curAngle = -this.angle / 2;

            for (var j = 0; j < this.segment; j++) {
              curAngle += eachAngle;
              var newDir = v3(d.x, d.y, d.z);
              Vec3.rotateY(newDir, newDir, rotationOrigins, math.toRadian(curAngle));
              var index = _i * this.segment + j;
              this._dirs[index] = newDir;
            }
          }
        };

        _proto.update = function update(deltaTime) {
          this._time -= deltaTime;

          if (this._time < 0) {
            this._time = this.check_time;
            UtilVec3.copy(this._ray.o, this.node.worldPosition);
            var worldEulerAngles = UtilNode.getWorldEulerAngles(this.node);
            var rotationY = math.toRadian(worldEulerAngles.y);

            for (var i = 0; i < this._dirs.length; i++) {
              UtilVec3.copy(this._curDir, this._dirs[i]);
              Vec3.rotateY(this._curDir, this._curDir, Vec3.ZERO, rotationY);
              UtilVec3.copy(this._ray.d, this._curDir);
              this.hitStates[i] = PhysicsSystem.instance.raycastClosest(this._ray, this._mask, this.distance);
              this.notHitCount = 0;

              if (this.hitStates[i]) {
                var res = PhysicsSystem.instance.raycastClosestResult;
                UtilVec3.copy(this.hitPoint, res.hitPoint);
                this.checked = true;
                this.checkedNode = res.collider.node;
              } else {
                this.checkedNode = undefined;
                this.checked = false;
                this.notHitCount++;
              }
            }
          }
        };

        _proto.getRandomWalkableDirection = function getRandomWalkableDirection() {
          var randomIndex = randomRangeInt(0, this.notHitCount); // Find walkable direction index.

          var walkableIndex = -1;

          for (var i = 0; i < this.hitStates.length; i++) {
            if (this.hitStates[i] == false) walkableIndex++;
            if (walkableIndex === randomIndex) break;
          }

          if (walkableIndex === -1) return undefined;
          this._curDir = this.dir[walkableIndex];
          var worldEulerAngles = UtilNode.getWorldEulerAngles(this.node);
          var rotationY = math.toRadian(worldEulerAngles.y);
          return Vec3.rotateY(this._curDir, this._curDir, Vec3.ZERO, rotationY);
        };

        return SensorRaysAngle;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dir", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "angle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "segment", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "masks", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "check_time", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "distance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-rays.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, CCFloat, geometry, v3, PhysicsSystem, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      CCFloat = module.CCFloat;
      geometry = module.geometry;
      v3 = module.v3;
      PhysicsSystem = module.PhysicsSystem;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "ee6c5/PncFApKo6tEquK38K", "sensor-rays", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SensorRays = exports('SensorRays', (_dec = ccclass('SensorRays'), _dec2 = property([Vec3]), _dec3 = property([Vec3]), _dec4 = property([CCFloat]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorRays, _Component);

        function SensorRays() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "dir", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "origin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "masks", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "check_time", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "distance", _descriptor5, _assertThisInitialized(_this));

          _this._ray = new geometry.Ray();
          _this.checked = false;
          _this.checkedNode = void 0;
          _this._time = 0;
          _this._mask = 0;
          _this._curDir = v3(0, 0, 0);
          return _this;
        }

        var _proto = SensorRays.prototype;

        _proto.start = function start() {
          for (var i = 0; i < this.masks.length; i++) this._mask = this._mask | 1 << this.masks[i];
        };

        _proto.update = function update(deltaTime) {
          this._time -= deltaTime;

          if (this._time < 0) {
            this._time = this.check_time;

            for (var i = 0; i < this.dir.length; i++) {
              Vec3.transformMat4(this._curDir, this.dir[i], this.node.worldMatrix);
              this._curDir = this._curDir.subtract(this.node.worldPosition).normalize();
              this._ray.d.x = this._curDir.x; //this.node.forward.x;//this.dir[i].x;

              this._ray.d.y = this._curDir.y; //this.node.forward.y;//this.dir[i].y;

              this._ray.d.z = this._curDir.z; //this.node.forward.z;//this.dir[i].z;

              this._ray.o.x = this.origin[i].x + this.node.worldPosition.x;
              this._ray.o.y = this.origin[i].y + this.node.worldPosition.y;
              this._ray.o.z = this.origin[i].z + this.node.worldPosition.z;

              if (PhysicsSystem.instance.raycastClosest(this._ray, this._mask, this.distance)) {
                var res = PhysicsSystem.instance.raycastClosestResult;
                this.checked = true;
                this.checkedNode = res.collider.node;
                return;
              } else {
                this.checkedNode = undefined;
              }
            }

            this.checked = false;
          }
        };

        return SensorRays;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dir", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "origin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "masks", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "check_time", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "distance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sensor-slope.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Vec3, geometry, v3, PhysicsSystem, Component, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Vec3 = module.Vec3;
      geometry = module.geometry;
      v3 = module.v3;
      PhysicsSystem = module.PhysicsSystem;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "f435bDe2jxF178IPHmyzwrp", "sensor-slope", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SensorSlope = exports('SensorSlope', (_dec = ccclass('SensorSlope'), _dec2 = property([CCFloat]), _dec3 = property(CCFloat), _dec4 = property(Vec3), _dec5 = property(Vec3), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SensorSlope, _Component);

        function SensorSlope() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "masks", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "distance", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "direction", _descriptor3, _assertThisInitialized(_this));

          _this._mask = 0;
          _this._ray = new geometry.Ray();
          _this.hitPoint = v3(0.5, 0, 0.5);

          _initializerDefineProperty(_this, "vectorSlop", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SensorSlope.prototype;

        _proto.start = function start() {
          for (var i = 0; i < this.masks.length; i++) this._mask = this._mask | 1 << this.masks[i];
        };

        _proto.checkSlope = function checkSlope(direction) {
          UtilVec3.copy(this.direction, direction);
          this.direction.y = 0;
          this.direction.normalize();
          UtilVec3.copy(this._ray.o, this.direction);

          this._ray.o.multiplyScalar(0.1);

          this._ray.o.add(this.node.worldPosition);

          this._ray.o.y += 0.3;
          this._ray.d.y = -1;
          this._ray.d.x = 0;
          this._ray.d.z = 0;

          if (PhysicsSystem.instance.raycastClosest(this._ray, this._mask, this.distance)) {
            UtilVec3.copy(this.hitPoint, PhysicsSystem.instance.raycastClosestResult.hitPoint);
            var heightDifference = Math.abs(this.hitPoint.y - this.node.worldPosition.y);

            if (heightDifference > 0.05) {
              //console.log(heightDifference);
              UtilVec3.copy(this.vectorSlop, this.hitPoint);
              this.vectorSlop.subtract(this.node.worldPosition);
              return true;
            }

            return false;
          } else {
            UtilVec3.copy(this.hitPoint, Vec3.ZERO);
            UtilVec3.copy(this.vectorSlop, Vec3.ZERO);
            return false;
          }
        };

        return SensorSlope;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "masks", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "distance", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "direction", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 1);
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "vectorSlop", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/setting.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a1279LA9ZZEfZ0llw/MjKiJ", "setting", undefined);

      var settings = exports('settings', {
        bakingReflection: false,
        outputRGBE: false,
        tonemapped: false,
        shadowStage: undefined,
        gbufferStage: undefined,
        renderProfiler: false,
        passPathName: '',
        passVersion: 0
      });
      globalThis.ppSettings = settings;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sfx-heart.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './level.ts', './sound.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, AudioSource, math, Component, Msg, Level, Sound;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AudioSource = module.AudioSource;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Level = module.Level;
    }, function (module) {
      Sound = module.Sound;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e5186zh4vhAxY8zIRm0AZcA", "sfx-heart", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SfxHeart = exports('SfxHeart', (_dec = ccclass('SfxHeart'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SfxHeart, _Component);

        function SfxHeart() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._sfxAudio = void 0;
          _this.volume = 0;
          _this.currentVolume = 0;
          _this.sceneVolume = 1;
          _this.currentSceneVolume = 1;
          _this.isLow = false;
          return _this;
        }

        var _proto = SfxHeart.prototype;

        _proto.start = function start() {
          this._sfxAudio = this.getComponent(AudioSource);
          this._sfxAudio.volume = 0;
          this._sfxAudio.loop = true;

          this._sfxAudio.play();
        };

        _proto.update = function update(deltaTime) {
          var _player$_data;

          var player = Level.Instance._player;
          if (!player) return;

          if (player && player != null && (_player$_data = player._data) != null && _player$_data.is_low_hp && !player.is_dead) {
            if (this.isLow == false) {
              this.isLow = true;
              Msg.emit('msg_ui_fx_open', 'effect_low_hp');
            }

            this.currentVolume = Sound.volumeSound;
            this.currentSceneVolume = 0.1;
          } else {
            if (this.isLow) {
              this.isLow = false;
              Msg.emit('msg_ui_fx_close', 'effect_low_hp');
            }

            this.currentVolume = 0;
            this.currentSceneVolume = 1;
          }

          this.volume = math.lerp(this.volume, this.currentVolume, deltaTime);
          this.sceneVolume = math.lerp(this.sceneVolume, this.currentSceneVolume, deltaTime);
          this._sfxAudio.volume = this.volume;
          Sound.sceneMusicPercent = this.sceneVolume;
          Sound.updateBGM();
        };

        return SfxHeart;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/shadow-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './base-stage.ts', './utils2.ts', './setting.ts', './href-setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, pipeline, renderer, gfx, rendering, _decorator, BaseStage, getRenderArea, getCameraUniqueID, settings, HrefSetting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      pipeline = module.pipeline;
      renderer = module.renderer;
      gfx = module.gfx;
      rendering = module.rendering;
      _decorator = module._decorator;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      getRenderArea = module.getRenderArea;
      getCameraUniqueID = module.getCameraUniqueID;
    }, function (module) {
      settings = module.settings;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "3dc5e7S4Y1LHrD2V8FfkMCz", "shadow-stage", undefined);

      var supportsR32FloatTexture = pipeline.supportsR32FloatTexture;
      var _renderer$scene = renderer.scene,
          ShadowType = _renderer$scene.ShadowType,
          LightType = _renderer$scene.LightType,
          SKYBOX_FLAG = _renderer$scene.SKYBOX_FLAG,
          CSMLevel = _renderer$scene.CSMLevel;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomShadowStage = exports('CustomShadowStage', (_dec = ccclass('CustomShadowStage'), _dec2 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(CustomShadowStage, _BaseStage);

        function CustomShadowStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._materialName = 'blit-screen';

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "textureFormat", _descriptor2, _assertThisInitialized(_this));

          _this.mainLightShadows = [];
          return _this;
        }

        var _proto = CustomShadowStage.prototype;

        _proto.buildShadowPass = function buildShadowPass(passName, ppl, camera, light, level, width, height) {
          var device = ppl.device;
          var shadowMapName = passName;

          if (!ppl.containsResource(shadowMapName)) {
            var format = supportsR32FloatTexture(device) ? Format.R32F : Format.RGBA8;
            ppl.addRenderTarget(shadowMapName, format, width, height, ResourceResidency.MANAGED);
            ppl.addDepthStencil(shadowMapName + "Depth", Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
          }

          var pass = ppl.addRasterPass(width, height, 'default');
          pass.name = passName;
          pass.addRasterView(shadowMapName, new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, ClearFlagBit.COLOR, new Color(1, 1, 1, camera.clearColor.w)));
          pass.addRasterView(shadowMapName + "Depth", new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, LoadOp.CLEAR, StoreOp.DISCARD, ClearFlagBit.DEPTH_STENCIL, new Color(camera.clearDepth, camera.clearStencil, 0, 0)));
          var rect = getRenderArea(new gfx.Rect(), camera, width, height, light, level);
          pass.setViewport(new Viewport(rect.x, rect.y, rect.width, rect.height));
          var queue = pass.addQueue(QueueHint.RENDER_OPAQUE);
          queue.addSceneOfCamera(camera, new LightInfo(light, level), SceneFlags.SHADOW_CASTER);
          {
            settings.passPathName += passName;
            pass.setVersion(settings.passPathName, 0);
          }
        };

        _proto.render = function render(camera, ppl) {
          if (!HrefSetting.shadow) {
            return;
          }

          settings.shadowStage = this; // validPunctualLightsCulling(ppl, camera);

          var pipeline = ppl;
          var shadowInfo = pipeline.pipelineSceneData.shadows; // const validPunctualLights = ppl.pipelineSceneData.validPunctualLights;

          var shadows = ppl.pipelineSceneData.shadows;

          if (!shadowInfo.enabled || shadowInfo.type !== ShadowType.ShadowMap) {
            return;
          } // const _validLights: renderer.scene.Light[] = [];
          // let n = 0;
          // let m = 0;
          // for (; n < shadowInfo.maxReceived && m < validPunctualLights.length;) {
          //     const light = validPunctualLights[m];
          //     if (light.type === LightType.SPOT) {
          //         const spotLight = light as renderer.scene.SpotLight;
          //         if (spotLight.shadowEnabled) {
          //             _validLights.push(light);
          //             n++;
          //         }
          //     }
          //     m++;
          // }


          this.mainLightShadows.length = 0;
          var cameraID = getCameraUniqueID(camera);
          var mainLight = camera.scene.mainLight; // build shadow map

          var mapWidth = shadows.size.x;
          var mapHeight = shadows.size.y;

          if (mainLight && mainLight.shadowEnabled) {
            var mainShadowName = "MainLightShadow" + cameraID;
            this.mainLightShadows[0] = mainShadowName;

            if (mainLight.shadowFixedArea) {
              this.buildShadowPass(this.mainLightShadows[0], ppl, camera, mainLight, 0, mapWidth, mapHeight);
            } else {
              var csmLevel = pipeline.pipelineSceneData.csmSupported ? mainLight.csmLevel : 1;

              for (var i = 0; i < csmLevel; i++) {
                this.mainLightShadows[i] = mainShadowName;
                this.buildShadowPass(this.mainLightShadows[i], ppl, camera, mainLight, i, mapWidth, mapHeight);
              }
            }
          } // for (let l = 0; l < _validLights.length; l++) {
          //     const light = _validLights[l];
          //     const passName = `SpotLightShadow${l.toString()}${cameraName}`;
          //     cameraInfo.spotLightShadowNames[l] = passName;
          //     this.buildShadowPass(passName, ppl,
          //         camera, light, 0, mapWidth, mapHeight);
          // }

        };

        return CustomShadowStage;
      }(BaseStage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'CustomShadowStage';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "textureFormat", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return gfx.Format.RGBA8;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/singleton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f3e08OCtCBKXY83CjMmxlQC", "singleton", undefined);

      var Singleton = exports('Singleton', /*#__PURE__*/function () {
        function Singleton() {}

        var _proto = Singleton.prototype;

        _proto.init = function init() {};

        _proto.clear = function clear() {
          Singleton._instance = null;
        };

        _createClass(Singleton, null, [{
          key: "Instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new this();
            }

            return this._instance;
          }
        }]);

        return Singleton;
      }());
      Singleton._instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sky.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, MeshRenderer, director, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8d02agJKzZCQ4Bli+ytrP6R", "sky", undefined);

      var ccclass = _decorator.ccclass,
          executeInEditMode = _decorator.executeInEditMode;
      var Sky = exports('Sky', (_dec = ccclass('custom.Sky'), _dec(_class = executeInEditMode(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Sky, _Component);

        function Sky() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Sky.prototype;

        _proto.start = function start() {
          var mr = this.getComponent(MeshRenderer);
          var skybox = director.getScene().globals.skybox;
          mr.material.setProperty('envMap', skybox.reflectionMap || skybox.envmap);
        };

        return Sky;
      }(Component)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/slider-2d.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Node, UITransform, v3, v2, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      v3 = module.v3;
      v2 = module.v2;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1c7fcAGirFNIJ7X24Ejpnf0", "slider-2d", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Slider2D = exports('Slider2D', (_dec = ccclass('Slider2D'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Slider2D, _Component);

        function Slider2D() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.pos = v3(0, 0, 0);
          _this.uipos = v2(0, 0);
          _this.point = Object.create(null);
          _this.uitran = Object.create(null);
          _this.size = v2(0, 0);
          _this.halfx = 0;
          _this.halfy = 0;
          _this.px = 0;
          _this.py = 0;
          _this.children = Object.create(null);
          return _this;
        }

        var _proto = Slider2D.prototype;

        _proto.start = function start() {
          this.node.on(Node.EventType.TOUCH_MOVE, this.onMove, this);
          this.point = this.node.children[0].children[0];
          this.children = this.point.children;
          this.uitran = this.node.getComponent(UITransform);
          this.size.x = this.uitran.contentSize.x;
          this.size.y = this.uitran.contentSize.y;
          this.halfx = this.size.x / 2;
          this.halfy = this.size.y / 2;
          this.set({
            x: Math.random(),
            y: Math.random()
          });
        };

        _proto.set = function set(value) {
          this.pos.x = this.size.x * value.x - this.halfx;
          this.pos.y = this.size.y * value.y - this.halfy;
          this.point.setPosition(this.pos);
        };

        _proto.onMove = function onMove(event) {
          var delta = event.getUIDelta();
          var dx = delta.x;
          var dy = delta.y;
          this.pos.x += dx;
          this.pos.y += dy;
          this.pos.x += this.halfx;
          this.pos.y += this.halfy;
          this.pos.x %= this.size.x;
          this.pos.y %= this.size.y;
          this.px = this.pos.x / this.size.x;
          this.py = this.pos.y / this.size.y;
          this.px = this.px < 0 ? 1 + this.px : this.px;
          this.py = this.py < 0 ? 1 + this.py : this.py;
          this.pos.x -= this.halfx;
          this.pos.y -= this.halfy;
          this.point.setPosition(this.pos);
        };

        _proto.getPercent = function getPercent() {
          return {
            x: this.px,
            y: this.py
          };
        };

        return Slider2D;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/smooth-local-z.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, Vec3, Component, Msg, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "74de3MEYBhD5q52b9G2UUCm", "smooth-local-z", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SmoothLocalZ = exports('SmoothLocalZ', (_dec = ccclass('SmoothLocalZ'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SmoothLocalZ, _Component);

        function SmoothLocalZ() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "smooth", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "wait", _descriptor2, _assertThisInitialized(_this));

          _this.pos = v3(0, 0, 0);
          _this.cur = v3(0, 0, 0);
          _this.offset = 0;
          _this.offset_x = 0;
          _this.original = v3(0, 0, 0);
          return _this;
        }

        var _proto = SmoothLocalZ.prototype;
        /*
        start () {
            UtilVec3.copy(this.pos, this.node.position);
            UtilVec3.copy(this.original, this.pos);
            this.pos.z = this.offset + this.original.z;
            UtilVec3.copy(this.cur, this.pos);
            this.cur.z = 30;
            this.node.setPosition(this.cur);
            Msg.on('set_offset_x', this.setOffsetX.bind(this));
        }
        */

        _proto.init = function init() {
          UtilVec3.copy(this.pos, this.node.position);
          UtilVec3.copy(this.original, this.pos);
          this.pos.z = this.offset + this.original.z;
          UtilVec3.copy(this.cur, this.pos);
          this.cur.z = 30;
          this.pos.z = 30;
          this.node.setPosition(this.cur);
          Msg.on('set_offset_x', this.setOffsetX.bind(this));
        };

        _proto.onDestroy = function onDestroy() {
          Msg.off('set_offset_x', this.setOffset.bind(this));
        };

        _proto.setOffset = function setOffset(offset) {
          this.offset = offset;
          this.pos.z = this.offset + this.original.z;
        };

        _proto.setOffsetX = function setOffsetX(offset) {
          this.pos.x = offset + this.original.x;
        };

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          if (this.wait > 0) {
            this.wait -= deltaTime;
            return;
          }

          this.smoothLerp(deltaTime);
        };

        _proto.smoothLerp = function smoothLerp(deltaTime) {
          Vec3.lerp(this.cur, this.cur, this.pos, deltaTime * this.smooth);
          this.node.setPosition(this.cur);
        };

        return SmoothLocalZ;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "smooth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "wait", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sound-actor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './sound.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCString, Component, Sound;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      Component = module.Component;
    }, function (module) {
      Sound = module.Sound;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "5127fk5a+hOWLZrpg8oBF9u", "sound-actor", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SoundActor = exports('SoundActor', (_dec = ccclass('SoundActor'), _dec2 = property(CCString), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SoundActor, _Component);

        function SoundActor() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sfx_name", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SoundActor.prototype;

        _proto.onEnable = function onEnable() {
          Sound.addSfx(this.node, this.sfx_name);
        };

        return SoundActor;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "sfx_name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sound-enable-play.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './sound.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCString, AudioSource, Component, Sound;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCString = module.CCString;
      AudioSource = module.AudioSource;
      Component = module.Component;
    }, function (module) {
      Sound = module.Sound;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "aaf92cB+ZNOXYISejst2Bd5", "sound-enable-play", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SoundEnablePlay = exports('SoundEnablePlay', (_dec = ccclass('SoundEnablePlay'), _dec2 = property(CCString), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SoundEnablePlay, _Component);

        function SoundEnablePlay() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sfx_name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "enable_distance", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "max_distance", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "max_sound", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "min_sound", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "relate_height", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "max_height", _descriptor7, _assertThisInitialized(_this));

          _this._audioSource = Object.create(null);
          _this._distance_percent = 1;
          _this._volume = 1;
          return _this;
        }

        var _proto = SoundEnablePlay.prototype;

        _proto.__preload = function __preload() {
          this._audioSource = this.node.addComponent(AudioSource);
          Sound.addSfx(this.node, this.sfx_name);

          if (this.relate_height) {
            var height = this.node.worldPosition.y;
            if (height > this.max_height) height = this.max_height;
            this._volume = height / this.max_height;
            if (this._volume > this.max_sound) this._volume = this.max_sound;
            if (this._volume < this.min_sound) this._volume = this.min_sound;
          }
        };

        _proto.onEnable = function onEnable() {
          this._audioSource.play();
        };

        _proto.onDisable = function onDisable() {
          this._audioSource.stop();
        };

        _proto.update = function update(deltaTime) {
          /*
          if (actor_main.target && actor_main.target.worldPosition) {
              var dis = Vec3.distance(this.node.worldPosition, actor_main.target.worldPosition);
              if (dis >= this.max_distance) dis = this.max_distance;
              this._audioSource.volume = Sound.volume * (1 - dis / this.max_distance) * this._volume * Sound.volume_load;
          }
          */
        };

        return SoundEnablePlay;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sfx_name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "enable_distance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "max_distance", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "max_sound", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.0;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "min_sound", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "relate_height", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "max_height", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sound.ts", ['cc', './save.ts', './msg.ts', './res.ts', './game.ts', './res-cache.ts'], function (exports) {
  'use strict';

  var cclegacy, AudioSource, Save, Msg, Res, Game, ResCache;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      AudioSource = module.AudioSource;
    }, function (module) {
      Save = module.Save;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      Game = module.Game;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      cclegacy._RF.push({}, "89c79RmqFxGcJ3YiE3Q/7K+", "sound", undefined);

      var Sound = exports('Sound', /*#__PURE__*/function () {
        function Sound() {}

        Sound.init = function init() {
          var _soundNode$getChildBy, _soundNode$getChildBy2; // Initialize sound prefab.


          var prefab = ResCache.Instance.getPrefab('sound');
          var soundNode = Res.inst(prefab, Game.Instance._poolNode);
          this._sfxAudio = (_soundNode$getChildBy = soundNode.getChildByName('sfx')) == null ? void 0 : _soundNode$getChildBy.getComponent(AudioSource);
          this._bgmAudio = (_soundNode$getChildBy2 = soundNode.getChildByName('bgm')) == null ? void 0 : _soundNode$getChildBy2.getComponent(AudioSource); // Init pool.

          this._poolRoot = soundNode.getChildByName('pool_root');
          this._templateSource = soundNode.getChildByName('template');

          for (var i = 0; i < this._sourcePoolCount; i++) this.addPool(); // Init sound volume.


          var volume = Save.Instance.get('sfx_volume');
          if (volume === undefined) volume = 1;
          this.volumeSound = volume; // Init sound music.

          var volumeMusic = Save.Instance.get('sfx_volume_music');
          if (volumeMusic === undefined) volumeMusic = 1;
          this.volumeMusic = volumeMusic;
          this.Refresh();
          Msg.on('sli_sound', this.setVolume.bind(this));
          Msg.on('sli_music', this.setVolumeMusic.bind(this));
          Msg.bind('sound_load', this.onLoad, this);
          Msg.bind('sound_load_end', this.onLoadEnd, this);
        };

        Sound.addPool = function addPool() {
          var newNode = Res.instNode(this._templateSource, this._poolRoot);

          this._pool.push(newNode.getComponent(AudioSource));
        };

        Sound.setVolume = function setVolume(volume) {
          this.volumeSound = volume;
          this._sfxAudio.volume = this.volumeSound;
          Save.Instance.set('sfx_volume', volume);
        };

        Sound.setVolumeMusic = function setVolumeMusic(volume) {
          this.volumeMusic = volume;
          this._bgmAudio.volume = this.volumeMusic;
          Save.Instance.set('sfx_volume_music', volume);
        };

        Sound.Refresh = function Refresh() {
          this._sfxAudio.volume = this.volumeSound;
          this._bgmAudio.volume = this.volumeMusic;
        };

        Sound.playLoop = function playLoop(key, volumeMultiply) {
          var _this = this;

          if (volumeMultiply === void 0) {
            volumeMultiply = 1;
          } //find unused.


          var index = -1;

          for (var i = 0; i < this._pool.length; i++) {
            if (this._pool[i].clip === null) {
              index = i;
              break;
            }
          } // add new one.


          if (index === -1) {
            this.addPool();
            index = this._pool.length - 1;
          }

          Res.loadAudio("sound/" + key, function (err, asset) {
            if (err) {
              throw new Error("Can not find sound resource : sound/" + key);
            }

            if (asset) {
              _this._pool[index].clip = asset;
              _this._pool[index].volume = _this.volumeSound * volumeMultiply;
              _this._pool[index].loop = true;

              _this._pool[index].play();
            }
          });
          return index;
        };

        Sound.offing = function offing(index) {
          this._pool[index].stop();

          this._pool[index].loop = false;
          this._pool[index].clip = null;
        };

        Sound.on = function on(key, volumeMultiply) {
          var _this2 = this;

          if (volumeMultiply === void 0) {
            volumeMultiply = 1;
          }

          Res.loadAudio("sound/" + key, function (err, asset) {
            if (asset) {
              _this2._sfxAudio.playOneShot(asset, _this2.volumeSound * volumeMultiply * _this2.sceneMusicPercent);
            }
          });
        };

        Sound.addSfx = function addSfx(node, key, volume) {
          var _this3 = this;

          if (volume === void 0) {
            volume = 1;
          }

          Res.loadAudio("sound/" + key, function (err, asset) {
            if (err) {
              throw new Error("Can not find sound resource : sound/" + key);
            }

            if (asset) {
              if (!node.isValid) return;
              var source = node.getComponent(AudioSource);
              source.clip = asset;
              source.loop = true;
              source.volume = volume * _this3._volumeLoad;
            }
          });
        };

        Sound.off = function off(key) {};

        Sound.onBGM = function onBGM(key) {
          var _this4 = this;

          if (this.currentBGMName == key) return;
          this.currentBGMName = key;
          Res.loadAudio("sound/" + key, function (err, asset) {
            if (err) {
              throw new Error("Can not find sound resource : sound/" + key);
            }

            if (asset) {
              _this4._bgmAudio.stop();

              _this4._bgmAudio.clip = asset;
              _this4._bgmAudio.loop = true;
              _this4._bgmAudio.volume = _this4.volumeMusic;

              _this4._bgmAudio.play();
            }
          });
        };

        Sound.offBGM = function offBGM(key) {
          this._bgmAudio.stop();

          this._bgmAudio.clip = null;
          this._bgmAudio.loop = false;
          this.currentBGMName = '';
        };

        Sound.updateBGM = function updateBGM() {
          this._bgmAudio.volume = this.volumeMusic * this.sceneMusicPercent;
        };

        Sound.pauseBGM = function pauseBGM() {
          this._bgmAudio.pause();
        };

        Sound.onLoad = function onLoad() {
          this._volumeLoad = 0;
        };

        Sound.onLoadEnd = function onLoadEnd() {
          this._volumeLoad = 1;
        };

        return Sound;
      }());
      Sound._sfxAudio = void 0;
      Sound._bgmAudio = void 0;
      Sound.volumeSound = 0.5;
      Sound.volumeMusic = 1;
      Sound.sceneMusicPercent = 1;
      Sound._volumeLoad = 1;
      Sound._sourcePoolCount = 30;
      Sound._pool = [];
      Sound._templateSource = void 0;
      Sound._poolRoot = void 0;
      Sound.currentBGMName = '';

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/spector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './href-setting.ts'], function () {
  'use strict';

  var _asyncToGenerator, _regeneratorRuntime, cclegacy, game, input, Input, KeyCode, Game, HrefSetting;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Game = module.Game;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }],
    execute: function () {
      cclegacy._RF.push({}, "05e76hplqRPUaior27cZIz0", "spector", undefined); // if (true) {


      if (HrefSetting.spector) {
        var init = /*#__PURE__*/function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var fullCapture, spector;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return Promise.all([new Promise(function (resolve) {
                    SPECTORTOOLS.Loader.onReady(function () {
                      resolve(null);
                    });
                  }), new Promise(function (resolve) {
                    game.on(Game.EVENT_GAME_INITED, function () {
                      resolve(null);
                    });
                  })]);

                case 2:
                  fullCapture = true;
                  spector = new globalThis.SPECTOR.Spector();
                  spector.fullCapture = fullCapture;
                  spector.timeSpy.spyRequestAnimationFrame('requestAnimationFrame', window);
                  spector.displayUI(undefined, undefined, false, false);
                  spector.spyCanvas(game.canvas);
                  globalThis.SPECTOR.Spector.getFirstAvailable3dContext(game.canvas);
                  globalThis.spector = spector;
                  globalThis.rAF = window.requestAnimationFrame;
                  game._pacer._rAF = globalThis.rAF;

                  spector.capture = function () {
                    var frameRate = game.frameRate;
                    game.frameRate = 60;
                    spector.captureCanvas(game.canvas, undefined, undefined, fullCapture); // game.frameRate = frameRate
                  };

                  input.on(Input.EventType.KEY_DOWN, function (e) {
                    if (e.keyCode === KeyCode.KEY_H) {
                      spector.capture();
                    }
                  });

                case 14:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));

          return function init() {
            return _ref.apply(this, arguments);
          };
        }();

        var SPECTORTOOLS;

        (function (SPECTORTOOLS) {
          var Loader = function () {
            var queue;
            var callback; // useDist = true

            var host = 'http://' + location.host.split(':')[0];

            function Loader() {
              queue = []; // useDist = (document.location.href.toLowerCase().indexOf('dist=true') > 0);

              callback = null;
            }

            Loader.prototype.dequeue = function () {
              if (queue.length == 0) {
                if (callback) {
                  callback();
                }

                console.log('Scripts loaded');
                return;
              }

              var url = queue.shift();
              var head = document.getElementsByTagName('head')[0];
              var script = document.createElement('script');
              script.type = 'text/javascript';
              script.src = url;
              var self = this;

              script.onload = function () {
                self.dequeue();
              };

              head.appendChild(script);
            };

            Loader.prototype.loadScript = function (url) {
              queue.push(url);
            };

            Loader.prototype.loadSPECTORScripts = function () {
              {
                this.loadScript(host + ":1337/.temp/spector.bundle.js");
              }
            };

            Loader.prototype.onReady = function (newCallback) {
              callback = newCallback;
              return this;
            };

            Loader.prototype.load = function (scriptPaths) {
              var self = this;
              self.loadScript(host + ":35729/livereload.js?snipver=1");
              self.loadSPECTORScripts();

              if (scriptPaths) {
                for (var i = 0; i < scriptPaths.length; i++) {
                  var scriptPath = scriptPaths[i];
                  self.loadScript(scriptPath);
                }
              }

              self.dequeue();
            };

            return Loader;
          }();

          var loader = new Loader();
          SPECTORTOOLS.Loader = loader;
        })(SPECTORTOOLS || (SPECTORTOOLS = {}));

        SPECTORTOOLS.Loader.load();
        init();
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/spwans-group.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, MeshRenderer, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "aa3b7bN4C1NW7tPeG9UruSw", "spwans-group", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpawnsGroup = exports('SpawnsGroup', (_dec = ccclass('SpawnsGroup'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpawnsGroup, _Component);

        function SpawnsGroup() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SpawnsGroup.prototype;

        _proto.onEnable = function onEnable() {
          this.node.children.forEach(function (child) {
            var meshRender = child.getComponent(MeshRenderer);
            if (meshRender) meshRender.enabled = false;
          });
        };

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        return SpawnsGroup;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/stage.ts", ['cc', './base-stage.ts', './blit-stage.ts', './graph.ts', './utils2.ts', './nodes.ts', './forward-stage.ts', './deferred-gbuffer-stage.ts', './deferred-lighting-stage.ts', './deferred-post-stage.ts', './bloom-stage.ts', './taa-stage.ts', './fsr-stage.ts', './forward-post-stage.ts', './zoom-screen-stage.ts', './shadow-stage.ts'], function (exports) {
  'use strict';

  var cclegacy, js, gfx, BaseStage, BlitStage, liteGraph, readPixels, updateNextNodes, ForwardStage, DeferredGBufferStage, DeferredLightingStage, DeferredPostStage, BloomStage, TAAStage, FSRStage, ForwardPostStage, ZoomScreenStage, CustomShadowStage;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      js = module.js;
      gfx = module.gfx;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      BlitStage = module.BlitStage;
    }, function (module) {
      liteGraph = module.liteGraph;
    }, function (module) {
      readPixels = module.readPixels;
    }, function (module) {
      updateNextNodes = module.updateNextNodes;
    }, function (module) {
      ForwardStage = module.ForwardStage;
    }, function (module) {
      DeferredGBufferStage = module.DeferredGBufferStage;
    }, function (module) {
      DeferredLightingStage = module.DeferredLightingStage;
    }, function (module) {
      DeferredPostStage = module.DeferredPostStage;
    }, function (module) {
      BloomStage = module.BloomStage;
    }, function (module) {
      TAAStage = module.TAAStage;
    }, function (module) {
      FSRStage = module.FSRStage;
    }, function (module) {
      ForwardPostStage = module.ForwardPostStage;
    }, function (module) {
      ZoomScreenStage = module.ZoomScreenStage;
    }, function (module) {
      CustomShadowStage = module.CustomShadowStage;
    }],
    execute: function () {
      exports('createStageGraph', createStageGraph);

      cclegacy._RF.push({}, "44cbbHN6SNG9Z7jrxDUJKW6", "stage", undefined);

      function createStageGraph(sclass) {
        var name = js.getClassName(sclass);

        function Stage() {
          var self = this; // input slots

          self.addInput('Camera Output', 'Camera Output');
          self.addInput('RenderTexture', 'RenderTexture');
          self.addInput('Custom Size', 'vec2'); // output slots

          self.addOutput('RenderTexture', 'RenderTexture');
          var onPropertyChanges = new Map();
          var stage = new sclass();
          this.stage = stage;
          self.addProperty('showResult', false, 'bool');

          function updateSize() {
            var originHeight = self.computeSize()[1];
            self.size[1] = originHeight;

            if (stage.outputTexture) {
              var width = self.size[0];
              var height = width * stage.outputTexture.height / stage.outputTexture.width;
              height *= stage.outputTexture.window.framebuffer.colorTextures.length;

              if (self.properties.showResult) {
                self.size[1] = originHeight + height + 5;
              }
            }
          }

          onPropertyChanges.set('material', function (v) {}); // if (globalThis.pipelineAssets) {
          //     let names = globalThis.pipelineAssets.materialNames;
          //     function setMaterial (effectName: string) {
          //         stage.material = globalThis.pipelineAssets.materialMap.get(effectName)
          //     }
          //     let name = 'material';
          //     let value = this.properties.material || stage.materialName || names[0];
          //     let widget = self.addWidget("combo", name, value, name, { values: names });
          //     self.addProperty(name, widget.value, widget.type);
          //     setMaterial(value);
          //     onPropertyChanges.set('material', (v: string) => {
          //         setMaterial(v);
          //     })
          //     self.addWidget('button', 'show result', null, () => {
          //         self.properties.showResult = !self.properties.showResult;
          //     });
          // }

          var props = sclass.__props__;
          var attrs = sclass.__attrs__;
          props.forEach(function (p) {
            if (p.startsWith('_')) {
              return;
            }

            if (p === 'inputType' || p === 'renderToScreen') {
              return;
            }

            var value = stage[p];
            var type = attrs[p + '$_$type'];
            var widget;

            if (type === 'Enum') {
              var enumList = attrs[p + '$_$enumList'].map(function (e) {
                return e.name;
              });
              self.addWidget("combo", p, enumList[value], p, {
                values: enumList
              });
              onPropertyChanges.set(p, function (v) {
                stage[p] = enumList.indexOf(v);
              });
            } else if (typeof value === 'string') {
              widget = self.addWidget("text", p, value, p);
            } else if (typeof value === 'number') {
              widget = self.addWidget("number", p, value, p);
            } else if (typeof value === 'boolean') {
              widget = self.addWidget("toggle", p, value, p);
            }

            if (widget) {
              self.addProperty(p, widget.value, widget.type);
            }
          });

          self.onPropertyChanged = function (name, value, prevalue) {
            var func = onPropertyChanges.get(name);

            if (func) {
              func(value, prevalue);
            } else {
              stage[name] = value;
            }
          };

          this.onUpdateStage = function updateStage(prev, stages) {
            stage.renderToScreen = false; // stage.outputName = ''

            if (stage.checkEnable()) {
              var customSize = self.getInputData(2);

              if (customSize) {
                stage.useCustomSize = true;
                stage.customSize.x = customSize[0];
                stage.customSize.y = customSize[1];
              } else {
                stage.useCustomSize = false;
              }

              stages.push(stage);
              updateNextNodes(self, stages);
            } else {
              updateNextNodes(prev, stages, 0, self.getOutputNodes(0));
            }
          };

          function createDrawFunc(index) {
            if (index === void 0) {
              index = 0;
            }

            var imgData;
            var imgCanvas;
            var imgCtx;
            var buffer32f;
            return function draw(ctx, tex) {
              var imgWidth = self.size[0];
              var imgHeight = imgWidth * stage.outputTexture.height / stage.outputTexture.width;
              var width = stage.outputTexture.width;
              var height = stage.outputTexture.height;

              if (!imgData) {
                imgCanvas = document.createElement('canvas');
                imgCanvas.width = width;
                imgCanvas.height = height;
                imgCtx = imgCanvas.getContext('2d');
                imgData = imgCtx.getImageData(0, 0, width, height);
              }

              if (tex.format === gfx.Format.R32F) {
                if (!buffer32f) {
                  buffer32f = new Float32Array(width * height);
                }

                readPixels(stage.outputTexture, buffer32f, index);

                for (var x = 0; x < width; x++) {
                  for (var y = 0; y < height; y++) {
                    var dstIdx = (x + y * width) * 4;
                    imgData.data[dstIdx] = buffer32f[x + y * width] * 255;
                    imgData.data[dstIdx + 1] = 0;
                    imgData.data[dstIdx + 2] = 0;
                    imgData.data[dstIdx + 3] = 255;
                  }
                }
              } else if (tex.format === gfx.Format.RGBA32F) {
                if (!buffer32f) {
                  buffer32f = new Float32Array(width * height * 4);
                }

                readPixels(stage.outputTexture, buffer32f, index);

                for (var _x = 0; _x < width; _x++) {
                  for (var _y = 0; _y < height; _y++) {
                    var _dstIdx = (_x + _y * width) * 4;

                    imgData.data[_dstIdx] = buffer32f[_dstIdx] * 255;
                    imgData.data[_dstIdx + 1] = buffer32f[_dstIdx + 1] * 255;
                    imgData.data[_dstIdx + 2] = buffer32f[_dstIdx + 2] * 255;
                    imgData.data[_dstIdx + 3] = buffer32f[_dstIdx + 3] * 255;
                  }
                }
              } else {
                readPixels(stage.outputTexture, imgData.data, index);
              }

              imgCtx.putImageData(imgData, 0, 0);
              var colorTextures = stage.outputTexture.window.framebuffer.colorTextures;
              ctx.save();
              ctx.scale(1, -1);
              ctx.drawImage(imgCanvas, 0, 0, width, height, 0, -self.size[1] + imgHeight * (colorTextures.length - 1 - index), imgWidth, imgHeight);
              ctx.restore();
            };
          }

          self.onDrawBackground = function (ctx, canvas) {
            updateSize();

            if (self.properties.showResult && stage.outputTexture) {
              var colorTextures = stage.outputTexture.window.framebuffer.colorTextures;

              for (var i = 0; i < colorTextures.length; i++) {
                var funcName = 'draw_color_' + i;

                if (!self[funcName]) {
                  self[funcName] = createDrawFunc(i);
                }

                self[funcName](ctx, colorTextures[i]);
              }
            }
          };

          self.onRemoved = function () {
            stage.destroy();
          };

          self.size = self.computeSize();
        }

        Stage.title = name;
        delete liteGraph.registered_node_types["pipeline/" + name];
        liteGraph.registerNodeType("pipeline/" + name, Stage);
      }

      createStageGraph(BaseStage);
      createStageGraph(BlitStage);
      createStageGraph(ForwardStage);
      createStageGraph(ForwardPostStage);
      createStageGraph(DeferredGBufferStage);
      createStageGraph(DeferredLightingStage);
      createStageGraph(DeferredPostStage);
      createStageGraph(BloomStage);
      createStageGraph(TAAStage);
      createStageGraph(FSRStage);
      createStageGraph(ZoomScreenStage);
      createStageGraph(CustomShadowStage);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/start.ts", ['cc', './href-setting.ts', './graph.ts'], function () {
  'use strict';

  var cclegacy, sys, game, Game, HrefSetting, showGraph;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      game = module.game;
      Game = module.Game;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }, function (module) {
      showGraph = module.showGraph;
    }],
    execute: function () {
      cclegacy._RF.push({}, "31d6apd60BOOpnR3EwV07Ur", "start", undefined); // if (!EDITOR) {
      //     game.on(Game.EVENT_GAME_INITED, () => {
      //         loadGraph();
      //     })
      // }
      // 运行时环境中添加按钮来切换图的显示


      if (sys.isBrowser) {
        game.on(Game.EVENT_GAME_INITED, function () {
          if (HrefSetting.graph) {
            var showing = false;
            var btn = document.createElement('button');
            btn.innerHTML = 'show';

            btn.onclick = function () {
              showing = !showing;
              btn.innerHTML = showing ? 'hide' : 'show';
              showGraph(showing);
            };

            btn.style = "\n                position:absolute;\n                top: 0px;\n                right: 0px;\n                z-index: 999;\n            ";
            document.body.appendChild(btn);
          }
        });
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/static-area-batch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './math.ts', './save-gltf.ts', './static-batch-comp.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _createClass, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, _createForOfIteratorHelperLoose, cclegacy, _decorator, Vec3, Node, Component, geometry, Vec4, Mat4, gfx, MeshRenderer, director, powerOfTwo, MeshData, toGltfMesh, saveGltf, StaticBatchComp;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _createClass = module.createClass;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Node = module.Node;
      Component = module.Component;
      geometry = module.geometry;
      Vec4 = module.Vec4;
      Mat4 = module.Mat4;
      gfx = module.gfx;
      MeshRenderer = module.MeshRenderer;
      director = module.director;
    }, function (module) {
      powerOfTwo = module.powerOfTwo;
    }, function (module) {
      MeshData = module.MeshData;
      toGltfMesh = module.toGltfMesh;
      saveGltf = module.saveGltf;
    }, function (module) {
      StaticBatchComp = module.StaticBatchComp;
    }],
    execute: function () {
      var _dec, _class, _dec2, _class3, _class4, _descriptor, _dec3, _dec4, _dec5, _class6, _class7, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "d7239uj5aNLBJGJBD1rTayB", "static-area-batch", undefined);

      var ccclass = _decorator.ccclass,
          executeInEditMode = _decorator.executeInEditMode,
          property = _decorator.property;
      var SubMeshRenderer = (_dec = ccclass('SubMeshRenderer'), _dec(_class = function SubMeshRenderer(index, mr) {
        this.index = void 0;
        this.mr = void 0;
        this.index = index;
        this.mr = mr;
      }) || _class);
      var StaticAreaBatchBlock = (_dec2 = ccclass('StaticAreaBatchBlock'), _dec2(_class3 = (_class4 = /*#__PURE__*/function () {
        function StaticAreaBatchBlock() {
          this.name = '';
          this.aabb = new geometry.AABB();
          this.renderers = new Map();

          _initializerDefineProperty(this, "_totalCount", _descriptor, this);

          this._materialCount = 0;
        }

        _createClass(StaticAreaBatchBlock, [{
          key: "totalCount",
          get: function get() {
            return this._totalCount;
          }
        }, {
          key: "materialCount",
          get: function get() {
            return this._materialCount;
          }
        }]);

        return StaticAreaBatchBlock;
      }(), (_descriptor = _applyDecoratedDescriptor(_class4.prototype, "_totalCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class4.prototype, "totalCount", [property], Object.getOwnPropertyDescriptor(_class4.prototype, "totalCount"), _class4.prototype), _applyDecoratedDescriptor(_class4.prototype, "materialCount", [property], Object.getOwnPropertyDescriptor(_class4.prototype, "materialCount"), _class4.prototype)), _class4)) || _class3);
      var tempVec3 = new Vec3();
      var StaticAreaBatch = exports('StaticAreaBatch', (_dec3 = ccclass('StaticAreaBatch'), _dec4 = property(Node), _dec5 = property(StaticAreaBatchBlock), _dec3(_class6 = executeInEditMode(_class6 = (_class7 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StaticAreaBatch, _Component);

        function StaticAreaBatch() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "root", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "blockSize", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "offset", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxLightMapSize", _descriptor5, _assertThisInitialized(_this));

          _this.blockMap = new Map();

          _initializerDefineProperty(_this, "blocks", _descriptor6, _assertThisInitialized(_this));

          _this.totalRenderers = [];

          _initializerDefineProperty(_this, "_totalCount", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = StaticAreaBatch.prototype;

        _proto.doClear = function doClear() {
          this.root.active = true;
          this.node.removeAllChildren();
          this.blocks.length = 0;
          this.blockMap.clear();
        };

        _proto.doRevert = function doRevert() {
          this.root.active = !this.root.active;
          var children = this.node.children;

          for (var i = 0; i < children.length; i++) {
            children[i].active = !this.root.active;
          }
        };

        _proto.doMerge = /*#__PURE__*/function () {
          var _doMerge = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _this2 = this;

            var processedCount, toProcessCount, startTime, tempMin, tempMax, tempNormal, tempMat4, _loop, _iterator, _step;

            return _regeneratorRuntime().wrap(function _callee2$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this.doSearch();

                case 2:
                  processedCount = 0;
                  toProcessCount = this._totalCount;
                  startTime = Date.now();
                  tempMin = new Vec3();
                  tempMax = new Vec3();
                  tempNormal = new Vec4();
                  tempMat4 = new Mat4();
                  this.node.removeAllChildren();
                  _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
                    var blockPair, block, center, node, _loop2, _iterator2, _step2;

                    return _regeneratorRuntime().wrap(function _loop$(_context3) {
                      while (1) switch (_context3.prev = _context3.next) {
                        case 0:
                          blockPair = _step.value;
                          block = blockPair[1];
                          center = block.aabb.center;
                          node = new Node(block.name);
                          node.parent = _this2.node;
                          node.position = center;
                          node.active = false;
                          _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {
                            var rendPair, renderers, countPerRow, startVerticeIdx, meshData, min, max, lightMapSize, subfix, end, i, _meshData$uv, mr, idx, pos, mergedVertexCount, pi, uv0, normals, ni, uv1, uv1OffsetX, uv1OffsetY, uvi, indices, _i, totalProcess, costTime, leftTime;

                            return _regeneratorRuntime().wrap(function _loop2$(_context2) {
                              while (1) switch (_context2.prev = _context2.next) {
                                case 0:
                                  rendPair = _step2.value;
                                  renderers = rendPair[1];
                                  countPerRow = Math.ceil(Math.pow(renderers.length, 0.5));
                                  startVerticeIdx = 0;
                                  meshData = new MeshData();
                                  min = new Vec3(Infinity, Infinity, Infinity);
                                  max = new Vec3(-Infinity, -Infinity, -Infinity);
                                  lightMapSize = 0;
                                  subfix = 0;

                                  end = /*#__PURE__*/function () {
                                    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                                      var mat, name, gltf, gltfUrl, meshUrl, mesh, sub, mr;
                                      return _regeneratorRuntime().wrap(function _callee$(_context) {
                                        while (1) switch (_context.prev = _context.next) {
                                          case 0:
                                            meshData.min.set(min).subtract(center);
                                            meshData.max.set(max).subtract(center);
                                            mat = rendPair[0];
                                            name = block.name + '_' + mat.name;
                                            gltf = toGltfMesh(name, meshData);
                                            gltfUrl = "db://assets/" + director.getScene().name + "/merged-meshes/" + name + ".gltf";
                                            meshUrl = gltfUrl + ("/" + name + ".mesh");
                                            _context.next = 9;
                                            return saveGltf(gltf, gltfUrl, meshUrl);

                                          case 9:
                                            mesh = _context.sent;
                                            sub = new Node(mat.name + subfix++);
                                            mr = sub.addComponent(MeshRenderer);
                                            mr.mesh = mesh;
                                            mr.material = mat;
                                            sub.addComponent(StaticBatchComp);
                                            mr.bakeSettings.bakeable = true;
                                            mr.bakeSettings.castShadow = true;
                                            mr.bakeSettings.receiveShadow = true;
                                            mr.bakeSettings.lightmapSize = Math.min(_this2.maxLightMapSize, powerOfTwo(lightMapSize));
                                            sub.parent = node;

                                          case 20:
                                          case "end":
                                            return _context.stop();
                                        }
                                      }, _callee);
                                    }));

                                    return function end() {
                                      return _ref.apply(this, arguments);
                                    };
                                  }();

                                  i = 0;

                                case 11:
                                  if (!(i < renderers.length)) {
                                    _context2.next = 48;
                                    break;
                                  }

                                  mr = renderers[i].mr;
                                  idx = renderers[i].index;
                                  pos = mr.mesh.readAttribute(idx, gfx.AttributeName.ATTR_POSITION);
                                  mergedVertexCount = (meshData.vertices.length + pos.length) / 3;

                                  if (!(mergedVertexCount > 65535)) {
                                    _context2.next = 24;
                                    break;
                                  }

                                  console.warn(block.name + "-" + rendPair[0].name + " vertex count overflow 65535");
                                  _context2.next = 20;
                                  return end();

                                case 20:
                                  startVerticeIdx = 0;
                                  meshData = new MeshData();
                                  min = new Vec3(Infinity, Infinity, Infinity);
                                  max = new Vec3(-Infinity, -Infinity, -Infinity);

                                case 24:
                                  for (pi = 0; pi < pos.length; pi += 3) {
                                    tempVec3.set(pos[pi], pos[pi + 1], pos[pi + 2]);
                                    Vec3.transformMat4(tempVec3, tempVec3, mr.node.worldMatrix);
                                    meshData.vertices.push(tempVec3.x - center.x, tempVec3.y - center.y, tempVec3.z - center.z);
                                  }

                                  uv0 = mr.mesh.readAttribute(idx, gfx.AttributeName.ATTR_TEX_COORD);

                                  (_meshData$uv = meshData.uv).push.apply(_meshData$uv, uv0);

                                  Mat4.inverseTranspose(tempMat4, mr.node.worldMatrix);
                                  normals = mr.mesh.readAttribute(idx, gfx.AttributeName.ATTR_NORMAL);

                                  for (ni = 0; ni < normals.length; ni += 3) {
                                    tempNormal.set(normals[ni], normals[ni + 1], normals[ni + 2], 0);
                                    Vec4.transformMat4(tempNormal, tempNormal, tempMat4);
                                    tempNormal.normalize();
                                    meshData.normals.push(tempNormal.x, tempNormal.y, tempNormal.z);
                                  }

                                  mr.model.worldBounds.getBoundary(tempMin, tempMax);
                                  Vec3.min(min, min, tempMin);
                                  Vec3.max(max, max, tempMax);
                                  uv1 = mr.mesh.readAttribute(idx, gfx.AttributeName.ATTR_TEX_COORD1);
                                  uv1OffsetX = i % countPerRow;
                                  uv1OffsetY = Math.floor(i / countPerRow);

                                  for (uvi = 0; uvi < uv1.length; uvi += 2) {
                                    meshData.uv1.push((uv1OffsetX + uv1[uvi]) / countPerRow, (uv1OffsetY + uv1[uvi + 1]) / countPerRow);
                                  }

                                  indices = mr.mesh.readIndices(idx);

                                  for (_i = 0; _i < indices.length; _i++) {
                                    meshData.indices.push(indices[_i] + startVerticeIdx);
                                  }

                                  startVerticeIdx += pos.length / 3;
                                  lightMapSize += mr.bakeSettings.lightmapSize;
                                  totalProcess = ++processedCount / toProcessCount;
                                  costTime = (Date.now() - startTime) / 1000;
                                  leftTime = Math.floor(costTime / totalProcess * (1 - totalProcess));
                                  console.log("static merge progress : " + totalProcess + ", leftTime: " + leftTime + "s");

                                case 45:
                                  i++;
                                  _context2.next = 11;
                                  break;

                                case 48:
                                  _context2.next = 50;
                                  return end();

                                case 50:
                                case "end":
                                  return _context2.stop();
                              }
                            }, _loop2);
                          });
                          _iterator2 = _createForOfIteratorHelperLoose(block.renderers);

                        case 9:
                          if ((_step2 = _iterator2()).done) {
                            _context3.next = 13;
                            break;
                          }

                          return _context3.delegateYield(_loop2(), "t0", 11);

                        case 11:
                          _context3.next = 9;
                          break;

                        case 13:
                        case "end":
                          return _context3.stop();
                      }
                    }, _loop);
                  });
                  _iterator = _createForOfIteratorHelperLoose(this.blockMap);

                case 12:
                  if ((_step = _iterator()).done) {
                    _context4.next = 16;
                    break;
                  }

                  return _context4.delegateYield(_loop(), "t0", 14);

                case 14:
                  _context4.next = 12;
                  break;

                case 16:
                  this.doRevert();
                  console.log("finished static merge progress.");

                case 18:
                case "end":
                  return _context4.stop();
              }
            }, _callee2, this);
          }));

          function doMerge() {
            return _doMerge.apply(this, arguments);
          }

          return doMerge;
        }();

        _proto.doSearch = /*#__PURE__*/function () {
          var _doSearch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            var _this3 = this;

            var mrs, blockSize, blockMap, blocks;
            return _regeneratorRuntime().wrap(function _callee3$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  if (this.root) {
                    _context5.next = 2;
                    break;
                  }

                  return _context5.abrupt("return");

                case 2:
                  this.root.active = true;
                  globalThis.cce.Engine.repaintInEditMode();
                  _context5.next = 6;
                  return new Promise(function (resolve) {
                    setTimeout(resolve, 500);
                  });

                case 6:
                  mrs = this.root.getComponentsInChildren(MeshRenderer);
                  mrs = mrs.filter(function (mr) {
                    return mr.enabledInHierarchy;
                  });
                  this.totalRenderers = mrs;
                  blockSize = this.blockSize;
                  blockMap = this.blockMap;
                  blockMap.clear();
                  blocks = this.blocks;
                  blocks.length = 0;
                  mrs.forEach(function (mr) {
                    var pos = mr.model.worldBounds.center;
                    var x = Math.floor((pos.x + _this3.offset.x) / blockSize.x);
                    var y = Math.floor((pos.y + _this3.offset.y) / blockSize.y);
                    var z = Math.floor((pos.z + _this3.offset.z) / blockSize.z);
                    var name = x + "_" + y + "_" + z;
                    var block = blockMap.get(name);

                    if (!block) {
                      block = new StaticAreaBatchBlock();
                      block.aabb.halfExtents.multiply(blockSize).multiplyScalar(0.5);
                      block.aabb.center.set(x, y, z).multiply(blockSize);
                      block.aabb.center.add(block.aabb.halfExtents);
                      block.aabb.center.subtract(_this3.offset);
                      block.name = name;
                      blockMap.set(name, block);
                      blocks.push(block);
                    }

                    mr.sharedMaterials.forEach(function (mat, idx) {
                      var smr = new SubMeshRenderer(idx, mr);

                      if (!mat) {
                        console.warn(mr.model.node.name + " material " + idx + " is empty");
                        return;
                      }

                      if (!mr.model.subModels[idx]) {
                        return;
                      }

                      var renderers = block.renderers.get(mat);

                      if (!renderers) {
                        renderers = [];
                        block._materialCount++;
                        block.renderers.set(mat, renderers);
                      }

                      block._totalCount++;
                      _this3._totalCount++;
                      renderers.push(smr);
                    });
                  });

                case 15:
                case "end":
                  return _context5.stop();
              }
            }, _callee3, this);
          }));

          function doSearch() {
            return _doSearch.apply(this, arguments);
          }

          return doSearch;
        }();

        _createClass(StaticAreaBatch, [{
          key: "merge",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this.doMerge();
          }
        }, {
          key: "search",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this.doSearch();
          }
        }, {
          key: "revert",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this.doRevert();
          }
        }, {
          key: "clear",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this.doClear();
          }
        }, {
          key: "totalBatch",
          get: function get() {
            var count = 0;
            this.blocks.forEach(function (b) {
              count += b.materialCount;
            });
            return count;
          }
        }, {
          key: "totalCount",
          get: function get() {
            return this._totalCount;
          }
        }]);

        return StaticAreaBatch;
      }(Component), (_descriptor2 = _applyDecoratedDescriptor(_class7.prototype, "root", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class7.prototype, "merge", [property], Object.getOwnPropertyDescriptor(_class7.prototype, "merge"), _class7.prototype), _applyDecoratedDescriptor(_class7.prototype, "search", [property], Object.getOwnPropertyDescriptor(_class7.prototype, "search"), _class7.prototype), _applyDecoratedDescriptor(_class7.prototype, "revert", [property], Object.getOwnPropertyDescriptor(_class7.prototype, "revert"), _class7.prototype), _applyDecoratedDescriptor(_class7.prototype, "clear", [property], Object.getOwnPropertyDescriptor(_class7.prototype, "clear"), _class7.prototype), _descriptor3 = _applyDecoratedDescriptor(_class7.prototype, "blockSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(30, 30, 30);
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class7.prototype, "offset", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(-15, -15, -15);
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class7.prototype, "maxLightMapSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1024;
        }
      }), _applyDecoratedDescriptor(_class7.prototype, "totalBatch", [property], Object.getOwnPropertyDescriptor(_class7.prototype, "totalBatch"), _class7.prototype), _descriptor6 = _applyDecoratedDescriptor(_class7.prototype, "blocks", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class7.prototype, "_totalCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class7.prototype, "totalCount", [property], Object.getOwnPropertyDescriptor(_class7.prototype, "totalCount"), _class7.prototype)), _class7)) || _class6) || _class6));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/static-batch-comp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, MeshRenderer, renderer, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      renderer = module.renderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "05f80qLK7tC04BolmJwrKOp", "static-batch-comp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var StaticBatchComp = exports('StaticBatchComp', (_dec = ccclass('StaticBatchComp'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StaticBatchComp, _Component);

        function StaticBatchComp() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = StaticBatchComp.prototype;

        _proto.start = function start() {
          var mr = this.getComponent(MeshRenderer);
          var material = new renderer.MaterialInstance({
            parent: mr.material
          });
          material.recompileShaders({
            USE_INSTANCING: false
          });
          mr.material = material;
        };

        return StaticBatchComp;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/static-culling.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, MeshRenderer, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b68edupTklC4aG6s/2VtgcP", "static-culling", undefined);

      var ccclass = _decorator.ccclass,
          executeInEditMode = _decorator.executeInEditMode;
      var StaticCulling = exports('StaticCulling', (_dec = ccclass('StaticCulling'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StaticCulling, _Component);

        function StaticCulling() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = StaticCulling.prototype;

        _proto.start = function start() {
          var _this = this;

          setTimeout(function () {
            _this.hack();
          }, 1500);
        };

        _proto.hack = function hack() {
          var mrs = this.node.getComponentsInChildren(MeshRenderer);
          mrs.forEach(function (mr) {
            mr.model.updateUBOs = function () {};
          });
        };

        return StaticCulling;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/static-occlusion-area.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './static-occlusion-block.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Component, Vec3, CullingBlock;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Vec3 = module.Vec3;
    }, function (module) {
      CullingBlock = module.CullingBlock;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "5f769CpuqVCs4IY+zx3fpd9", "static-occlusion-area", undefined);

      var ccclass = _decorator.ccclass,
          type = _decorator.type,
          property = _decorator.property;
      var StaticOcclusionArea = exports('StaticOcclusionArea', (_dec = ccclass('sync.StaticOcclusionArea'), _dec2 = property(CullingBlock), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StaticOcclusionArea, _Component);

        function StaticOcclusionArea() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.culling = null;

          _initializerDefineProperty(_this, "blockCells", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "blocks", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "blockSize", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "useSelfBlockSize", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "discardCulling", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = StaticOcclusionArea.prototype;

        _proto.initBlocks = function initBlocks() {
          var culling = this.culling;
          var blockSize = culling.blockSize;

          if (this.useSelfBlockSize) {
            blockSize = this.blockSize;
          }

          var halfBlockSize = blockSize / 2;
          var blocks = this.blocks;
          blocks.length = 0;
          var wolrdPos = this.node.worldPosition;
          var worldScale = this.node.getWorldScale();
          var xCount = Math.floor(worldScale.x / blockSize);
          var yCount = Math.floor(worldScale.y / blockSize);
          var zCount = Math.floor(worldScale.z / blockSize);
          this.blockCells.set(xCount, yCount, zCount);

          for (var x = 0; x < xCount; x++) {
            for (var y = 0; y < yCount; y++) {
              for (var z = 0; z < zCount; z++) {
                var blockIdx = x * yCount * zCount + y * zCount + z;
                var block = blocks[blockIdx] = new CullingBlock();
                block.blockIdx = blockIdx;
                block.center.set(wolrdPos).add3f(x * blockSize, y * blockSize, z * blockSize).add3f(halfBlockSize, halfBlockSize, halfBlockSize).subtract3f(worldScale.x / 2, worldScale.y / 2, worldScale.z / 2);
                block.halfExtents.set(halfBlockSize, halfBlockSize, halfBlockSize);
              }
            }
          }
        };

        _createClass(StaticOcclusionArea, [{
          key: "blockCount",
          get: function get() {
            return this.blocks.length;
          }
        }, {
          key: "bake",
          get: function get() {
            return false;
          },
          set: function set(v) {
            if (this.culling) {
              var index = this.culling.areas.indexOf(this);

              if (index !== -1) {
                this.culling._startBake(index, index + 1);
              }
            }
          }
        }]);

        return StaticOcclusionArea;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "blockCells", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3();
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "blocks", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "blockCount", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "blockCount"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "bake", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "bake"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "blockSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "useSelfBlockSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "discardCulling", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/static-occlusion-block.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _createForOfIteratorHelperLoose, _createClass, _initializerDefineProperty, cclegacy, _decorator, Vec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "59faamDpapJep4tj/Qe3q7n", "static-occlusion-block", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CullingBlock = exports('CullingBlock', (_dec = ccclass('sync.CullingBlock'), _dec2 = property({
        visible: false
      }), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function CullingBlock() {
          _initializerDefineProperty(this, "center", _descriptor, this);

          _initializerDefineProperty(this, "halfExtents", _descriptor2, this);

          _initializerDefineProperty(this, "modelIndices", _descriptor3, this);

          this.renderers = [];
          this.bakedInstances = false;
          this.instances = new Set();

          _initializerDefineProperty(this, "blockIdx", _descriptor4, this);

          this.bakingTotalCount = 0;
          this.bakingDirections = [];
        }

        var _proto = CullingBlock.prototype;

        _proto.bakeInstances = function bakeInstances() {
          if (this.bakedInstances) {
            return;
          }

          var instances = this.instances;
          instances.clear();
          var renderers = this.renderers;

          for (var i = 0; i < renderers.length; i++) {
            var renderer = renderers[i];
            if (!renderer) continue;
            var originState = renderer.enabled;
            renderer.enabled = true;
            renderer.node.updateWorldTransform();
            renderer.model._localDataUpdated = true;
            renderer.model.updateUBOs(0);
            var subs = renderer.model.subModels;

            for (var j = 0; j < subs.length; j++) {
              var passes = subs[j].passes;

              for (var pi = 0; pi < passes.length; pi++) {
                var buffer = passes[pi].getInstancedBuffer(1000 + this.blockIdx);
                buffer.merge(subs[j], pi);
                instances.add(buffer);
              }
            }

            renderer.enabled = originState;
            this.bakedInstances = true;
          }

          var _loop = function _loop() {
            var i = _step.value;
            i.originClear = i.clear;

            i.clear = function () {};

            var originUpload = i.uploadBuffers;

            i.uploadBuffers = function (cmdBuffer) {
              if (this.uploaded) {
                return;
              }

              this.uploaded = true;
              originUpload.call(this, cmdBuffer);
            };
          };

          for (var _iterator = _createForOfIteratorHelperLoose(instances), _step; !(_step = _iterator()).done;) {
            _loop();
          }
        };

        _createClass(CullingBlock, [{
          key: "rendererCount",
          get: function get() {
            return this.modelIndices.length;
          }
        }, {
          key: "bakingProcess",
          get: function get() {
            if (this.bakingTotalCount === 0) {
              return this.modelIndices.length ? 1 : 0;
            }

            return (this.bakingTotalCount - this.bakingDirections.length) / this.bakingTotalCount;
          }
        }]);

        return CullingBlock;
      }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "center", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3();
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "halfExtents", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3();
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "modelIndices", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "rendererCount", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "rendererCount"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "blockIdx", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/static-occlusion-culling.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './pool.ts', './raycast.ts', './raycast-gpu.ts', './static-occlusion-area.ts', './utils3.ts', './debug.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, geometry, ccenum, Node, Camera, Vec3, MeshRenderer, Color, Mat4, Component, Vec2, Pool, raycast, raycastGpu, StaticOcclusionArea, sphereDirections, modelPoints, getGeometryRenderer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      geometry = module.geometry;
      ccenum = module.ccenum;
      Node = module.Node;
      Camera = module.Camera;
      Vec3 = module.Vec3;
      MeshRenderer = module.MeshRenderer;
      Color = module.Color;
      Mat4 = module.Mat4;
      Component = module.Component;
      Vec2 = module.Vec2;
    }, function (module) {
      Pool = module.Pool;
    }, function (module) {
      raycast = module.default;
    }, function (module) {
      raycastGpu = module.default;
    }, function (module) {
      StaticOcclusionArea = module.StaticOcclusionArea;
    }, function (module) {
      sphereDirections = module.sphereDirections;
      modelPoints = module.modelPoints;
    }, function (module) {
      getGeometryRenderer = module.getGeometryRenderer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _class3;

      cclegacy._RF.push({}, "cf7e8OV8rRGq6r1drFcWWry", "static-occlusion-culling", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          type = _decorator.type,
          executeInEditMode = _decorator.executeInEditMode;

      var _tempOBB = new geometry.OBB();

      var _tempRay = new geometry.Ray();

      var _cornerResults = new Map();

      var CornerType;

      (function (CornerType) {
        CornerType[CornerType["Center"] = 0] = "Center";
        CornerType[CornerType["Corner8_Center"] = 1] = "Corner8_Center";
        CornerType[CornerType["Seprate_Corner8_Center"] = 2] = "Seprate_Corner8_Center";
      })(CornerType || (CornerType = {}));

      ccenum(CornerType);
      var StaticOcclusionCulling = exports('StaticOcclusionCulling', (_dec = ccclass('sync.StaticOcclusionCulling'), _dec2 = type(Node), _dec3 = type(Camera), _dec4 = property({
        visible: false
      }), _dec5 = type(CornerType), _dec(_class = executeInEditMode(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StaticOcclusionCulling, _Component);

        function StaticOcclusionCulling() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "root", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "camera", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_blockSize", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "updateModelNames", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "modelNames", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "rendererCount", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "shouldFastBack", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sphereBakeCount", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "renderBlocks", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "renderRaycast", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "renderRaycastLength", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_enabledCulling", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "useGpu", _descriptor13, _assertThisInitialized(_this));

          _this._cornerType = CornerType.Corner8_Center;

          _initializerDefineProperty(_this, "bakeInstances", _descriptor14, _assertThisInitialized(_this));

          _this.renderers = [];
          _this.models = [];
          _this._loadCompeleted = false;
          _this._currentLocatedBlock = null;
          _this._lastLocatedBlock = null;
          _this.areas = [];
          _this.instances = void 0;
          _this._isBaking = false;
          _this._bakingAreaIndex = 0;
          _this._bakingAreaEndIndex = 0;
          _this._bakingBlockIndex = new Vec3();
          _this._bakingDirections = [];

          _initializerDefineProperty(_this, "_maxDirectionsOneFrame", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_maxModelCount", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_modelRange", _descriptor17, _assertThisInitialized(_this));

          _this._gpuKernelDirty = true;
          _this._startTime = 0;
          return _this;
        }

        var _proto = StaticOcclusionCulling.prototype;

        _proto._updateAreas = function _updateAreas() {
          this.areas = this.getComponentsInChildren(StaticOcclusionArea);

          for (var i = 0; i < this.areas.length; i++) {
            this.areas[i].culling = this;
          }
        };

        _proto.onEnable = function onEnable() {
          StaticOcclusionCulling.instance = this;
        };

        _proto.onDisable = function onDisable() {
          var renderers = this.renderers;

          for (var i = 0; i < renderers.length; i++) {
            if (renderers[i].model) {
              renderers[i].model.enabled = true;
            }
          }

          this._lastLocatedBlock = null;

          if (StaticOcclusionCulling.instance === this) {
            StaticOcclusionCulling.instance = undefined;
          }
        };

        _proto.start = function start() {
          this._init();
        };

        _proto._init = function _init() {
          this._updateAreas();

          if (this.root) {
            this.renderers = this.root.getComponentsInChildren(MeshRenderer);
            this.renderers = this.renderers.filter(function (r) {
              return r.enabledInHierarchy;
            });
            this.models = this.renderers.map(function (r) {
              return r.model;
            });
            var map = new Map();
            this.renderers.forEach(function (r) {
              map.set(r.node.name, r);
            });
            var modelNames = this.modelNames;
            this.areas.forEach(function (area) {
              area.blocks.forEach(function (block) {
                block.renderers = block.modelIndices.map(function (index) {
                  return map.get(modelNames[index]);
                });
              });
            });
          }

          var renderers = this.renderers;

          if (this._enabledCulling && this.bakeInstances) {
            for (var i = 0; i < renderers.length; i++) {
              var model = renderers[i].model;

              if (model) {
                model.enabled = false;
              }
            }
          }

          renderers.forEach(function (r) {
            if (r.model && !r.model._originUpdateUBOs) {
              r.model._originUpdateUBOs = r.model.updateUBOs;
              r.model._uboDirty = true;

              r.model.updateUBOs = function (stamp) {
                if (r.model && !r.model._uboDirty) {
                  return;
                }

                this._originUpdateUBOs(stamp);

                if (r.model) {
                  r.model._uboDirty = false;
                }
              };
            }
          });
          this._loadCompeleted = true;
        };

        _proto.calcCulling = function calcCulling() {
          if (!this.camera || !this._loadCompeleted || this._isBaking || !this.camera.node) {
            return;
          }

          this._currentLocatedBlock = null;
          var renderers = this.renderers;
          var worldPos = this.camera.node.worldPosition;
          var areas = this.areas;

          for (var i = 0; i < areas.length; i++) {
            var area = areas[i];

            _tempOBB.center.set(area.node.worldPosition);

            var worldScale = area.node.getWorldScale();

            _tempOBB.halfExtents.set(worldScale.x / 2, worldScale.y / 2, worldScale.z / 2);

            if (!geometry.intersect.obbPoint(_tempOBB, worldPos)) {
              continue;
            }

            if (area.discardCulling) {
              this._currentLocatedBlock = null;

              for (var _i = 0; _i < renderers.length; _i++) {
                var model = renderers[_i].model;

                if (model) {
                  model.enabled = true;
                }
              }

              return;
            }

            var blockSize = this.blockSize;

            if (area.useSelfBlockSize) {
              blockSize = area.blockSize;
            }

            var x = Math.floor((worldPos.x - (_tempOBB.center.x - _tempOBB.halfExtents.x)) / blockSize);
            var y = Math.floor((worldPos.y - (_tempOBB.center.y - _tempOBB.halfExtents.y)) / blockSize);
            var z = Math.floor((worldPos.z - (_tempOBB.center.z - _tempOBB.halfExtents.z)) / blockSize);
            var xCount = Math.floor(worldScale.x / blockSize);
            var yCount = Math.floor(worldScale.y / blockSize);
            var zCount = Math.floor(worldScale.z / blockSize);
            var blocks = area.blocks;
            var index = x * yCount * zCount + y * zCount + z;
            var block = blocks[index];

            if (!block) {
              continue;
            }

            this._currentLocatedBlock = block;
            break;
          }

          if (this._lastLocatedBlock === this._currentLocatedBlock) {
            return;
          }

          if (!this._currentLocatedBlock) {
            for (var _i2 = 0; _i2 < renderers.length; _i2++) {
              var _model = renderers[_i2] && renderers[_i2].model;

              if (_model) {
                _model.enabled = true;
              }
            }
          } else {
            var _block = this._currentLocatedBlock;

            if (this.bakeInstances) {
              _block.bakeInstances();

              this.instances = _block.instances;
              this.camera.camera.instances = this.instances;
            } else {
              for (var _i3 = 0; _i3 < renderers.length; _i3++) {
                var _model2 = renderers[_i3].model;

                if (_model2) {
                  _model2.enabled = false;
                }
              }

              for (var _i4 = 0; _i4 < _block.renderers.length; _i4++) {
                var _model3 = _block.renderers[_i4] && _block.renderers[_i4].model;

                if (_model3) {
                  if (!_model3.enabled) {
                    _model3._uboDirty = true;
                  }

                  _model3.enabled = true;
                }
              }
            }
          }

          this._lastLocatedBlock = this._currentLocatedBlock;
        };

        _proto.update = function update() {
          this._updateAreas();

          if (this._enabledCulling) {
            this.calcCulling();
          }
        };

        _proto._startBake = function _startBake(areaStartIndex, areaEndIndex) {
          if (areaStartIndex === void 0) {
            areaStartIndex = 0;
          }

          if (areaEndIndex === void 0) {
            areaEndIndex = Infinity;
          }

          if (this._isBaking) {
            return;
          }

          this._startTime = Date.now();

          _cornerResults.clear();

          this._isBaking = true;
          this._bakingAreaIndex = areaStartIndex;
          this._bakingAreaEndIndex = Math.min(areaEndIndex, this.areas.length);
          this._bakingBlockIndex = new Vec3();
          this.renderers = this.root.getComponentsInChildren(MeshRenderer);
          this.renderers = this.renderers.filter(function (r) {
            return r.enabledInHierarchy;
          });
          this.renderers.sort(function (a, b) {
            return a.name.localeCompare(b.name);
          });
          this.models = this.renderers.map(function (r) {
            return r.model;
          });
          var modelNames = this.renderers.map(function (r) {
            return r.node.name;
          });

          if (!this.modelNames || !this.modelNames.length) {
            this.modelNames = modelNames;
          } else {
            var oldModelNames = this.modelNames;
            var shouldReIndex = false;

            for (var i = 0; i < modelNames.length; i++) {
              if (modelNames[i] !== oldModelNames[i]) {
                shouldReIndex = true;
              }
            }

            if (shouldReIndex) {
              this.areas.forEach(function (a) {
                a.blocks.forEach(function (b) {
                  var newIndices = [];
                  b.modelIndices.forEach(function (i) {
                    var newI = modelNames.indexOf(oldModelNames[i]);

                    if (newI !== -1) {
                      newIndices.push(newI);
                    }
                  });
                  b.modelIndices = newIndices;
                });
              });
              this.modelNames = modelNames;
            }
          }

          var newArray = [];

          for (var _i5 = Math.max(0, this._modelRange.x), l = Math.min(this._modelRange.y, this.models.length); _i5 < l; _i5++) {
            newArray.push(this.models[_i5]);
          }

          this.models = newArray;
          this.models.length = Math.min(this.models.length, this.maxModelCount);
          this.rendererCount = this.renderers.length;

          for (var _i6 = this._bakingAreaIndex; _i6 < this._bakingAreaEndIndex; _i6++) {
            this.areas[_i6].initBlocks();
          }

          console.log('--------------------------------');
          console.time('create bakingDirections');

          if (this.shouldFastBack) {
            this._bakingDirections = sphereDirections(this.sphereBakeCount);
          } else {
            this._bakingDirections = modelPoints(this.models);
          }

          console.timeEnd('create bakingDirections');

          if (this.useGpu) {
            console.time('raycastGpu.createKernel');
            var cornersCount = 1;

            if (this._cornerType === CornerType.Corner8_Center) {
              cornersCount = 2 * 2 * 2 + 1;
            }

            if (this._gpuKernelDirty) {
              var maxDirectionsOneFrame = Math.min(this.maxDirectionsOneFrame, this._bakingDirections.length);
              raycastGpu.createKernel(this.models, maxDirectionsOneFrame, cornersCount);
              this._gpuKernelDirty = false;
            }

            console.timeEnd('raycastGpu.createKernel');
          }
        };

        _proto.initBlocks = function initBlocks() {
          for (var i = 0; i < this.areas.length; i++) {
            var area = this.areas[i];
            area.initBlocks();
          }
        };

        _proto._bake = function _bake() {
          if (!this.root) {
            return;
          }

          var maxBakeBlockCountPerFrame = 1;
          var bakedBlockCount = 0;

          for (var i = this._bakingAreaIndex; i < this._bakingAreaEndIndex;) {
            var area = this.areas[i];
            var blocks = area.blocks;
            var xCount = area.blockCells.x;
            var yCount = area.blockCells.y;
            var zCount = area.blockCells.z;
            var totalCount = area.blockCount;

            for (var x = this._bakingBlockIndex.x; x < xCount;) {
              for (var y = this._bakingBlockIndex.y; y < yCount;) {
                for (var z = this._bakingBlockIndex.z; z < zCount;) {
                  if (bakedBlockCount >= maxBakeBlockCountPerFrame) {
                    return;
                  }

                  var index = x * yCount * zCount + y * zCount + z;
                  var block = blocks[index];

                  if (!block.bakingProcess) {
                    block.bakingDirections = this._bakingDirections.concat();
                    block.bakingTotalCount = block.bakingDirections.length;
                  }

                  console.time('do raycasting');
                  var directions = block.bakingDirections.splice(0, this.maxDirectionsOneFrame);

                  if (this.shouldFastBack) {
                    this._raycastDirections(block, directions);
                  } else {
                    this._raycastPoints(block, directions);
                  }

                  console.timeEnd('do raycasting');
                  var totalProcess = (index + block.bakingProcess) / totalCount;
                  console.log("baking process : area - " + i + ",  block " + index + " - " + block.bakingProcess + ", total - " + totalProcess);
                  var costTime = (Date.now() - this._startTime) / 1000;
                  var leftTime = costTime / totalProcess * (1 - totalProcess);
                  console.log("left time : " + leftTime + " s"); // recycle

                  for (var _i7 = 0; _i7 < directions.length; _i7++) {
                    Pool.Vec3.put(directions[_i7]);
                  }

                  if (block.bakingDirections.length) {
                    return;
                  }

                  this._bakingBlockIndex.z = ++z;
                  bakedBlockCount++;
                }

                this._bakingBlockIndex.z = 0;
                this._bakingBlockIndex.y = ++y;
              }

              this._bakingBlockIndex.y = 0;
              this._bakingBlockIndex.z = 0;
              this._bakingBlockIndex.x = ++x;
            }

            this._bakingAreaIndex = ++i;

            this._bakingBlockIndex.set(0, 0, 0);
          }

          this._isBaking = false;
          console.log("bake static culling : " + (Date.now() - this._startTime) / 1000 + " s");
        };

        _proto._raycastDirections = function _raycastDirections(block, directions) {
          var _this2 = this;

          var models = this.models;

          _tempRay.o.set(block.center);

          for (var i = 0; i < directions.length; i++) {
            _tempRay.d.set(directions[i]);

            var results = raycast.raycastModels(models, _tempRay, undefined, undefined, true);

            if (results.length > 0) {
              var r = results[0].node.getComponent(MeshRenderer);

              if (r && block.renderers.indexOf(r) === -1) {
                block.renderers.push(r);
              }
            }
          }

          block.modelIndices = block.renderers.map(function (r) {
            return _this2.models.indexOf(r.model);
          });
        };

        _proto._forEachCorner = function _forEachCorner(block, func) {
          var corners = [block.center];

          for (var x = -1; x <= 1; x += 2) {
            for (var y = -1; y <= 1; y += 2) {
              for (var z = -1; z <= 1; z += 2) {
                corners.push(new Vec3(block.center).add3f(block.halfExtents.x * x, block.halfExtents.y * y, block.halfExtents.z * z));
              }
            }
          }

          for (var i = 0; i < corners.length; i++) {
            func(corners[i]);
          }
        };

        _proto._raycastPoints = function _raycastPoints(block, points) {
          var _this3 = this;

          var models = this.models;
          var corners = [block.center];

          if (this._cornerType === CornerType.Corner8_Center || this._cornerType === CornerType.Seprate_Corner8_Center) {
            for (var x = -1; x <= 1; x += 2) {
              for (var y = -1; y <= 1; y += 2) {
                for (var z = -1; z <= 1; z += 2) {
                  corners.push(new Vec3(block.center).add3f(block.halfExtents.x * x, block.halfExtents.y * y, block.halfExtents.z * z));
                }
              }
            }
          }

          if (!this.useGpu) {
            for (var i = 0; i < corners.length; i++) {
              for (var j = 0; j < points.length; j++) {
                _tempRay.o.set(corners[i]);

                _tempRay.d.set(points[j]).subtract(_tempRay.o).normalize();

                var results = raycast.raycastModels(models, _tempRay, undefined, undefined, true);

                if (results.length > 0) {
                  var r = results[0].node.getComponent(MeshRenderer);

                  if (r && block.renderers.indexOf(r) === -1) {
                    block.renderers.push(r);
                  }
                }
              }
            }
          } else {
            if (this._cornerType === CornerType.Seprate_Corner8_Center) {
              for (var _i8 = 0; _i8 < corners.length; _i8++) {
                var corner = corners[_i8];
                var key = corner.x + "_" + corner.y + "_" + corner.z;

                var bakedResults = _cornerResults.get(key);

                var finalResults = void 0;

                if (!bakedResults || !bakedResults._baked) {
                  if (!bakedResults) {
                    bakedResults = [];

                    _cornerResults.set(key, bakedResults);
                  }

                  if (block.bakingProcess >= 1) {
                    bakedResults._baked = true;
                  }

                  finalResults = raycastGpu.raycastModels(models, [corner], points);

                  for (var _i9 = 0; _i9 < finalResults.length; _i9++) {
                    if (bakedResults.indexOf(finalResults[_i9]) === -1) {
                      bakedResults.push(finalResults[_i9]);
                    }
                  }
                } else {
                  finalResults = bakedResults;
                }

                finalResults.forEach(function (m) {
                  var r = m.node.getComponent(MeshRenderer);

                  if (r && block.renderers.indexOf(r) === -1) {
                    block.renderers.push(r);
                  }
                });
              }
            } else {
              var _finalResults = raycastGpu.raycastModels(models, corners, points);

              _finalResults.forEach(function (m) {
                var r = m.node.getComponent(MeshRenderer);

                if (r && block.renderers.indexOf(r) === -1) {
                  block.renderers.push(r);
                }
              });
            }
          }

          block.modelIndices = block.renderers.map(function (r) {
            return _this3.models.indexOf(r.model);
          });
        };

        _proto.debugDraw = function debugDraw() {
          var geometryRenderer = getGeometryRenderer();

          if (!geometryRenderer) {
            return;
          }

          var areaColor = new Color(0, 0, 0, 100);
          var blockColor = new Color(255, 0, 0, 20);
          var locateBlockColor = new Color(0, 0, 255, 20);
          var tempMatrix = new Mat4();
          var identityAABB = new geometry.AABB(0, 0, 0, 0.5, 0.5, 0.5);

          for (var i = 0; i < this.areas.length; i++) {
            var area = this.areas[i];
            if (!area.enabledInHierarchy) continue;
            geometryRenderer.addBoundingBox(identityAABB, areaColor, false, false, undefined, true, area.node.worldMatrix);
          } // this.areas.forEach(area => {
          //     let blocks = area.blocks;
          //     for (let i = 0; i < blocks.length; i++) {
          //         let block = blocks[i];
          //         let tempScale = Pool.Vec3.get().set(block.halfExtents.x * 2, block.halfExtents.y * 2, block.halfExtents.z * 2 * block.bakingProcess);
          //         tempMatrix.fromRTS(Quat.IDENTITY as Quat, block.center as Vec3, tempScale);
          //         Pool.Vec3.put(tempScale);
          //         let color = blockColor;
          //         if (block === this._currentLocatedBlock) {
          //             color = locateBlockColor;
          //         }
          //         geometryRenderer.addBoundingBox(identityAABB, color, false, false, undefined, true, tempMatrix);
          //         // if (this.renderRaycast /*&& block === this._currentLocatedBlock*/) {
          //         //     drawer.type = DrawType.Line;
          //         //     drawer.matrix.fromRTS(Quat.IDENTITY as Quat, Vec3.ZERO as Vec3, Vec3.ONE as Vec3);
          //         //     let lines: Vec3[][] = []
          //         //     if (this.shouldFastBack) {
          //         //         let directions = sphereDirections(this.sphereBakeCount)
          //         //         for (let i = 0; i < directions.length; i++) {
          //         //             directions[i].multiplyScalar(this.renderRaycastLength).add(block.center)
          //         //             lines.push([block.center, directions[i]])
          //         //         }
          //         //     }
          //         //     else {
          //         //         let corners: Vec3[] = [block.center];
          //         //         // for (let x = -1; x <= 1; x += 2) {
          //         //         //     for (let y = -1; y <= 1; y += 2) {
          //         //         //         for (let z = -1; z <= 1; z += 2) {
          //         //         //             corners.push(new Vec3(block.center).add3f(block.halfExtents.x * x, block.halfExtents.y * y, block.halfExtents.z * z));
          //         //         //         }
          //         //         //     }
          //         //         // }
          //         //         if (!this.useGpu) {
          //         //             for (let i = 0; i < corners.length; i++) {
          //         //                 let points = modelPoints(this.models);
          //         //                 points.forEach(p => {
          //         //                     lines.push([corners[i], p])
          //         //                 })
          //         //             }
          //         //         }
          //         //         else {
          //         //             // let results = raycastGpu.raycastModels(models, corners, points);
          //         //             // results.forEach(m => {
          //         //             //     let r = m.node.getComponent(MeshRenderer);
          //         //             //     if (r && block.renderers.indexOf(r) === -1) {
          //         //             //         block.renderers.push(r);
          //         //             //     }
          //         //             // })
          //         //         }
          //         //     }
          //         //     drawer.line(...lines)
          //         // }
          //     }
          // })

        };

        _createClass(StaticOcclusionCulling, [{
          key: "blockSize",
          get: function get() {
            return this._blockSize;
          },
          set: function set(v) {
            this._blockSize = v;
            this.initBlocks();
          }
        }, {
          key: "bake",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this._startBake();
          }
        }, {
          key: "stop",
          get: function get() {
            return false;
          },
          set: function set(v) {
            this._isBaking = false;
          }
        }, {
          key: "enabledCulling",
          get: function get() {
            return this._enabledCulling;
          },
          set: function set(v) {
            this._enabledCulling = v;

            if (!v) {
              var renderers = this.renderers;

              for (var i = 0; i < renderers.length; i++) {
                renderers[i].model.enabled = true;
              }
            }

            this._lastLocatedBlock = null;
          }
        }, {
          key: "cornerType",
          get: function get() {
            return this._cornerType;
          },
          set: function set(v) {
            this._cornerType = v;
            this._gpuKernelDirty = true;
          }
        }, {
          key: "maxDirectionsOneFrame",
          get: function get() {
            return this._maxDirectionsOneFrame;
          },
          set: function set(v) {
            this._maxDirectionsOneFrame = v;
            this._gpuKernelDirty = true;
          }
        }, {
          key: "maxModelCount",
          get: function get() {
            return this._maxModelCount;
          },
          set: function set(v) {
            this._maxModelCount = v;
            this._gpuKernelDirty = true;
          }
        }, {
          key: "modelRange",
          get: function get() {
            return this._modelRange;
          },
          set: function set(v) {
            this._modelRange = v;
            this._gpuKernelDirty = true;
          }
        }]);

        return StaticOcclusionCulling;
      }(Component), _class3.instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "root", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_blockSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "blockSize", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "blockSize"), _class2.prototype), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "updateModelNames", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "modelNames", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "rendererCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "bake", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "bake"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "stop", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "stop"), _class2.prototype), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "shouldFastBack", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sphereBakeCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 6000;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "renderBlocks", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "renderRaycast", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "renderRaycastLength", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_enabledCulling", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "enabledCulling", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "enabledCulling"), _class2.prototype), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "useGpu", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "cornerType", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "cornerType"), _class2.prototype), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "bakeInstances", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "_maxDirectionsOneFrame", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10000;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "maxDirectionsOneFrame", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "maxDirectionsOneFrame"), _class2.prototype), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "_maxModelCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10000;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "maxModelCount", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "maxModelCount"), _class2.prototype), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "_modelRange", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec2(0, 100000);
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "modelRange", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "modelRange"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/steering-basic.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "12bba6qAJVF9KUl2UJ6BBWu", "steering-basic", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SteeringBasic = exports('SteeringBasic', (_dec = ccclass('SteeringBasic'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SteeringBasic, _Component);

        function SteeringBasic() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.moveVelocity = v3(0, 0, 0);
          _this.desiredVelocity = v3(0, 0, 0);
          _this.target = void 0;
          return _this;
        }

        return SteeringBasic;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/steering-behaviors.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, Component, UtilVec3;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c08e7bK2PNJA6GsiSX8MXXh", "steering-behaviors", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SteeringBehaviors = exports('SteeringBehaviors', (_dec = ccclass('SteeringBehaviors'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SteeringBehaviors, _Component);

        function SteeringBehaviors() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.moveVelocity = v3(0, 0, 0);
          _this.desiredVelocity = v3(0, 0, 0);
          return _this;
        }

        var _proto = SteeringBehaviors.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        _proto.Seek = function Seek(targetPos) {
          UtilVec3.copy(this.desiredVelocity, targetPos);
          this.desiredVelocity.subtract(this.node.worldPosition);
          return this.desiredVelocity.subtract(this.moveVelocity);
        };

        return SteeringBehaviors;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/steering-seek.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './steering-basic.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, v3, Component, UtilVec3, SteeringBasic;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      SteeringBasic = module.SteeringBasic;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "28c76uWY+lEg6tvKcunJ0CP", "steering-seek", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SteeringSeek = exports('SteeringSeek', (_dec = ccclass('SteeringSeek'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SteeringSeek, _Component);

        function SteeringSeek() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.moveVelocity = v3(0, 0, 0);
          _this.desiredVelocity = v3(0, 0, 0);
          _this.steeringBasic = void 0;
          return _this;
        }

        var _proto = SteeringSeek.prototype;

        _proto.start = function start() {
          this.steeringBasic = this.getComponent(SteeringBasic);
        };

        _proto.update = function update(deltaTime) {};

        _proto.SeekToward = function SeekToward() {};

        _proto.Seek = function Seek(targetPos) {
          var _this$steeringBasic;

          var target = (_this$steeringBasic = this.steeringBasic) == null ? void 0 : _this$steeringBasic.target;
          UtilVec3.copy(this.desiredVelocity, target.position);
          this.desiredVelocity.subtract(this.node.worldPosition);
          return this.desiredVelocity.subtract(this.moveVelocity);
        };

        return SteeringSeek;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/stretched-billboard.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './camera-setting.ts', './g-math.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, CameraSetting, GMath;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      CameraSetting = module.CameraSetting;
    }, function (module) {
      GMath = module.GMath;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "22d11P1lh9N5I87WTz6jjKR", "stretched-billboard", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var StretchedBillboard = exports('StretchedBillboard', (_dec = ccclass('StretchedBillboard'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StretchedBillboard, _Component);

        function StretchedBillboard() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.target = void 0;
          return _this;
        }

        var _proto = StretchedBillboard.prototype;

        _proto.update = function update(deltaTime) {
          if (this.target === undefined) {
            var _CameraSetting$main, _CameraSetting$main$c;

            this.target = (_CameraSetting$main = CameraSetting.main) == null ? void 0 : (_CameraSetting$main$c = _CameraSetting$main.camera) == null ? void 0 : _CameraSetting$main$c.node;
          }

          if (this.target !== undefined) {
            var billboardAngle = GMath.StretchedBillboardAngle(this.node.up, this.node.worldPosition, this.target.worldPosition, this.node.forward);

            if (billboardAngle) {
              var angle = this.node.eulerAngles;
              this.node.setRotationFromEuler(angle.x, angle.y, billboardAngle);
            }
          }
        };

        return StretchedBillboard;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/substance-core.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './singleton.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Singleton;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      Singleton = module.Singleton;
    }],
    execute: function () {
      exports('SubstanceType', void 0);

      var _dec, _class;

      cclegacy._RF.push({}, "619bbvH0qNCa43dr3czCnLm", "substance-core", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SubstanceCore = exports('SubstanceCore', (_dec = ccclass('SubstanceCore'), _dec(_class = /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(SubstanceCore, _Singleton);

        function SubstanceCore() {
          return _Singleton.apply(this, arguments) || this;
        }

        var _proto = SubstanceCore.prototype;

        _proto.checkNodeType = function checkNodeType(node) {
          for (var substanceType in SubstanceType) {
            if (node.name.includes(substanceType)) {
              return substanceType;
            }
          }

          return SubstanceType.GROUND;
        };

        return SubstanceCore;
      }(Singleton)) || _class));
      var SubstanceType;

      (function (SubstanceType) {
        SubstanceType["None"] = "none";
        SubstanceType["GROUND"] = "ground";
        SubstanceType["METAL"] = "metal";
        SubstanceType["WALL"] = "wall";
        SubstanceType["WATER"] = "water";
      })(SubstanceType || (SubstanceType = exports('SubstanceType', {})));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/switch-probe.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, MeshRenderer, ReflectionProbeType, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      ReflectionProbeType = module.ReflectionProbeType;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "fd67airPCVM8p6VTrrI3O9S", "switch-probe", undefined);

      var ccclass = _decorator.ccclass,
          executeInEditMode = _decorator.executeInEditMode,
          property = _decorator.property;
      var SwitchProbe = exports('SwitchProbe', (_dec = ccclass('SwitchProbe'), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SwitchProbe, _Component);

        function SwitchProbe() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_useProbe", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        _createClass(SwitchProbe, [{
          key: "useProbe",
          get: function get() {
            return this._useProbe;
          },
          set: function set(v) {
            this._useProbe = v;
            var children = this.node.children;

            for (var i = 0; i < children.length; i++) {
              children[i].getComponents;
            }

            var mrs = this.node.getComponentsInChildren(MeshRenderer);
            mrs.forEach(function (mr) {
              if (v) {
                mr.reflectionProbe = ReflectionProbeType.BAKED_CUBEMAP;
              } else {
                mr.reflectionProbe = ReflectionProbeType.NONE;
              }
            });
          }
        }]);

        return SwitchProbe;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_useProbe", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "useProbe", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "useProbe"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/taa-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './href-setting.ts', './pass-utils.ts', './utils2.ts', './base-stage.ts', './setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec4, Mat4, gfx, renderer, rendering, HrefSetting, passUtils, getCameraUniqueID, BaseStage, settings;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec4 = module.Vec4;
      Mat4 = module.Mat4;
      gfx = module.gfx;
      renderer = module.renderer;
      rendering = module.rendering;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }, function (module) {
      passUtils = module.passUtils;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      settings = module.settings;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "412ffaHIINGLpn4VWnV8zTB", "taa-stage", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var tempVec4 = new Vec4();
      var slotNames = ['TAA_First', 'TAA_Second'];
      var TAAStage = exports('TAAStage', (_dec = ccclass('TAAStage'), _dec2 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(TAAStage, _BaseStage);

        function TAAStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _BaseStage.call.apply(_BaseStage, [this].concat(args)) || this;
          _this._materialName = 'deferred-taa';
          _this.materialMap = new Map();
          _this.prevMatViewProj = new Mat4();

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _this.firstRender = true;
          return _this;
        }

        var _proto = TAAStage.prototype;

        _proto.checkEnable = function checkEnable() {
          return this.enable && globalThis.TAASetting && globalThis.TAASetting.instance && globalThis.TAASetting.instance.enable && !!HrefSetting.taa;
        };

        _proto.slotName = function slotName(camera, index) {
          if (index === void 0) {
            index = 0;
          }

          if (!this.checkEnable()) {
            return this.lastStage.slotName(camera, index);
          }

          var taa = globalThis.TAASetting.instance;

          if (taa.taaTextureIndex < 0) {
            return slotNames[0];
          }

          return slotNames[(taa.taaTextureIndex + 1) % 2];
        } // public onResize () {
        //     this.taaTextureIndex = -1;
        //     this.sampleIndex = -1;
        // }
        ;

        _proto.render = function render(camera, ppl) {
          if (!this.checkEnable()) {
            return;
          }

          var taa = globalThis.TAASetting.instance;
          var cameraID = getCameraUniqueID(camera);
          var area = this.getRenderArea(camera);
          var width = area.width;
          var height = area.height;
          passUtils.clearFlag = gfx.ClearFlagBit.COLOR;
          Vec4.set(passUtils.clearColor, 0, 0, 0, 1); // material

          var material = this.materialMap.get(camera);

          if (!material || material.parent !== this.material) {
            material = new renderer.MaterialInstance({
              parent: this.material
            });
            this.materialMap.set(camera, material);
          }

          passUtils.material = material; // material.setProperty('inputViewPort',
          //     new Vec4(
          //         width / game.canvas.width, height / game.canvas.height,
          //         0, 0
          //     )
          // );

          var firstRender = this.firstRender;

          if (firstRender) {
            this.prevMatViewProj.set(camera.matViewProj);
            this.firstRender = false;
          }

          material.setProperty('taaParams1', tempVec4.set(taa.sampleOffset.x, taa.sampleOffset.y, taa.feedback, 0));
          material.setProperty('taaTextureSize', tempVec4.set(1 / width, 1 / height, 1 / width, 1 / height));
          material.setProperty('taaPrevViewProj', this.prevMatViewProj);
          this.prevMatViewProj.set(camera.matViewProj); // input output

          var input0 = this.lastStage.slotName(camera, 0);
          var historyTexture = slotNames[taa.taaTextureIndex % 2];

          if (firstRender) {
            historyTexture = input0;
          }

          var slot0 = this.slotName(camera, 0);
          var posTex = 'gBufferPosition';

          if (settings.gbufferStage) {
            posTex = settings.gbufferStage.slotName(camera, 3);
          }

          passUtils.addRasterPass(width, height, 'DeferredTAA' + (taa.taaTextureIndex < 0 ? -1 : taa.taaTextureIndex % 2), "CameraTAAPass" + cameraID).setViewport(area.x, area.y, width, height).setPassInput(input0, 'inputTexture').setPassInput(posTex, 'posTex').setPassInput(historyTexture, 'taaPrevTexture').addRasterView(slot0, gfx.Format.RGBA16F, true, rendering.ResourceResidency.PERSISTENT).blitScreen(0).version();
        };

        return TAAStage;
      }(BaseStage), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'TAAStage';
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/taa.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec2, game, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec2 = module.Vec2;
      game = module.game;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3;

      cclegacy._RF.push({}, "20b0dTocaRF2ou2Z6iizPPW", "taa", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var halton8 = [new Vec2(0.5, 1.0 / 3), new Vec2(0.25, 2.0 / 3), new Vec2(0.75, 1.0 / 9), new Vec2(0.125, 4.0 / 9), new Vec2(0.625, 7.0 / 9), new Vec2(0.375, 2.0 / 9), new Vec2(0.875, 5.0 / 9), new Vec2(0.0625, 8.0 / 9)];
      halton8.forEach(function (v) {
        v.x -= 0.5;
        v.y -= 0.5;
      });
      var SampleOffsets = {
        // 2xMSAA
        // Pattern docs: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476218(v=vs.85).aspx
        //   N.
        //   .S
        x2: [new Vec2(-4.0 / 16.0, -4.0 / 16.0), new Vec2(4.0 / 16.0, 4.0 / 16.0)],
        // 3xMSAA
        //   A..
        //   ..B
        //   .C.
        // Rolling circle pattern (A,B,C).
        x3: [new Vec2(-2.0 / 3.0, -2.0 / 3.0), new Vec2(2 / 3, 0 / 3), new Vec2(0 / 3, 2 / 3)],
        // 4xMSAA
        // Pattern docs: http://msdn.microsoft.com/en-us/library/windows/desktop/ff476218(v=vs.85).aspx
        //   .N..
        //   ...E
        //   W...
        //   ..S.
        // Rolling circle pattern (N,E,S,W).
        x4: [new Vec2(-2 / 16, -6 / 16), new Vec2(6 / 16, -2 / 16), new Vec2(2 / 16, 6 / 16), new Vec2(-6 / 16, 2 / 16)],
        x5: [// Compressed 4 sample pattern on same vertical and horizontal line (less temporal flicker).
        // Compressed 1/2 works better than correct 2/3 (reduced temporal flicker).
        //   . N .
        //   W . E
        //   . S .
        // Rolling circle pattern (N,E,S,W).
        new Vec2(0, -1 / 2), new Vec2(1 / 2, 0), new Vec2(0, 1 / 2), new Vec2(-1 / 2, 0)],
        halton8: halton8
      };
      var TAASetting = exports('TAASetting', (_dec = ccclass('TAASetting'), _dec(_class = executeInEditMode(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TAASetting, _Component);

        function TAASetting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "enable", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sampleScale", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "feedback", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "shaowHistoryTexture", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "clampHistoryTexture", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "forceRender", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dirty", _descriptor7, _assertThisInitialized(_this));

          _this.sampleOffset = new Vec2();
          _this.taaTextureIndex = -2;
          _this.samples = SampleOffsets.halton8;
          _this.sampleIndex = -1;
          return _this;
        }

        var _proto = TAASetting.prototype;

        _proto.onEnable = function onEnable() {
          globalThis.TAASetting.instance = this;
        };

        _proto.onDisable = function onDisable() {
          if (globalThis.TAASetting.instance === this) {
            globalThis.TAASetting.instance = undefined;
          }
        };

        _proto.updateSample = function updateSample(width, height) {
          if (this.dirty || this.forceRender) {
            this.sampleIndex++;
            this.taaTextureIndex++;
            this.dirty = false;
          }

          var offset = this.samples[this.sampleIndex % this.samples.length];

          if (this.sampleIndex === -1) {
            offset = Vec2.ZERO;
          }

          this.sampleOffset.x = offset.x * this.sampleScale / width;
          this.sampleOffset.y = offset.y * this.sampleScale / height;
        };

        _proto.lateUpdate = function lateUpdate(dt) {
          this.updateSample(game.canvas.width, game.canvas.height);
        };

        return TAASetting;
      }(Component), _class3.instance = void 0, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "enable", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sampleScale", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "feedback", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.95;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "shaowHistoryTexture", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "clampHistoryTexture", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "forceRender", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "dirty", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class) || _class));
      globalThis.TAASetting = TAASetting;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/tap-play.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, game, input, Input, KeyCode, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "28ec1JHVrVAfoPTrWOJr0Oz", "tap-play", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TapPlay = exports('TapPlay', (_dec = ccclass('TapPlay'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TapPlay, _Component);

        function TapPlay() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = TapPlay.prototype;

        _proto.start = function start() {
          game.pause();
          input.on(Input.EventType.KEY_UP, function (event) {
            if (event.keyCode === KeyCode.SPACE) {
              game.resume();
            }

            if (event.keyCode === KeyCode.KEY_R) ;
          }, this);
        };

        return TapPlay;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/task.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cfb92JEgqREVYJb6JPkB9TR", "task", undefined);

      var TaskRuner = exports('TaskRuner', function TaskRuner() {
        this._queue = [];
        this._active = 0;
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-actor-move.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-move.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, input, Input, KeyCode, Component, ActorMove;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }, function (module) {
      ActorMove = module.ActorMove;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f1cc2YQpdtCPoKUwJo+pOG5", "test-actor-move", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestActorMove = exports('TestActorMove', (_dec = ccclass('TestActorMove'), _dec2 = property({
        type: ActorMove,
        tooltip: ' Reference Actor Move Slope.'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestActorMove, _Component);

        function TestActorMove() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "actorMove", _descriptor, _assertThisInitialized(_this));

          _this._dir = v3(0, 0, 0);
          _this.direction_up = 0;
          _this.direction_down = 0;
          _this.direction_left = 0;
          _this.direction_right = 0;
          return _this;
        }

        var _proto = TestActorMove.prototype;

        _proto.start = function start() {
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.on(Input.EventType.KEY_UP, this.onKeyUp, this);
          input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);
          input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
        };

        _proto.onKeyDown = function onKeyDown(event) {
          var _this$actorMove;

          if (event.keyCode === KeyCode.KEY_W || event.keyCode === KeyCode.ARROW_UP) this.direction_up = -1;
          if (event.keyCode === KeyCode.KEY_S || event.keyCode === KeyCode.ARROW_DOWN) this.direction_down = 1;
          if (event.keyCode === KeyCode.KEY_A || event.keyCode === KeyCode.ARROW_LEFT) this.direction_left = -1;
          if (event.keyCode === KeyCode.KEY_D || event.keyCode === KeyCode.ARROW_RIGHT) this.direction_right = 1;
          if (event.keyCode == KeyCode.SPACE) (_this$actorMove = this.actorMove) == null ? void 0 : _this$actorMove.jump();
          this.onMove();
        };

        _proto.onKeyUp = function onKeyUp(event) {
          if (event.keyCode === KeyCode.KEY_W || event.keyCode === KeyCode.ARROW_UP) this.direction_up = 0;
          if (event.keyCode === KeyCode.KEY_S || event.keyCode === KeyCode.ARROW_DOWN) this.direction_down = 0;
          if (event.keyCode === KeyCode.KEY_A || event.keyCode === KeyCode.ARROW_LEFT) this.direction_left = 0;
          if (event.keyCode === KeyCode.KEY_D || event.keyCode === KeyCode.ARROW_RIGHT) this.direction_right = 0;
          this.onMove();
        };

        _proto.onMouseDown = function onMouseDown(event) {};

        _proto.onMouseMove = function onMouseMove(event) {
          var _this$actorMove2;

          (_this$actorMove2 = this.actorMove) == null ? void 0 : _this$actorMove2.onRotation(event.movementX / 5, event.movementY / 10);
        };

        _proto.onMove = function onMove() {
          var _this$actorMove3;

          this._dir.x = this.direction_left + this.direction_right;
          this._dir.z = this.direction_up + this.direction_down;
          this._dir.y = 0; //console.log('dir:', this._dir);

          (_this$actorMove3 = this.actorMove) == null ? void 0 : _this$actorMove3.moveDirection(this._dir.normalize());
        };

        return TestActorMove;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "actorMove", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-amoy-animation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-animation-graph.ts', './msg.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, RigidBody, v3, input, Input, KeyCode, Vec3, math, Component, ActorAnimationGraph, Msg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      RigidBody = module.RigidBody;
      v3 = module.v3;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Vec3 = module.Vec3;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      ActorAnimationGraph = module.ActorAnimationGraph;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "a7be801KZBAg71N+w894EgY", "test-amoy-animation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestAmoyAnimation = exports('TestAmoyAnimation', (_dec = ccclass('TestAmoyAnimation'), _dec2 = property(Node), _dec3 = property(RigidBody), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestAmoyAnimation, _Component);

        function TestAmoyAnimation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._animationGraph = void 0;
          _this.bool_crouch = false;
          _this.bool_iron_sights = false;
          _this.direction_up = 0;
          _this.direction_down = 0;
          _this.direction_left = 0;
          _this.direction_right = 0;
          _this.cameraTargetIndex = 0;

          _initializerDefineProperty(_this, "moveSpeedRate", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "angleSpeedRate", _descriptor2, _assertThisInitialized(_this));

          _this.angleVelocity = v3(0, 0, 0);
          _this.linearVelocity = v3(0, 0, 0);
          _this.moveSpeed = 1;

          _initializerDefineProperty(_this, "view", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "targetRigid", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TestAmoyAnimation.prototype;

        _proto.start = function start() {
          var _this$view;

          this._animationGraph = (_this$view = this.view) == null ? void 0 : _this$view.getComponent(ActorAnimationGraph);
          input.on(Input.EventType.KEY_DOWN, this.keyDown, this);
          input.on(Input.EventType.KEY_UP, this.keyUp, this);
          input.on(Input.EventType.MOUSE_DOWN, this.onMouseDown, this);
        };

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          this.updateMove();
        };

        _proto.keyDown = function keyDown(event) {
          if (event.keyCode === KeyCode.KEY_W || event.keyCode === KeyCode.ARROW_UP) this.direction_up = -1;
          if (event.keyCode === KeyCode.KEY_S || event.keyCode === KeyCode.ARROW_DOWN) this.direction_down = 1;
          if (event.keyCode === KeyCode.KEY_A || event.keyCode === KeyCode.ARROW_LEFT) this.direction_left = -1;
          if (event.keyCode === KeyCode.KEY_D || event.keyCode === KeyCode.ARROW_RIGHT) this.direction_right = 1;

          if (event.keyCode == KeyCode.KEY_I) {
            var _this$_animationGraph;

            this.bool_iron_sights = this.bool_iron_sights ? false : true;
            console.log(this.bool_iron_sights);
            (_this$_animationGraph = this._animationGraph) == null ? void 0 : _this$_animationGraph.play('bool_iron_sights', this.bool_iron_sights);
            this.cameraTargetIndex = this.bool_iron_sights ? 1 : 0;
            Msg.emit('msg_change_tps_camera_target', this.cameraTargetIndex);
          }

          if (event.keyCode == KeyCode.KEY_C) {
            var _this$_animationGraph2;

            this.bool_crouch = this.bool_crouch ? false : true;
            (_this$_animationGraph2 = this._animationGraph) == null ? void 0 : _this$_animationGraph2.play('bool_crouch', this.bool_crouch);
            Msg.emit('msg_change_tps_camera_height', this.bool_crouch ? 1 : 1.377);
          }

          if (event.keyCode == KeyCode.SPACE) {
            var _this$_animationGraph3, _this$_animationGraph4;

            (_this$_animationGraph3 = this._animationGraph) == null ? void 0 : _this$_animationGraph3.play('trigger_jump', true);
            (_this$_animationGraph4 = this._animationGraph) == null ? void 0 : _this$_animationGraph4.setValue('num_jump_speed', 0.8);
          }

          if (event.keyCode === KeyCode.KEY_D) {
            var _this$_animationGraph5;

            (_this$_animationGraph5 = this._animationGraph) == null ? void 0 : _this$_animationGraph5.play('trigger_draw', true);
          }

          if (event.keyCode === KeyCode.KEY_R) {
            var _this$_animationGraph6;

            (_this$_animationGraph6 = this._animationGraph) == null ? void 0 : _this$_animationGraph6.play('trigger_reload', true);
          }

          if (event.keyCode === KeyCode.KEY_E) {
            var _this$_animationGraph7;

            (_this$_animationGraph7 = this._animationGraph) == null ? void 0 : _this$_animationGraph7.play('trigger_reload_empty', true);
          }

          if (event.keyCode === KeyCode.KEY_H) {
            var _this$_animationGraph8;

            (_this$_animationGraph8 = this._animationGraph) == null ? void 0 : _this$_animationGraph8.play('trigger_hit', true);
          }

          if (event.keyCode == KeyCode.KEY_Z) {
            if (this.cameraTargetIndex === 1) return;
            this.cameraTargetIndex = this.cameraTargetIndex === 0 ? 2 : 0;
            Msg.emit('msg_change_tps_camera_target', this.cameraTargetIndex);
          } //this.updateMove();

        };

        _proto.onMouseDown = function onMouseDown(event) {
          var _this$_animationGraph9;

          (_this$_animationGraph9 = this._animationGraph) == null ? void 0 : _this$_animationGraph9.play('trigger_fire', true);
        };

        _proto.keyUp = function keyUp(event) {
          if (event.keyCode === KeyCode.KEY_W || event.keyCode === KeyCode.ARROW_UP) this.direction_up = 0;
          if (event.keyCode === KeyCode.KEY_S || event.keyCode === KeyCode.ARROW_DOWN) this.direction_down = 0;
          if (event.keyCode === KeyCode.KEY_A || event.keyCode === KeyCode.ARROW_LEFT) this.direction_left = 0;
          if (event.keyCode === KeyCode.KEY_D || event.keyCode === KeyCode.ARROW_RIGHT) this.direction_right = 0; //this.updateMove();
        };

        _proto.updateMove = function updateMove() {
          var _this$_animationGraph10, _this$_animationGraph11, _this$_animationGraph12;

          this.targetRigid.getLinearVelocity(this.linearVelocity);
          this.targetRigid.getAngularVelocity(this.angleVelocity);
          this.linearVelocity.y = 0;
          var linearVelocityLength = this.linearVelocity.length();
          var eulerAnglesY = this.targetRigid.node.eulerAngles.y; //rotate y.

          Vec3.rotateY(this.linearVelocity, this.linearVelocity, Vec3.ZERO, math.toRadian(-eulerAnglesY));
          var num_velocity_x = this.linearVelocity.x;
          var num_velocity_y = this.linearVelocity.z;
          this.moveSpeed = linearVelocityLength * this.moveSpeedRate; // Check rotation.

          if (this.direction_up + this.direction_left + this.direction_right + this.direction_down == 0 && Math.abs(this.angleVelocity.y) > 1) {
            this.moveSpeed = this.angleVelocity.y * this.angleSpeedRate;
            num_velocity_x = this.angleVelocity.y / 10;
          }

          (_this$_animationGraph10 = this._animationGraph) == null ? void 0 : _this$_animationGraph10.setValue('num_velocity_x', num_velocity_x);
          (_this$_animationGraph11 = this._animationGraph) == null ? void 0 : _this$_animationGraph11.setValue('num_velocity_y', -num_velocity_y);
          (_this$_animationGraph12 = this._animationGraph) == null ? void 0 : _this$_animationGraph12.setValue('num_move_speed', this.moveSpeed);
        };

        return TestAmoyAnimation;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "moveSpeedRate", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.7;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "angleSpeedRate", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "view", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "targetRigid", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-anig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-animation-graph-group.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, input, Input, KeyCode, Component, ActorAnimationGraphGroup;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }, function (module) {
      ActorAnimationGraphGroup = module.ActorAnimationGraphGroup;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "454cbIMSGBMN5BT5nW5F9ji", "test-anig", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestAnimationGraph = exports('TestAnimationGraph', (_dec = ccclass('TestAnimationGraph'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestAnimationGraph, _Component);

        function TestAnimationGraph() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._animationGraph = void 0;
          return _this;
        }

        var _proto = TestAnimationGraph.prototype;

        _proto.start = function start() {
          var view = this.node.getChildByName('view');
          this._animationGraph = view.addComponent(ActorAnimationGraphGroup);
          input.on(Input.EventType.KEY_DOWN, this.keyDown, this);
        };

        _proto.keyDown = function keyDown(event) {
          if (event.keyCode === KeyCode.KEY_D) {
            var _this$_animationGraph;

            (_this$_animationGraph = this._animationGraph) == null ? void 0 : _this$_animationGraph.play('trigger_draw', true);
          }

          if (event.keyCode === KeyCode.KEY_F) {
            var _this$_animationGraph2;

            (_this$_animationGraph2 = this._animationGraph) == null ? void 0 : _this$_animationGraph2.play('trigger_fire', true);
          }

          if (event.keyCode === KeyCode.KEY_R) {
            var _this$_animationGraph3;

            (_this$_animationGraph3 = this._animationGraph) == null ? void 0 : _this$_animationGraph3.play('trigger_reload', true);
          }

          if (event.keyCode === KeyCode.KEY_E) {
            var _this$_animationGraph4;

            (_this$_animationGraph4 = this._animationGraph) == null ? void 0 : _this$_animationGraph4.play('trigger_reload_empty', true);
          }

          if (event.keyCode === KeyCode.KEY_H) {
            var _this$_animationGraph5;

            (_this$_animationGraph5 = this._animationGraph) == null ? void 0 : _this$_animationGraph5.play('trigger_holster', true);
          }
        };

        _proto.update = function update(deltaTime) {};

        return TestAnimationGraph;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-camera-debug.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4175bLazyRLxo5ia1UGb/9Y", "test-camera-debug", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var test_camera_debug = exports('test_camera_debug', (_dec = ccclass('test_camera_debug'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(test_camera_debug, _Component);

        function test_camera_debug() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = test_camera_debug.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {
          console.log(this.node.worldPosition);
        };

        return test_camera_debug;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-collider-mesh-switch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './data-core.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, MeshRenderer, Component, DataGameInst;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }, function (module) {
      DataGameInst = module.DataGameInst;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "cd636V2SHdJgI0Yu7mqT0QT", "test-collider-mesh-switch", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestColliderMeshSwitch = exports('TestColliderMeshSwitch', (_dec = ccclass('TestColliderMeshSwitch'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestColliderMeshSwitch, _Component);

        function TestColliderMeshSwitch() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "meshRenderState", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TestColliderMeshSwitch.prototype;

        _proto.start = function start() {
          this.meshRenderState = DataGameInst._data.show_collider;
          console.log("meshRenderState:", this.meshRenderState);
          var meshRenders = this.getComponentsInChildren(MeshRenderer);

          for (var i = 0; i < meshRenders.length; i++) {
            meshRenders[i].enabled = this.meshRenderState;
          }
        };

        return TestColliderMeshSwitch;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "meshRenderState", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-custom.ts", ['cc', './utils2.ts'], function (exports) {
  'use strict';

  var cclegacy, rendering, gfx, Material, getCameraUniqueID, getRenderArea, SRGBToLinear, getLoadOpOfClearFlag;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      rendering = module.rendering;
      gfx = module.gfx;
      Material = module.Material;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
      getRenderArea = module.getRenderArea;
      SRGBToLinear = module.SRGBToLinear;
      getLoadOpOfClearFlag = module.getLoadOpOfClearFlag;
    }],
    execute: function () {
      exports({
        buildDeferred: buildDeferred,
        buildGBufferPass: buildGBufferPass,
        buildLightingPass: buildLightingPass,
        buildPostprocessPass: buildPostprocessPass
      });

      cclegacy._RF.push({}, "887a1YxhGlKlK2cbFmBo6eM", "test-custom", undefined);

      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var GBufferInfo = exports('GBufferInfo', function GBufferInfo() {}); // deferred passes

      function buildGBufferPass(camera, ppl) {
        var cameraID = getCameraUniqueID(camera);
        var area = getRenderArea(camera, camera.window.width, camera.window.height);
        var width = area.width;
        var height = area.height;
        var gBufferPassRTName = "gBufferPassColorCamera";
        var gBufferPassNormal = "gBufferPassNormal";
        var gBufferPassEmissive = "gBufferPassEmissive";
        var gBufferPassDSName = "gBufferPassDSCamera";

        if (!ppl.containsResource(gBufferPassRTName)) {
          var colFormat = Format.RGBA16F;
          ppl.addRenderTarget(gBufferPassRTName, colFormat, width, height, ResourceResidency.MANAGED);
          ppl.addRenderTarget(gBufferPassNormal, colFormat, width, height, ResourceResidency.MANAGED);
          ppl.addRenderTarget(gBufferPassEmissive, colFormat, width, height, ResourceResidency.MANAGED);
          ppl.addDepthStencil(gBufferPassDSName, Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
        } // gbuffer pass


        var gBufferPass = ppl.addRasterPass(width, height, 'Geometry');
        gBufferPass.name = "CameraGBufferPass" + cameraID;
        gBufferPass.setViewport(new Viewport(area.x, area.y, area.width, area.height));
        var rtColor = new Color(0, 0, 0, 0);

        if (camera.clearFlag & ClearFlagBit.COLOR) {
          if (ppl.pipelineSceneData.isHDR) {
            SRGBToLinear(rtColor, camera.clearColor);
          } else {
            rtColor.x = camera.clearColor.x;
            rtColor.y = camera.clearColor.y;
            rtColor.z = camera.clearColor.z;
          }
        }

        var passColorView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, rtColor);
        var passNormalView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, new Color(0, 0, 0, 0));
        var passEmissiveView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, new Color(0, 0, 0, 0));
        var passDSView = new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, new Color(camera.clearDepth, camera.clearStencil, 0, 0));
        gBufferPass.addRasterView(gBufferPassRTName, passColorView);
        gBufferPass.addRasterView(gBufferPassNormal, passNormalView);
        gBufferPass.addRasterView(gBufferPassEmissive, passEmissiveView);
        gBufferPass.addRasterView(gBufferPassDSName, passDSView);
        gBufferPass.addQueue(QueueHint.RENDER_OPAQUE).addSceneOfCamera(camera, new LightInfo(), SceneFlags.OPAQUE_OBJECT | SceneFlags.CUTOUT_OBJECT | SceneFlags.DRAW_INSTANCING);
        var gBufferInfo = new GBufferInfo();
        gBufferInfo.color = gBufferPassRTName;
        gBufferInfo.normal = gBufferPassNormal;
        gBufferInfo.emissive = gBufferPassEmissive;
        gBufferInfo.ds = gBufferPassDSName;
        return gBufferInfo;
      }

      var LightingInfo = /*#__PURE__*/function () {
        var _proto = LightingInfo.prototype;

        _proto._init = function _init() {
          this.deferredLightingMaterial = new Material();
          this.deferredLightingMaterial.name = 'builtin-deferred-material';
          this.deferredLightingMaterial.initialize({
            effectName: 'pipeline/deferred-lighting',
            defines: {
              CC_RECEIVE_SHADOW: 1
            }
          });

          for (var i = 0; i < this.deferredLightingMaterial.passes.length; ++i) {
            this.deferredLightingMaterial.passes[i].tryCompile();
          }
        };

        function LightingInfo() {
          this._init();
        }

        return LightingInfo;
      }();

      var lightingInfo = null; // deferred lighting pass

      function buildLightingPass(camera, ppl, gBuffer) {
        if (!lightingInfo) {
          lightingInfo = new LightingInfo();
        }

        var cameraID = getCameraUniqueID(camera); // const cameraInfo = buildShadowPasses(cameraName, camera, ppl);

        var area = getRenderArea(camera, camera.window.width, camera.window.height);
        var width = area.width;
        var height = area.height;
        var deferredLightingPassRTName = "deferredLightingPassRTName";
        var deferredLightingPassDS = "deferredLightingPassDS";

        if (!ppl.containsResource(deferredLightingPassRTName)) {
          ppl.addRenderTarget(deferredLightingPassRTName, Format.RGBA8, width, height, ResourceResidency.MANAGED);
          ppl.addDepthStencil(deferredLightingPassDS, Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
        } // lighting pass


        var lightingPass = ppl.addRasterPass(width, height, 'Lighting');
        lightingPass.name = "CameraLightingPass" + cameraID;
        lightingPass.setViewport(new Viewport(area.x, area.y, width, height)); // for (const dirShadowName of cameraInfo.mainLightShadowNames) {
        //     if (ppl.containsResource(dirShadowName)) {
        //         const computeView = new ComputeView();
        //         lightingPass.addComputeView(dirShadowName, computeView);
        //     }
        // }
        // for (const spotShadowName of cameraInfo.spotLightShadowNames) {
        //     if (ppl.containsResource(spotShadowName)) {
        //         const computeView = new ComputeView();
        //         lightingPass.addComputeView(spotShadowName, computeView);
        //     }
        // }

        if (ppl.containsResource(gBuffer.color)) {
          var computeView = new ComputeView();
          computeView.name = 'gbuffer_albedoMap';
          lightingPass.addComputeView(gBuffer.color, computeView);
          var computeNormalView = new ComputeView();
          computeNormalView.name = 'gbuffer_normalMap';
          lightingPass.addComputeView(gBuffer.normal, computeNormalView);
          var computeEmissiveView = new ComputeView();
          computeEmissiveView.name = 'gbuffer_emissiveMap';
          lightingPass.addComputeView(gBuffer.emissive, computeEmissiveView);
          var computeDepthView = new ComputeView();
          computeDepthView.name = 'depth_stencil';
          lightingPass.addComputeView(gBuffer.ds, computeDepthView);
        }

        var lightingClearColor = new Color(0, 0, 0, 0);

        if (camera.clearFlag & ClearFlagBit.COLOR) {
          lightingClearColor.x = camera.clearColor.x;
          lightingClearColor.y = camera.clearColor.y;
          lightingClearColor.z = camera.clearColor.z;
        }

        lightingClearColor.w = 0;
        var lightingPassView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, lightingClearColor);
        lightingPass.addRasterView(deferredLightingPassRTName, lightingPassView);
        var material = globalThis.pipelineAssets.getMaterial('deferred-lighting') || lightingInfo.deferredLightingMaterial;
        lightingPass.addQueue(QueueHint.RENDER_TRANSPARENT).addCameraQuad(camera, material, 0, SceneFlags.VOLUMETRIC_LIGHTING);
        lightingPass.addQueue(QueueHint.RENDER_TRANSPARENT).addSceneOfCamera(camera, new LightInfo(), SceneFlags.TRANSPARENT_OBJECT | SceneFlags.PLANAR_SHADOW | SceneFlags.GEOMETRY);
        return {
          rtName: deferredLightingPassRTName,
          dsName: deferredLightingPassDS
        };
      }

      var PostInfo = /*#__PURE__*/function () {
        var _proto2 = PostInfo.prototype;

        _proto2._init = function _init() {
          this.postMaterial = new Material();
          this.postMaterial.name = 'builtin-post-process-material';
          this.postMaterial.initialize({
            effectName: 'pipeline/post-process',
            defines: {
              // Anti-aliasing type, currently only fxaa, so 1 means fxaa
              ANTIALIAS_TYPE: 0
            }
          });

          for (var i = 0; i < this.postMaterial.passes.length; ++i) {
            this.postMaterial.passes[i].tryCompile();
          }
        };

        function PostInfo() {
          this._init();
        }

        return PostInfo;
      }();

      var postInfo = null;

      function buildPostprocessPass(camera, ppl, inputTex) {
        if (!postInfo) {
          postInfo = new PostInfo();
        }

        var cameraID = getCameraUniqueID(camera);
        var area = getRenderArea(camera, camera.window.width, camera.window.height);
        var width = area.width;
        var height = area.height;
        var postprocessPassRTName = "postprocessPassRTName" + cameraID;
        var postprocessPassDS = "postprocessPassDS" + cameraID;

        if (!ppl.containsResource(postprocessPassRTName)) {
          ppl.addRenderTexture(postprocessPassRTName, Format.RGBA8, width, height, camera.window);
          ppl.addDepthStencil(postprocessPassDS, Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
        }

        ppl.updateRenderWindow(postprocessPassRTName, camera.window);
        var postprocessPass = ppl.addRasterPass(width, height, 'Postprocess');
        postprocessPass.name = "CameraPostprocessPass" + cameraID;
        postprocessPass.setViewport(new Viewport(area.x, area.y, area.width, area.height));

        if (ppl.containsResource(inputTex)) {
          var computeView = new ComputeView();
          computeView.name = 'outputResultMap';
          postprocessPass.addComputeView(inputTex, computeView);
        }

        var postClearColor = new Color(0, 0, 0, camera.clearColor.w);

        if (camera.clearFlag & ClearFlagBit.COLOR) {
          postClearColor.x = camera.clearColor.x;
          postClearColor.y = camera.clearColor.y;
          postClearColor.z = camera.clearColor.z;
        }

        var postprocessPassView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, getLoadOpOfClearFlag(camera.clearFlag, AttachmentType.RENDER_TARGET), StoreOp.STORE, camera.clearFlag, postClearColor);
        var postprocessPassDSView = new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, getLoadOpOfClearFlag(camera.clearFlag, AttachmentType.DEPTH_STENCIL), StoreOp.STORE, camera.clearFlag, new Color(camera.clearDepth, camera.clearStencil, 0, 0));
        postprocessPass.addRasterView(postprocessPassRTName, postprocessPassView);
        postprocessPass.addRasterView(postprocessPassDS, postprocessPassDSView);
        postprocessPass.addQueue(QueueHint.NONE).addFullscreenQuad(postInfo.postMaterial, 0, SceneFlags.NONE);
        postprocessPass.addQueue(QueueHint.RENDER_TRANSPARENT).addSceneOfCamera(camera, new LightInfo(), SceneFlags.UI | SceneFlags.PROFILER);
        return {
          rtName: postprocessPassRTName,
          dsName: postprocessPassDS
        };
      }

      function buildDeferred(camera, ppl) {
        if (!camera.scene) {
          return;
        } // GBuffer Pass


        var gBufferInfo = buildGBufferPass(camera, ppl); // Lighting Pass

        var lightInfo = buildLightingPass(camera, ppl, gBufferInfo); // Postprocess

        buildPostprocessPass(camera, ppl, lightInfo.rtName);
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-forward.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, null],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "eb9295i0PhGOLESqCIdDSSn", "test-forward", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var test_forward = exports('test_forward', (_dec = ccclass('test_forward'), _dec(_class = executeInEditMode(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(test_forward, _Component);

        function test_forward() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = test_forward.prototype;

        _proto.onEnable = function onEnable() {};

        _proto.update = function update(deltaTime) {};

        return test_forward;
      }(Component)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-ghost.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SkinnedMeshRenderer, input, Input, clamp01, Vec3, KeyCode, v4, v3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SkinnedMeshRenderer = module.SkinnedMeshRenderer;
      input = module.input;
      Input = module.Input;
      clamp01 = module.clamp01;
      Vec3 = module.Vec3;
      KeyCode = module.KeyCode;
      v4 = module.v4;
      v3 = module.v3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "91dcecdLxdLX4U2wOSNwoNm", "test-ghost", undefined);

      var ccclass = _decorator.ccclass,
          executeInEditMode = _decorator.executeInEditMode;
      var SolderController = exports('SolderController', (_dec = ccclass('SolderController'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SolderController, _Component);

        function SolderController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.materials = [];
          _this.directionUniform = v4();
          _this.direction = v3();
          _this.currentPosition = v3(0, 0, 0);
          _this.lastPosition = v3(0, 0, 0);
          _this.t = 0;
          _this.xAxis = 0;
          _this.zAxis = 0;
          _this.speed = 10;
          return _this;
        }

        var _proto = SolderController.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.currentPosition = this.node.position.clone();
          this.lastPosition = this.currentPosition.clone();
          var components = this.node.getComponentsInChildren(SkinnedMeshRenderer);
          components.forEach(function (comp) {
            _this2.materials.push(comp.material);
          });
          input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);
          input.on(Input.EventType.KEY_UP, this.onKeyUp, this);
        };

        _proto.update = function update(dt) {
          var _this3 = this;

          this.currentPosition.x += this.speed * dt * this.xAxis;
          this.currentPosition.z += this.speed * dt * this.zAxis;
          this.node.setPosition(this.currentPosition);

          if (this.currentPosition.equals(this.lastPosition)) {
            this.t = 0;
          }

          this.t += dt;
          this.t = clamp01(this.t);
          Vec3.lerp(this.lastPosition, this.lastPosition, this.currentPosition, this.t);
          Vec3.subtract(this.direction, this.lastPosition, this.currentPosition);
          this.materials.forEach(function (material) {
            var handle = material.passes[0].getHandle("direction");
            material.passes[0].getUniform(handle, _this3.directionUniform);

            _this3.directionUniform.set(_this3.direction.x, _this3.direction.y, _this3.direction.z, _this3.directionUniform.w);

            material.passes[0].setUniform(handle, _this3.directionUniform);
          });
        };

        _proto.onKeyDown = function onKeyDown(event) {
          var code = event.keyCode;

          switch (code) {
            case KeyCode.KEY_A:
              this.xAxis = -1;
              break;

            case KeyCode.KEY_D:
              this.xAxis = 1;
              break;

            case KeyCode.KEY_W:
              this.zAxis = -1;
              break;

            case KeyCode.KEY_S:
              this.zAxis = 1;
              break;
          }
        };

        _proto.onKeyUp = function onKeyUp(event) {
          var code = event.keyCode;

          switch (code) {
            case KeyCode.KEY_A:
              this.xAxis = 0;
              break;

            case KeyCode.KEY_D:
              this.xAxis = 0;
              break;

            case KeyCode.KEY_W:
              this.zAxis = 0;
              break;

            case KeyCode.KEY_S:
              this.zAxis = 0;
              break;
          }
        };

        return SolderController;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-gun-fire.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './test-anig.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, TestAnimationGraph;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      TestAnimationGraph = module.TestAnimationGraph;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "887bczrxrNJlpbQxk/M1zDy", "test-gun-fire", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var test_gun_fire = exports('test_gun_fire', (_dec = ccclass('test_gun_fire'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(test_gun_fire, _Component);

        function test_gun_fire() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = test_gun_fire.prototype;

        _proto.start = function start() {
          for (var i = 0; i < this.node.children.length; i++) {
            var child = this.node.children[i]; //child.getComponent(ActorEquipBase)!.enabled = false;

            child.addComponent(TestAnimationGraph);
          }
        };

        _proto.update = function update(deltaTime) {};

        return test_gun_fire;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-gun-tracer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, input, Input, KeyCode, Vec3, v3, randomRange, Component, Msg;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Vec3 = module.Vec3;
      v3 = module.v3;
      randomRange = module.randomRange;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9ae652i2EdG3LuuhHG9D6Gq", "test-gun-tracer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestGunTracer = exports('TestGunTracer', (_dec = ccclass('TestGunTracer'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestGunTracer, _Component);

        function TestGunTracer() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = TestGunTracer.prototype;

        _proto.start = function start() {
          input.on(Input.EventType.KEY_DOWN, this.keyDown, this);
        };

        _proto.keyDown = function keyDown(event) {
          if (event.keyCode === KeyCode.KEY_R) {
            var start = Vec3.ZERO;
            var end = v3(randomRange(0, 30), 1, randomRange(0, 30));
            Msg.emit('msg_set_tracer', {
              start: start,
              end: end
            });
          }
        };

        _proto.update = function update(deltaTime) {};

        return TestGunTracer;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-ik.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-animation-graph.ts', './aim-control.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, input, Input, KeyCode, Component, ActorAnimationGraph, AimControl;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      input = module.input;
      Input = module.Input;
      KeyCode = module.KeyCode;
      Component = module.Component;
    }, function (module) {
      ActorAnimationGraph = module.ActorAnimationGraph;
    }, function (module) {
      AimControl = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "df315rKC7tE5alpkOkPqTOP", "test-ik", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestIk = exports('TestIk', (_dec = ccclass('TestIk'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestIk, _Component);

        function TestIk() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "anim", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "targetRoot", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ikNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "target", _descriptor4, _assertThisInitialized(_this));

          _this.aimControl = void 0;
          _this.animationGraph = void 0;
          _this.targetIndex = 0;
          _this.bool_iron_sights = false;
          return _this;
        }

        var _proto = TestIk.prototype;

        _proto.start = function start() {
          var _this$ikNode, _this$anim;

          this.aimControl = (_this$ikNode = this.ikNode) == null ? void 0 : _this$ikNode.getComponent(AimControl);
          this.animationGraph = (_this$anim = this.anim) == null ? void 0 : _this$anim.getComponent(ActorAnimationGraph);
          input.on(Input.EventType.KEY_DOWN, this.keyDown, this);
        };

        _proto.keyDown = function keyDown(event) {
          if (event.keyCode === KeyCode.KEY_I) {
            var _this$animationGraph;

            this.bool_iron_sights = this.bool_iron_sights ? false : true;
            (_this$animationGraph = this.animationGraph) == null ? void 0 : _this$animationGraph.play('bool_iron_sights', this.bool_iron_sights);
            console.log('bool_iron_sights:', this.bool_iron_sights);
          }

          if (event.keyCode === KeyCode.KEY_F) {
            var _this$animationGraph2;

            (_this$animationGraph2 = this.animationGraph) == null ? void 0 : _this$animationGraph2.play('trigger_fire', true);
          }

          if (event.keyCode === KeyCode.KEY_N) {
            this.nextTarget();
          }

          if (event.keyCode === KeyCode.KEY_R) {
            this.animationGraph.play('trigger_reload', true);
          }

          if (event.keyCode === KeyCode.KEY_E) {
            this.animationGraph.play('trigger_reload_empty', true);
          }

          if (event.keyCode === KeyCode.KEY_H) {
            this.animationGraph.play('trigger_holster', true);
          }

          if (event.keyCode === KeyCode.SPACE) {
            this.animationGraph.play('trigger_jump', true);
          }
        };

        _proto.nextTarget = function nextTarget() {
          var _target, _this$target;

          var worldPosition = this.targetRoot.children[this.targetIndex].getWorldPosition();
          (_target = this.aimControl.target) == null ? void 0 : _target.setWorldPosition(worldPosition);
          (_this$target = this.target) == null ? void 0 : _this$target.setWorldPosition(worldPosition);
          console.log('current target index:', this.targetIndex);
          this.targetIndex++;
          if (this.targetIndex >= this.targetRoot.children.length) this.targetIndex = 0;
        };

        return TestIk;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "anim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "targetRoot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ikNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-move-target.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './actor-brain.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, ActorBrain;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      ActorBrain = module.ActorBrain;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "48d70TzkaFPvLUrKsdNHJzH", "test-move-target", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var test_move_target = exports('test_move_target', (_dec = ccclass('test_move_target'), _dec2 = property({
        type: ActorBrain
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(test_move_target, _Component);

        function test_move_target() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "brain", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = test_move_target.prototype;

        _proto.start = function start() {};

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          this.node.setWorldPosition(this.brain.targetPosition);
        };

        return test_move_target;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "brain", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-normal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, geometry, PhysicsSystem, Color, Vec3, Component, UtilVec3, Gizmo;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      geometry = module.geometry;
      PhysicsSystem = module.PhysicsSystem;
      Color = module.Color;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
      Gizmo = module.Gizmo;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "53f33cIeq5D/LxcgXsZE/Dx", "test-normal", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var TestNormal = exports('TestNormal', (_dec = ccclass('TestNormal'), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestNormal, _Component);

        function TestNormal() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.direction = v3(0, 0, 0);
          _this.normal = v3(0, 0, 0);
          _this.startPos = v3(0, 0, 0);

          _initializerDefineProperty(_this, "moveDirection", _descriptor, _assertThisInitialized(_this));

          _this.ray = new geometry.Ray();
          _this.p0 = v3(0, 0, 0);
          return _this;
        }

        var _proto = TestNormal.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        _proto.calculateSlopeDirection = function calculateSlopeDirection() {
          var ray = this.ray;
          var distance = 0.4;
          var p0 = v3(0, 0, 0);
          var p1 = v3(0, 0, 0);
          var dir = v3(0, -1, 0);
          var position = this.node.position.clone();
          position.add(dir);
          UtilVec3.copy(ray.o, this.node.position);
          ray.d = v3(0, -1, 0);
          Gizmo.drawLine(ray.o, position);

          if (PhysicsSystem.instance.raycastClosest(ray, undefined, distance)) {
            var hit1 = PhysicsSystem.instance.raycastClosestResult;
            var pos = hit1.hitPoint.clone();

            var _p = hit1.hitPoint.clone();

            console.log(hit1.hitNormal);
            Gizmo.drawLine(hit1.hitPoint, pos.add(hit1.hitNormal).multiplyScalar(2), Color.RED);
            Gizmo.drawLine(this.node.worldPosition, _p, Color.GREEN);
            ray.o.z = 0.03;
            ray.o.x = 0.03;
            var o1 = ray.o.clone();
            Gizmo.drawLine(ray.o, o1.add(dir));

            if (PhysicsSystem.instance.raycastClosest(ray, undefined, distance)) {
              var hit2 = PhysicsSystem.instance.raycastClosestResult;
              var pos2 = hit2.hitPoint.clone();

              var _p2 = hit2.hitPoint.clone();

              Gizmo.drawLine(this.node.worldPosition, _p2, Color.YELLOW);
              UtilVec3.copy(this.direction, _p2);
              this.direction.subtract(_p).normalize();
              Vec3.cross(this.normal, _p.subtract(this.node.worldPosition), _p2.subtract(this.node.worldPosition));
              var n = v3(0, 0, 0);
              UtilVec3.copy(n, this.node.worldPosition);
              n.add(this.normal);
              Gizmo.drawLine(this.node.worldPosition, n, Color.CYAN);
            }
          }
        };

        _proto.calculateSlopNormal = function calculateSlopNormal() {
          var ray = this.ray;
          var distance = 0.4;
          var p0 = v3(0, 0, 0);
          var p1 = v3(0, 0, 0);
          var p2 = v3(0, 0, 0);
          var dir = v3(0, -1, 0);
          var position = this.node.position.clone();
          position.add(dir);
          UtilVec3.copy(ray.o, this.node.position);
          ray.d = v3(0, -1, 0);
          Gizmo.drawLine(ray.o, position);

          if (PhysicsSystem.instance.raycastClosest(ray, undefined, distance)) {
            var hit1 = PhysicsSystem.instance.raycastClosestResult;

            var _p3 = hit1.hitPoint.clone();

            Gizmo.drawLine(this.node.worldPosition, _p3, Color.GREEN);
            ray.o.z = 0.03;
            ray.o.x = 0.03;
            var o1 = ray.o.clone();

            if (PhysicsSystem.instance.raycastClosest(ray, undefined, distance)) {
              var hit2 = PhysicsSystem.instance.raycastClosestResult;
              Gizmo.drawLine(ray.o, hit2.hitPoint);
              UtilVec3.copy(p1, hit2.hitPoint);
              Gizmo.drawLine(this.node.worldPosition, ray.o, Color.YELLOW); //UtilVec3.copy(this.direction, p1);
              //this.direction.subtract(p0).normalize();
            }

            ray.o.z = -0.03;
            ray.o.x = -0.03;

            if (PhysicsSystem.instance.raycastClosest(ray, undefined, distance)) {
              var hit3 = PhysicsSystem.instance.raycastClosestResult;
              UtilVec3.copy(p2, hit3.hitPoint);
              Gizmo.drawLine(ray.o, hit3.hitPoint);
              Gizmo.drawLine(this.node.worldPosition, ray.o, Color.YELLOW);
              Gizmo.drawLine(_p3, p1, Color.RED);
              Gizmo.drawLine(_p3, p2, Color.RED);
              Vec3.cross(this.normal, p1.subtract(_p3), p2.subtract(_p3));
              var n = v3(0, 0, 0);
              UtilVec3.copy(n, _p3);
              n.add(this.normal);
              Gizmo.drawLine(_p3, n, Color.RED);
              UtilVec3.copy(this.startPos, _p3);
            }
          }
        };

        _proto.calculateSlopDirection = function calculateSlopDirection() {
          var moveLength = this.moveDirection.length();
          console.log(moveLength);
          if (this.ray === undefined) this.ray = new geometry.Ray();
          UtilVec3.copy(this.ray.o, this.node.worldPosition);
          UtilVec3.copy(this.direction, this.moveDirection);
          this.ray.d = v3(0, -1, 0);

          if (PhysicsSystem.instance.raycastClosest(this.ray, undefined, 1)) {
            var hit1 = PhysicsSystem.instance.raycastClosestResult;
            UtilVec3.copy(this.p0, hit1.hitPoint);
            Gizmo.drawLine(this.ray.o, this.p0, Color.YELLOW);
            this.ray.o.add(this.moveDirection);
            Gizmo.drawLine(this.p0, this.p0.clone().add(this.moveDirection), Color.YELLOW);

            if (PhysicsSystem.instance.raycastClosest(this.ray, undefined, 1)) {
              var hit2 = PhysicsSystem.instance.raycastClosestResult;
              Gizmo.drawLine(this.ray.o, hit2.hitPoint, Color.GREEN);
              UtilVec3.copy(this.direction, hit2.hitPoint);
              this.direction.subtract(this.p0).normalize().multiplyScalar(moveLength);
              Gizmo.drawLine(this.p0, this.p0.clone().add(this.direction), Color.GREEN);
            }
          }
        };

        return TestNormal;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "moveDirection", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      }), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-reflect.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, ReflectionProbe, Material, MeshRenderer, renderer, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ReflectionProbe = module.ReflectionProbe;
      Material = module.Material;
      MeshRenderer = module.MeshRenderer;
      renderer = module.renderer;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "bb015ccmppAUo2gqVi764ql", "test-reflect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var test_reflect = exports('test_reflect', (_dec = ccclass('test_reflect'), _dec2 = property(ReflectionProbe), _dec3 = property(ReflectionProbe), _dec4 = property(Material), _dec5 = property(Material), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(test_reflect, _Component);

        function test_reflect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "_probe", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_material", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = test_reflect.prototype;

        _proto.refresh = function refresh() {
          if (!this.material || !this.probe) {
            return;
          }

          var mr = this.getComponent(MeshRenderer);
          var mat = new renderer.MaterialInstance({
            parent: this.material
          });
          mat.setProperty('mainTexture', mr.bakeSettings._probeCubemap);
          mr.setMaterialInstance(mat, 0);
        };

        _proto.start = function start() {
          this.refresh();
        };

        _proto.create = function create() {// let probe = this.probe
          // probe._createProbe();
          // probe.probe.initBakedTextures()
          // probe.probe._renderObjects = [];
          // probe.probe._resetCameraParams();
          // probe.probe._attachCameraToScene();
          // probe.probe._needRender = true;
          // let textures = probe.probe.bakedCubeTextures;
          // let cube = new TextureCube()
          // cube.mipmaps = [{
          //     front: textures[0].,
          // }]
        };

        _proto.update = function update(deltaTime) {};

        _createClass(test_reflect, [{
          key: "probe",
          get: function get() {
            return this._probe;
          },
          set: function set(v) {
            this._probe = v;
            this.refresh();
          }
        }, {
          key: "material",
          get: function get() {
            return this._material;
          },
          set: function set(v) {
            this._material = v;
            this.refresh();
          }
        }]);

        return test_reflect;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_probe", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2.prototype, "probe", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "probe"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_material", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _applyDecoratedDescriptor(_class2.prototype, "material", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "material"), _class2.prototype)), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-rigidbody-vector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, RigidBody, Vec3, Component, v3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      RigidBody = module.RigidBody;
      Vec3 = module.Vec3;
      Component = module.Component;
      v3 = module.v3;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "1ed65Hxm/5PM6pKmZnOJe1A", "test-rigidbody-vector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestRigidBodyVector = exports('TestRigidBodyVector', (_dec = ccclass('TestRigidBodyVector'), _dec2 = property(RigidBody), _dec3 = property(Vec3), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestRigidBodyVector, _Component);

        function TestRigidBodyVector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "rigid", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "velocity", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TestRigidBodyVector.prototype;

        _proto.start = function start() {};

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          this.node.setWorldPosition(this.rigid.node.worldPosition);
          this.rigid.getLinearVelocity(this.velocity);

          if (this.velocity.length() > 0.5) {
            this.velocity.add(this.node.worldPosition);
            this.node.lookAt(this.velocity);
          }
        };

        return TestRigidBodyVector;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "rigid", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "velocity", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-slope-direction.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './test-normal.ts', './test-slope-vector.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, v3, Component, TestNormal, TestSlopeVector;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      v3 = module.v3;
      Component = module.Component;
    }, null, function (module) {
      TestNormal = module.TestNormal;
    }, function (module) {
      TestSlopeVector = module.TestSlopeVector;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "e5fb3ZKGlFNUL8ucHOfA/bk", "test-slope-direction", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var TestSlopeDirection = exports('TestSlopeDirection', (_dec = ccclass('TestSlopeDirection'), _dec2 = property(TestNormal), _dec3 = property(Vec3), _dec4 = property(TestSlopeVector), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestSlopeDirection, _Component);

        function TestSlopeDirection() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "playerNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "moveDirection", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "slopeDirection", _descriptor3, _assertThisInitialized(_this));

          _this.endPosition = v3(0, 0, 0);
          return _this;
        }

        var _proto = TestSlopeDirection.prototype;

        _proto.update = function update(deltaTime) {};

        return TestSlopeDirection;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "playerNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "moveDirection", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "slopeDirection", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-slope-move.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ddfffHzXzZEZ6spcXcxRIkt", "test-slope-move", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestSlopeMove = exports('TestSlopeMove', (_dec = ccclass('TestSlopeMove'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestSlopeMove, _Component);

        function TestSlopeMove() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = TestSlopeMove.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        return TestSlopeMove;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-slope-vector.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Vec3, geometry, v3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Vec3 = module.Vec3;
      geometry = module.geometry;
      v3 = module.v3;
      Component = module.Component;
    }, null],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "79d73TdenFAL7LlYd7U4e9n", "test-slope-vector", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var TestSlopeVector = exports('TestSlopeVector', (_dec = ccclass('TestSlopeVector'), _dec2 = property([CCFloat]), _dec3 = property(CCFloat), _dec4 = property(Vec3), _dec5 = property(Vec3), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestSlopeVector, _Component);

        function TestSlopeVector() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "masks", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "distance", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "direction", _descriptor3, _assertThisInitialized(_this));

          _this._mask = 0;
          _this._ray = new geometry.Ray();
          _this.hitPoint = v3(0.5, 0, 0.5);

          _initializerDefineProperty(_this, "vectorSlop", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TestSlopeVector.prototype;

        _proto.start = function start() {
          for (var i = 0; i < this.masks.length; i++) this._mask = this._mask | 1 << this.masks[i];
        };

        _proto.update = function update(deltaTime) {};

        return TestSlopeVector;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "masks", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "distance", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "direction", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 1);
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "vectorSlop", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-stairs.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './res.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, Component, v3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
      v3 = module.v3;
    }, null, null],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "f4cd0RMTKlJ5pPN/Hbgx5zp", "test-stairs", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var TestStairs = exports('TestStairs', (_dec = ccclass('TestStairs'), _dec2 = property(Vec3), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestStairs, _Component);

        function TestStairs() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "count", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "height", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "angle", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "vector", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TestStairs.prototype;

        _proto.onEnable = function onEnable() {};

        return TestStairs;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "count", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "height", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "angle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 45;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "vector", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-steering-init.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './navigation-system.ts', './res-cache.ts', './data-core.ts', './level.ts', './actor.ts', './sound.ts', './save.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Node, Component, NavSystem, ResCache, Init, Level, Actor, Sound, Save;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      NavSystem = module.NavSystem;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      Init = module.Init;
    }, function (module) {
      Level = module.Level;
    }, function (module) {
      Actor = module.Actor;
    }, function (module) {
      Sound = module.Sound;
    }, function (module) {
      Save = module.Save;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "28f03uEZntM46bDTM6i7qr8", "test-steering-init", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestSteeringInit = exports('TestSteeringInit', (_dec = ccclass('TestSteeringInit'), _dec2 = property(JsonAsset), _dec3 = property(Node), _dec4 = property({
        type: Actor
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestSteeringInit, _Component);

        function TestSteeringInit() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "jsonAsset", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "enemiesNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "player", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TestSteeringInit.prototype;

        _proto.start = function start() {
          var _this$jsonAsset,
              _this2 = this;

          NavSystem.Init((_this$jsonAsset = this.jsonAsset) == null ? void 0 : _this$jsonAsset.json);
          ResCache.Instance.load(function () {
            var _this2$player, _this2$enemiesNode;

            var playerNode = _this2.node.getChildByName('player-tps');

            _this2.player = playerNode == null ? void 0 : playerNode.getComponent(Actor);
            Init();
            Save.Instance.init(); // Init player

            (_this2$player = _this2.player) == null ? void 0 : _this2$player.init('data-player'); // Set level player.

            Level.Instance._player = _this2.player; // Init sound.

            Sound.init(); // Init enemy actors.

            var enemies = (_this2$enemiesNode = _this2.enemiesNode) == null ? void 0 : _this2$enemiesNode.getComponentsInChildren(Actor);

            for (var i = 0; i < enemies.length; i++) {
              enemies[i].init('data-enemy_0');
              enemies[i].isReady = true;
            }

            Level.Instance.stop = false;
          });
        };

        _proto.update = function update(deltaTime) {};

        return TestSteeringInit;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jsonAsset", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "enemiesNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "player", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-stretched-billboard.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './g-math.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }, null],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "786200QDZZLrKZ2Jid1u7ZT", "test-stretched-billboard", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var TestStretchedBillboard = exports('TestStretchedBillboard', (_dec = ccclass('TestStretchedBillboard'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestStretchedBillboard, _Component);

        function TestStretchedBillboard() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "target", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "current", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "updateTime", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TestStretchedBillboard.prototype;

        _proto.start = function start() {};

        _proto.update = function update(deltaTime) {};

        return TestStretchedBillboard;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "current", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "updateTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-taa.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, instantiate, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "dfd71p8wkJHMaSoDhEndP14", "test-taa", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var test_taa = exports('test_taa', (_dec = ccclass('test_taa'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(test_taa, _Component);

        function test_taa() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "temp", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = test_taa.prototype;

        _proto.start = function start() {
          if (!this.temp) return;
          globalThis.test_taa = this;
        };

        _proto.create = function create() {
          var temp = instantiate(this.temp);
          temp.parent = this.node.parent;
          this.node.active = false;
        };

        return test_taa;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "temp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test-ui.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6af18D6TbtNH6AYhK5mvjsZ", "test-ui", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var test_ui = exports('test_ui', (_dec = ccclass('test_ui'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(test_ui, _Component);

        function test_ui() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = test_ui.prototype;

        _proto.start = function start() {
          console.log(this.node.name, this.node.position, this.node.worldPosition);
        };

        _proto.update = function update(deltaTime) {};

        return test_ui;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/touch-cancel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Touch, EventTouch, Input, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Touch = module.Touch;
      EventTouch = module.EventTouch;
      Input = module.Input;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2fd681A8khCEJwwyPC7+nQn", "touch-cancel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TouchCancel = exports('TouchCancel', (_dec = ccclass('TouchCancel'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TouchCancel, _Component);

        function TouchCancel() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = TouchCancel.prototype;

        _proto.onDisable = function onDisable() {
          var touch = new Touch(0, 0, 0);
          var cancelEvent = new EventTouch([touch], true, Input.EventType.TOUCH_CANCEL);
          cancelEvent.touch = touch;
          this.node.dispatchEvent(cancelEvent);
        };

        return TouchCancel;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/transparent-depth.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, MeshRenderer, ParticleSystem, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      MeshRenderer = module.MeshRenderer;
      ParticleSystem = module.ParticleSystem;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "2775dka8YFFHYi0Eew/hGdH", "transparent-depth", undefined);

      var ccclass = _decorator.ccclass,
          executeInEditMode = _decorator.executeInEditMode,
          property = _decorator.property;
      var TransparentDepth = exports('TransparentDepth', {
        objects: []
      });
      var TransparentDepthObject = exports('TransparentDepthObject', (_dec = ccclass('TransparentDepthObject'), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TransparentDepthObject, _Component);

        function TransparentDepthObject() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "priority", _descriptor, _assertThisInitialized(_this));

          _this.model = void 0;
          return _this;
        }

        var _proto = TransparentDepthObject.prototype;

        _proto.onEnable = function onEnable() {
          var mr = this.getComponent(MeshRenderer);
          var model;

          if (mr) {
            model = mr.model;
          }

          var particle = this.getComponent(ParticleSystem);

          if (particle) {
            model = particle.processor.getModel();
          }

          this.model = model;

          if (model) {
            TransparentDepth.objects.push(this);
            this.resort();
          }
        };

        _proto.onDisable = function onDisable() {
          var index = TransparentDepth.objects.indexOf(this);

          if (index !== -1) {
            TransparentDepth.objects.splice(index, 1);
            this.resort();
          }
        };

        _proto.resort = function resort() {
          TransparentDepth.objects.sort(function (a, b) {
            return a.priority - b.priority;
          });
        };

        return TransparentDepthObject;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "priority", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ubo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "32eafJcbkdKK6CqEeWYZoN8", "ubo", undefined);

      var UBOBase = exports('UBOBase', /*#__PURE__*/function () {
        function UBOBase() {}

        UBOBase.increaseIndex = function increaseIndex(count) {
          var ret = this.ubo_index;
          this.ubo_index += count;
          return ret;
        };

        _createClass(UBOBase, null, [{
          key: "COUNT",
          get: function get() {
            return this.ubo_index;
          }
        }, {
          key: "SIZE",
          get: function get() {
            return this.COUNT * 4;
          }
        }]);

        return UBOBase;
      }()); // import { builtinResMgr, Director, director, ForwardPipeline, Game, game, gfx, pipeline, RenderTexture, sys, Texture2D, TextureCube } from "cc";
      // const { PipelineGlobalBindings, globalDescriptorSetLayout, bindingMappingInfo } = pipeline;
      // let BindingStart = PipelineGlobalBindings.COUNT;
      // let BindingIndex = 0;
      // // UBOCustomGlobal
      // export class UBOCustomGlobal extends UBOBase {
      //     /////////////////// water sdf /////////////////
      //     static water_sdf = this.increaseIndex(4);        // xy: range, z: uv scale
      //     static water_sdf2 = this.increaseIndex(4);        // xy: sdf center
      //     /////////////////// water  /////////////////
      //     static water = this.increaseIndex(4);        // x: water height
      //     /////////////////// actor  /////////////////
      //     static actor_pos = this.increaseIndex(4);
      //     static actor_proj_pos = this.increaseIndex(4);
      //     static actor_view_pos = this.increaseIndex(4);
      //     /////////////////// render setting  /////////////////
      //     static render_setting = this.increaseIndex(4);
      //     /////////////////// sky  /////////////////
      //     static sky_camera_pos = this.increaseIndex(4);
      //     /////////////////// screen  /////////////////
      //     static window_size = this.increaseIndex(4);
      //     //
      //     static readonly NAME = 'CCCustomGlobal';
      //     static readonly BINDING = BindingStart + BindingIndex++;
      //     static readonly DESCRIPTOR = new gfx.DescriptorSetLayoutBinding(this.BINDING, gfx.DescriptorType.UNIFORM_BUFFER, 1, gfx.ShaderStageFlagBit.ALL);
      //     static readonly LAYOUT = new gfx.UniformBlock(pipeline.SetIndex.GLOBAL, this.BINDING, this.NAME, [
      //         /////////////////// global /////////////////
      //         new gfx.Uniform('cc_water_sdf', gfx.Type.FLOAT4, 1),
      //         new gfx.Uniform('cc_water_sdf2', gfx.Type.FLOAT4, 1),
      //         new gfx.Uniform('cc_water', gfx.Type.FLOAT4, 1),
      //         new gfx.Uniform('cc_actor_pos', gfx.Type.FLOAT4, 1),
      //         new gfx.Uniform('cc_actor_proj_pos', gfx.Type.FLOAT4, 1),
      //         new gfx.Uniform('cc_actor_view_pos', gfx.Type.FLOAT4, 1),
      //         new gfx.Uniform('cc_render_setting', gfx.Type.FLOAT4, 1),
      //         new gfx.Uniform('cc_sky_camera_pos', gfx.Type.FLOAT4, 1),
      //         new gfx.Uniform('cc_window_size', gfx.Type.FLOAT4, 1),
      //     ], 1)
      // }
      // export function registerUBO (ubo: typeof UBOBase) {
      //     globalDescriptorSetLayout.layouts[ubo.NAME] = ubo.LAYOUT;
      //     globalDescriptorSetLayout.bindings[ubo.BINDING] = ubo.DESCRIPTOR;
      //     if (director.root) {
      //         director.root.pipeline.descriptorSetLayout.bindings[ubo.BINDING] = ubo.DESCRIPTOR;
      //         director.root.pipeline.descriptorSetLayout.bindingIndices[ubo.BINDING] = ubo.BINDING;
      //         director.root.pipeline.descriptorSetLayout.descriptorIndices[ubo.BINDING] = ubo.BINDING;
      //     }
      // }
      // export function registerTexture (name: string, type: gfx.Type, binding: number) {
      //     try {
      //         const UNIFORM_LAYOUT = new gfx.UniformSamplerTexture(pipeline.SetIndex.GLOBAL, binding, name, type, 1);
      //         const UNIFORM_DESCRIPTOR = new gfx.DescriptorSetLayoutBinding(binding, gfx.DescriptorType.SAMPLER_TEXTURE, 1, gfx.ShaderStageFlagBit.FRAGMENT);
      //         globalDescriptorSetLayout.layouts[name] = UNIFORM_LAYOUT;
      //         globalDescriptorSetLayout.bindings[binding] = UNIFORM_DESCRIPTOR;
      //         // director.root.pipeline.descriptorSetLayout.bindings[binding] = UNIFORM_DESCRIPTOR;
      //         // director.root.pipeline.descriptorSetLayout.bindingIndices[binding] = binding;
      //         // director.root.pipeline.descriptorSetLayout.descriptorIndices[binding] = binding;
      //         // bindingMappingInfo.samplerOffsets[1]++;
      //         // bindingMappingInfo.samplerOffsets[2]++;
      //     }
      //     catch (err) {
      //         console.error(err)
      //     }
      //     return binding;
      // }
      // export let UBOCustomGlobalBuffer: gfx.Buffer | null = null;
      // export const UBOCustomGlobalBufferArray = new Float32Array(UBOCustomGlobal.COUNT);
      // // ssao
      // export const UNIFORM_SSAO_BINDING = BindingStart + BindingIndex++;
      // // scene depth
      // export const UNIFORM_SCENE_DEPTH_BINDING = BindingStart + BindingIndex++;
      // // scene color
      // export const UNIFORM_SCENE_COLOR_BINDING = BindingStart + BindingIndex++;
      // // water sdf
      // export const UNIFORM_WATER_SDF_BINDING = BindingStart + BindingIndex++;
      // // grass texture
      // export const UNIFORM_GRASS_BINDING = BindingStart + BindingIndex++;
      // export function bindTexture (binding: number, texture: Texture2D | TextureCube | RenderTexture, descriptorSet?: gfx.DescriptorSet) {
      //     const pipeline = director.root!.pipeline as ForwardPipeline;
      //     descriptorSet = descriptorSet || pipeline.descriptorSet;
      //     descriptorSet.bindSampler(binding, texture.getGFXSampler());
      //     descriptorSet.bindTexture(binding, texture.getGFXTexture()!);
      // }
      // export function bindGFXTexture (binding: number, texture: gfx.Texture, descriptorSet?: gfx.DescriptorSet, sampler?: gfx.Sampler) {
      //     const pipeline = director.root!.pipeline as ForwardPipeline;
      //     descriptorSet = descriptorSet || pipeline.descriptorSet;
      //     sampler = sampler || director.root.pipeline.globalDSManager.linearSampler;
      //     descriptorSet.bindTexture(binding, texture);
      //     descriptorSet.bindSampler(binding, sampler);
      // }
      // export function getOrCreateBuffer (ubo: typeof UBOBase) {
      //     let pipeline = director.root!.pipeline as ForwardPipeline;
      //     let device = pipeline.device;
      //     let buffer = pipeline.descriptorSet.getBuffer(ubo.BINDING);
      //     if (!buffer) {
      //         buffer = device.createBuffer(new gfx.BufferInfo(
      //             gfx.BufferUsageBit.UNIFORM | gfx.BufferUsageBit.TRANSFER_DST,
      //             gfx.MemoryUsageBit.HOST | gfx.MemoryUsageBit.DEVICE,
      //             ubo.SIZE,
      //         ));
      //         pipeline.descriptorSet.bindBuffer(ubo.BINDING, buffer);
      //     }
      //     return buffer;
      // }
      // export function resetUBO () {
      //     registerUBO(UBOCustomGlobal);
      //     registerTexture('cc_ssao_map', gfx.Type.SAMPLER2D, UNIFORM_SSAO_BINDING);
      //     registerTexture('cc_scene_depth', gfx.Type.SAMPLER2D, UNIFORM_SCENE_DEPTH_BINDING);
      //     registerTexture('cc_scene_color', gfx.Type.SAMPLER2D, UNIFORM_SCENE_COLOR_BINDING);
      //     registerTexture('cc_water_sdf_map', gfx.Type.SAMPLER2D, UNIFORM_WATER_SDF_BINDING);
      //     registerTexture('cc_grass_map', gfx.Type.SAMPLER2D, UNIFORM_GRASS_BINDING);
      //     let pipAny = director.root.pipeline as any;
      //     let pipForward = director.root.pipeline as ForwardPipeline;
      //     if (pipAny.globalDSManager.regenLayout) {
      //         pipAny.globalDSManager.regenLayout();
      //         pipAny._descriptorSet = pipAny.globalDSManager.globalDescriptorSet;
      //         pipForward.pipelineUBO.activate(pipForward.device, pipForward);
      //     }
      //     // ubo
      //     UBOCustomGlobalBuffer = getOrCreateBuffer(UBOCustomGlobal);
      //     UBOCustomGlobalBuffer.update(UBOCustomGlobalBufferArray);
      //     // texture
      //     const black = builtinResMgr.get('black-texture') as Texture2D;
      //     const white = builtinResMgr.get('white-texture') as Texture2D;
      //     const defaultTex = builtinResMgr.get<Texture2D>('default-texture');
      //     bindTexture(UNIFORM_SSAO_BINDING, black);
      //     bindTexture(UNIFORM_SCENE_DEPTH_BINDING, white);
      //     bindTexture(UNIFORM_SCENE_COLOR_BINDING, black);
      //     bindTexture(UNIFORM_WATER_SDF_BINDING, black);
      //     bindTexture(UNIFORM_GRASS_BINDING, black);
      //     // 需要重新绑定 sampler
      //     // 华为 p40 上必须绑定为 point filter
      //     let sampler = pipForward.globalDSManager.linearSampler
      //     if (sys.isMobile) {
      //         sampler = pipForward.globalDSManager.pointSampler
      //     }
      //     pipForward.descriptorSet.bindSampler(pipeline.UNIFORM_SHADOWMAP_BINDING, sampler)
      //     pipForward.descriptorSet.bindTexture(pipeline.UNIFORM_SHADOWMAP_BINDING, defaultTex.getGFXTexture())
      //     // bindTexture(pipeline.UNIFORM_SHADOWMAP_BINDING, defaultTex);
      // }
      // game.on(Game.EVENT_GAME_INITED, () => {
      //     resetUBO();
      // });

      UBOBase.NAME = '';
      UBOBase.BINDING = 0;
      UBOBase.LAYOUT = void 0;
      UBOBase.DESCRIPTOR = void 0;
      UBOBase.ubo_index = 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-aim-range.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SpriteComponent, Component, Msg;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteComponent = module.SpriteComponent;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "67693VFPHZJxozmdCVahxpU", "ui-aim-range", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIAimRange = exports('UIAimRange', (_dec = ccclass('UIAimRange'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIAimRange, _Component);

        function UIAimRange() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.sprite = void 0;
          _this.dirs = [[1, 0], [0, 1], [-1, 0], [0, -1]];
          _this.baseSize = 40;
          return _this;
        }

        var _proto = UIAimRange.prototype;

        _proto.start = function start() {
          this.sprite = this.getComponent(SpriteComponent);

          if (this.sprite === undefined) {
            throw new Error(this.node.name + " node UIAimRange can not find sprite component.");
          }

          Msg.bind('msg_update_aim', this.updateAim, this);
          this.updateAim(0);
        };

        _proto.updateAim = function updateAim(size) {
          var currentSize = size * this.baseSize;

          for (var i = 0; i < this.node.children.length; i++) {
            var child = this.node.children[i];
            var dir = this.dirs[i];
            child.setPosition(dir[0] * currentSize, dir[1] * currentSize, 0);
          }
        };

        return UIAimRange;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-animation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, animation, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      animation = module.animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "351ecDBP0RMHrGz1xzrr0oK", "ui-animation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ui_animation = exports('ui_animation', (_dec = ccclass('UIAnimation'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ui_animation, _Component);

        function ui_animation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._graph = void 0;
          return _this;
        }

        var _proto = ui_animation.prototype;

        _proto.onEnable = function onEnable() {
          this._graph = this.getComponent(animation.AnimationController);

          if (this._graph === null) {
            throw new Error(this.node.name + " node can not find AnimationController.");
          }

          this.node.on('set_anim', this.play, this);
        };

        _proto.play = function play(key, value) {
          this._graph.setValue(key, value);
        };

        return ui_animation;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-auto-hidden.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Color, SpriteComponent, math, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Color = module.Color;
      SpriteComponent = module.SpriteComponent;
      math = module.math;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "136df29SN5J5KukUd6VJXVN", "ui-auto-hidden", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UiAutoHidden = exports('UiAutoHidden', (_dec = ccclass('UiAutoHidden'), _dec2 = property(CCFloat), _dec3 = property(CCFloat), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UiAutoHidden, _Component);

        function UiAutoHidden() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._color_a = 0;
          _this._color = new Color(255, 255, 255, 0);

          _initializerDefineProperty(_this, "smooth", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "wait", _descriptor2, _assertThisInitialized(_this));

          _this._sprite = void 0;
          _this._wait = 3;
          return _this;
        }

        var _proto = UiAutoHidden.prototype;

        _proto.__preload = function __preload() {
          this._sprite = this.getComponent(SpriteComponent);
          this._sprite.color = this._color;
        };

        _proto.onEnable = function onEnable() {
          this.setDisplay(255);
        };

        _proto.setDisplay = function setDisplay(value) {
          if (value === 255) {
            this._color.a = value;
            this._sprite.color = this._color;
            this._color_a = 0;
          }

          this._wait = this.wait;
        };

        _proto.update = function update(deltaTime) {
          this._wait -= deltaTime;
          if (this._wait > 0) return;
          this._color.a = math.lerp(this._color.a, this._color_a, deltaTime * this.smooth);
          this._sprite.color = this._color;

          if (this._color.a <= 0.01) {
            this.node.active = false;
          }
        };

        return UiAutoHidden;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "smooth", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "wait", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-base.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gm.ts', './bind.ts', './level.ts', './sound.ts', './local.ts', './msg.ts', './res.ts', './res-cache.ts', './data-structure.ts', './g-math.ts', './util.ts', './fil-smooth.ts', './data-core.ts', './local-label.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _assertThisInitialized, cclegacy, Button, Label, Slider, Sprite, EditBox, Toggle, v2, math, v3, Vec2, GM, Bind, Level, Sound, Local, Msg, Res, ResCache, Queue, GMath, UtilNode, UtilVec3, FilSmooth, DataGameInst, LocalLabel;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
      Label = module.Label;
      Slider = module.Slider;
      Sprite = module.Sprite;
      EditBox = module.EditBox;
      Toggle = module.Toggle;
      v2 = module.v2;
      math = module.math;
      v3 = module.v3;
      Vec2 = module.Vec2;
    }, function (module) {
      GM = module.GM;
    }, function (module) {
      Bind = module.Bind;
    }, function (module) {
      Level = module.Level;
    }, function (module) {
      Sound = module.Sound;
    }, function (module) {
      Local = module.Local;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      ResCache = module.ResCache;
    }, function (module) {
      Queue = module.Queue;
    }, function (module) {
      GMath = module.GMath;
    }, function (module) {
      UtilNode = module.UtilNode;
      UtilVec3 = module.UtilVec3;
    }, function (module) {
      FilSmooth = module.FilSmooth;
    }, function (module) {
      DataGameInst = module.DataGameInst;
    }, function (module) {
      LocalLabel = module.LocalLabel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cc094e8w7lEsq+Xg5atbhjQ", "ui-base", undefined);

      var UIBase = exports('UIBase', /*#__PURE__*/function () {
        function UIBase(node) {
          this.node = void 0;
          this.isOn = false;
          this._map = Object.create(null);
          this.node = node;
          this._map = BindUI.get(this.node);
        }

        var _proto = UIBase.prototype;

        _proto.refresh = function refresh() {
          if (!this.isOn) return;

          for (var i = 0; i < this._map.length; i++) this._map[i].refresh();
        };

        _proto.on = function on() {
          this.isOn = true;

          for (var i = 0; i < this._map.length; i++) this._map[i].on();

          this.node.active = true;
        };

        _proto.off = function off() {
          this.isOn = false;

          for (var i = 0; i < this._map.length; i++) this._map[i].off();

          this.node.active = false;
        };

        _proto.destroy = function destroy() {};

        return UIBase;
      }());
      var UICom = exports('UICom', /*#__PURE__*/function () {
        function UICom(node) {
          this._node = void 0;
          this._node = node;
        }

        var _proto2 = UICom.prototype;

        _proto2.on = function on() {};

        _proto2.off = function off() {};

        _proto2.refresh = function refresh() {};

        return UICom;
      }());
      var BindUI = exports('BindUI', /*#__PURE__*/function () {
        function BindUI() {} // User interface binding mapping.

        /**
         * Initialize the user interface binder.
         */


        BindUI.init = function init() {
          // Bind button game object node.
          this._map['btn'] = function (node) {
            return new BtnBase(node);
          }; // Bind label game object node.


          this._map['txt'] = function (node) {
            return new TxtBase(node);
          }; // Bind group game object node.


          this._map['grp'] = function (node) {
            return new GrpBase(node);
          }; // Bind sprite game object node.


          this._map['spr'] = function (node) {
            return new SprBase(node);
          }; // Bind toggle game object node.


          this._map['tgl'] = function (node) {
            return new TglBase(node);
          }; // Bind group game manager object node.


          this._map['grp_gm'] = function (node) {
            return new GrpGM(node);
          }; // Bind slider game object node.


          this._map['sli'] = function (node) {
            return new SliBase(node);
          }; // Bind fill sprite game object node.


          this._map['fil'] = function (node) {
            return new FilBase(node);
          }; // Bind group Picked Tips game object node.


          this._map['grp_picked_tips'] = function (node) {
            return new GrpPickedTips(node);
          }; // Bind group select equips game object node.


          this._map['grp_select_equips'] = function (node) {
            return new GrpSelectEquips(node);
          }; // Bind group equip info game object node.


          this._map['grp_equip_info'] = function (node) {
            return new GrpEquipInfo(node);
          }; // Bind group bag game object node.


          this._map['grp_bag'] = function (node) {
            return new GrpBag(node);
          }; // Bind group map game object node.


          this._map['grp_map'] = function (node) {
            return new GrpMap(node);
          };
        }
        /**
         * This method is used to detect and bind the nodes of the user interface.
         * @param node Binding nodes need to be detected.
         * @returns Array of components that have been bound.
         */
        ;

        BindUI.get = function get(node) {
          var children = UtilNode.getChildren(node);
          var comList = [];

          for (var i = 0; i < children.length; i++) {
            var tempi = children[i]; // Bind local key.

            if (tempi.name.includes('local_')) {
              tempi.addComponent(LocalLabel);
            }

            if (this._map[tempi.name]) {
              // Bind key
              var key = tempi.name;
              var _com = this._map[key];

              if (_com !== undefined) {
                comList.push(this._map[key](tempi));
                continue;
              }
            }

            if (Bind.Instance.hasBind(tempi.name)) {
              // Bind type
              var type = tempi.name.slice(0, 3);
              var comType = this._map[type];

              if (comType) {
                comList.push(comType(tempi));
              }
            }
          }

          return comList;
        };

        return BindUI;
      }());
      BindUI._map = {};
      var BtnBase = exports('BtnBase', /*#__PURE__*/function (_UICom) {
        _inheritsLoose(BtnBase, _UICom);

        function BtnBase(node) {
          var _self$_node, _this$_node;

          var _this;

          _this = _UICom.call(this, node) || this;
          _this._name = '';
          _this._btn = void 0;

          var self = _assertThisInitialized(_this);

          _this._name = node.name;
          _this._btn = (_self$_node = self._node) == null ? void 0 : _self$_node.getComponent(Button);
          (_this$_node = _this._node) == null ? void 0 : _this$_node.on(Button.EventType.CLICK, function () {
            Bind.Instance.on(self._name);
            Sound.on('sfx_click');
          }, _assertThisInitialized(_this));
          return _this;
        }

        return BtnBase;
      }(UICom));
      var TxtBase = exports('TxtBase', /*#__PURE__*/function (_UICom2) {
        _inheritsLoose(TxtBase, _UICom2);

        function TxtBase(node) {
          var _this2$_node;

          var _this2;

          _this2 = _UICom2.call(this, node) || this;
          _this2.text = void 0;
          _this2.text = UtilNode.getComponent(_this2._node, Label);
          _this2.text.string = Bind.Instance.get((_this2$_node = _this2._node) == null ? void 0 : _this2$_node.name);
          return _this2;
        }

        var _proto3 = TxtBase.prototype;

        _proto3.on = function on() {
          _UICom2.prototype.on.call(this);

          this.refresh();
        };

        _proto3.refresh = function refresh() {
          _UICom2.prototype.refresh.call(this);

          this.text.string = Bind.Instance.get(this._node.name);
        };

        return TxtBase;
      }(UICom));
      var SliBase = exports('SliBase', /*#__PURE__*/function (_UICom3) {
        _inheritsLoose(SliBase, _UICom3);

        function SliBase(node) {
          var _this3$slider;

          var _this3;

          _this3 = _UICom3.call(this, node) || this;
          _this3.slider = void 0;
          _this3.fill = void 0;
          _this3.slider = UtilNode.getComponent(_this3._node, Slider);
          _this3.fill = UtilNode.getChildComponent(_this3._node, 'fill', Sprite);
          if (_this3.fill.type !== Sprite.Type.FILLED) throw new Error(_this3._node.name + " node Sprite not set Sprite.Type.FILLED");
          var defaultValue = Bind.Instance.get(_this3._node.name);
          _this3.slider.progress = defaultValue;
          _this3.fill.fillRange = defaultValue;
          (_this3$slider = _this3.slider) == null ? void 0 : _this3$slider.node.on('slide', function () {
            var _this3$slider2;

            _this3.fill.fillRange = GMath.range(1, 0, _this3.slider.progress);
            Msg.emit(_this3._node.name, (_this3$slider2 = _this3.slider) == null ? void 0 : _this3$slider2.progress);
          }, _assertThisInitialized(_this3));
          return _this3;
        }

        var _proto4 = SliBase.prototype;

        _proto4.on = function on() {
          _UICom3.prototype.on.call(this);

          var defaultValue = Bind.Instance.get(this._node.name);
          this.slider.progress = defaultValue;
          this.fill.fillRange = defaultValue;
        };

        return SliBase;
      }(UICom));
      var FilBase = exports('FilBase', /*#__PURE__*/function (_UICom4) {
        _inheritsLoose(FilBase, _UICom4);

        function FilBase(node) {
          var _this4;

          _this4 = _UICom4.call(this, node) || this;
          _this4.fil_value = void 0;
          _this4.fil_smooth = void 0;
          _this4.fil_value = UtilNode.getComponent(_this4._node, Sprite);
          _this4.fil_value.fillRange = 0;
          _this4.fil_smooth = _this4._node.addComponent(FilSmooth);
          Msg.on(_this4._node.name, function (value) {
            _this4.fil_smooth.setValue(value);
          });
          return _this4;
        }

        var _proto5 = FilBase.prototype;

        _proto5.on = function on() {
          this.fil_value.fillRange = 0;
        };

        return FilBase;
      }(UICom));
      var SprBase = exports('SprBase', /*#__PURE__*/function (_UICom5) {
        _inheritsLoose(SprBase, _UICom5);

        function SprBase(node) {
          var _this5;

          _this5 = _UICom5.call(this, node) || this;
          _this5.sprite = void 0;
          _this5.sprite = UtilNode.getComponent(_this5._node, Sprite);
          Msg.on(_this5._node.name, function (value) {
            _this5.sprite.spriteFrame = value;
          });
          return _this5;
        }

        var _proto6 = SprBase.prototype;

        _proto6.on = function on() {
          _UICom5.prototype.on.call(this);

          var src = Bind.Instance.get(this._node.name);
          this.sprite.spriteFrame = src;
        };

        return SprBase;
      }(UICom));
      var GrpBase = exports('GrpBase', /*#__PURE__*/function (_UICom6) {
        _inheritsLoose(GrpBase, _UICom6);

        function GrpBase(node) {
          return _UICom6.call(this, node) || this;
        }

        return GrpBase;
      }(UICom));
      var GrpGM = exports('GrpGM', /*#__PURE__*/function (_GrpBase) {
        _inheritsLoose(GrpGM, _GrpBase);

        function GrpGM(node) {
          var _this6;

          _this6 = _GrpBase.call(this, node) || this;
          _this6.btn_gm = void 0;
          _this6.inp_gm = void 0;
          _this6.btn_gm = UtilNode.getChildByName(_this6._node, 'btn_gm');
          _this6.inp_gm = UtilNode.getChildComponent(_this6._node, 'inp_gm', EditBox);

          _this6.btn_gm.on(Button.EventType.CLICK, function () {
            GM.run(_this6.inp_gm.string);
          });

          return _this6;
        }

        return GrpGM;
      }(GrpBase));
      var TglBase = exports('TglBase', /*#__PURE__*/function (_UICom7) {
        _inheritsLoose(TglBase, _UICom7);

        function TglBase(node) {
          var _this7;

          _this7 = _UICom7.call(this, node) || this;
          _this7._toggle = void 0;
          _this7._toggle = UtilNode.getComponent(_this7._node, Toggle);

          _this7._node.on(Toggle.EventType.TOGGLE, function () {
            Bind.Instance.on(_this7._node.name);
          });

          return _this7;
        }

        return TglBase;
      }(UICom));
      var GrpSelectEquips = exports('GrpSelectEquips', /*#__PURE__*/function (_UICom8) {
        _inheritsLoose(GrpSelectEquips, _UICom8);

        function GrpSelectEquips(node) {
          var _this8;

          _this8 = _UICom8.call(this, node) || this; //Init circle items.

          _this8.list = void 0;
          _this8.img_select_highlight = void 0;
          _this8._curIndex = -1;
          var count = DataGameInst._data.count_bag_count;
          _this8.list = new Array(count);
          var angle = 360 / count;
          _this8.img_select_highlight = UtilNode.getChildByName(_this8._node, 'img_select_highlight');

          _this8.img_select_highlight.setPosition(100000, 0, 0);

          var item = UtilNode.getChildByName(_this8._node, 'img_items');
          var radius = item.position.x;
          var offset = angle / 2;
          var V2FORWARD = v2(1, 0);

          var getPosFromAngle = function getPosFromAngle(angle) {
            var x = Math.cos(angle) * radius;
            var y = Math.sin(angle) * radius;
            return {
              x: x,
              y: y
            };
          };

          for (var i = 0; i < count; i++) {
            var currentAngle = angle * i + offset;
            var iAngle = math.toRadian(currentAngle);
            var pos = getPosFromAngle(iAngle);
            var newItem = Res.instNode(item, _this8._node, v3(pos.x, pos.y, 0));
            _this8.list[i] = new GrpSelectItem(newItem, currentAngle - 90);
          }

          item.active = false;
          Msg.on('msg_select_equip', function (dir) {
            //if (dir.length() <= DataGameInst._data.sensitivity_select_weapon) return;
            var curAngle = math.toDegree(Vec2.angle(dir, V2FORWARD));
            var projOrigin = v2(0, 1);
            var dot = Vec2.dot(projOrigin, dir);
            if (dot < 0) curAngle = 360 - curAngle;
            _this8._curIndex = Math.round(curAngle / angle);

            if (_this8._curIndex >= DataGameInst._data.count_bag_count) {
              //console.error(` Calculate equip error current index: ${this._curIndex}, current Angle: ${curAngle}, dir: ${dir}`);
              _this8._curIndex = DataGameInst._data.count_bag_count - 1;
            }

            var selectAngle = math.toRadian(_this8._curIndex * angle + offset);
            var pos = getPosFromAngle(selectAngle);

            _this8.img_select_highlight.setPosition(pos.x, pos.y, 0);

            _this8.img_select_highlight.setRotationFromEuler(0, 0, _this8.list[_this8._curIndex]._angle);
          });
          return _this8;
        }

        var _proto7 = GrpSelectEquips.prototype;

        _proto7.on = function on() {
          var _player = Level.Instance._player;
          if (!_player) return; // set equip info.

          var data = _player._data.items;
          var itemsName = _player._data.equipment_name_list;

          for (var i = 0; i < this.list.length; i++) {
            var itemName = itemsName[i];
            var itemObj = this.list[i];
            var hasItem = itemName.length > 0;
            itemObj.setDisplay(hasItem);

            if (hasItem) {
              var item = data[itemName];
              itemObj.setInfo(item);
            }
          }
        };

        _proto7.off = function off() {
          // off ui panel then.
          if (Level.Instance._player) Level.Instance._player.onEquip(this._curIndex);
        };

        return GrpSelectEquips;
      }(UICom));

      var GrpSelectItem = /*#__PURE__*/function () {
        function GrpSelectItem(node, angle) {
          this.txt_nun = void 0;
          this.img_icon = void 0;
          this._node = void 0;
          this._angle = void 0;
          this._angle = angle;
          this._node = node;
          var img_bg = UtilNode.getChildByName(this._node, 'img_bg');
          img_bg.setRotationFromEuler(0, 0, angle);
          this.txt_nun = UtilNode.getChildComponent(this._node, 'txt_num', Label);
          this.img_icon = UtilNode.getChildComponent(this._node, 'img_icon', Sprite);
        }

        var _proto8 = GrpSelectItem.prototype;

        _proto8.setDisplay = function setDisplay(isShow) {
          this.txt_nun.node.active = isShow;
          this.img_icon.node.active = isShow;
        };

        _proto8.setInfo = function setInfo(item) {
          this.txt_nun.string = item.count.toString();
          this.img_icon.spriteFrame = ResCache.Instance.getSprite("img_icon_" + item.name);
        };

        return GrpSelectItem;
      }();

      var GrpEquipInfo = exports('GrpEquipInfo', /*#__PURE__*/function (_UICom9) {
        _inheritsLoose(GrpEquipInfo, _UICom9);

        function GrpEquipInfo(node) {
          var _this9;

          _this9 = _UICom9.call(this, node) || this;
          _this9.txt_equip_info = void 0;
          _this9.txt_equip_info = UtilNode.getChildComponent(_this9._node, 'txt_equip_info', Label);
          Msg.on('msg_update_equip_info', function () {
            var _player = Level.Instance._player;
            if (!_player) return;
            var items = _player._data.items;
            var equipment_name_list = _player._data.equipment_name_list;
            var current_equipment_index = _player._data.current_equipment_index;
            var hasHighLight = current_equipment_index !== -1;

            if (hasHighLight) {
              // Get current data.
              var itemName = equipment_name_list[current_equipment_index];
              var itemData = items[itemName];

              if (itemName !== '') {
                var isShow = itemData.data.bullet_count > 1;
                Msg.emit('msg_grp_equip_info', isShow ? 255 : 0);

                if (isShow) {
                  var showNum = itemData.bulletCount;
                  if (showNum < 0) showNum = 0;
                  _this9.txt_equip_info.string = Local.Instance.get('reload') + "\n(" + showNum + "/" + _player.bulletBox + ")";
                }
              }
            }
          });
          return _this9;
        }

        return GrpEquipInfo;
      }(UICom));
      var GrpBag = exports('GrpBag', /*#__PURE__*/function (_UICom10) {
        _inheritsLoose(GrpBag, _UICom10);

        function GrpBag(node) {
          var _this10;

          _this10 = _UICom10.call(this, node) || this;
          _this10.list = void 0;
          _this10.img_highlight = void 0;
          _this10.img_highlight = UtilNode.getChildByName(_this10._node, 'img_highlight');
          if (_this10.img_highlight == undefined && _this10.img_highlight === null) throw new Error("" + _this10._node.name);
          var count = DataGameInst._data.count_bag_count;
          _this10.list = new Array(count);
          var itemRoot = UtilNode.getChildByName(_this10._node, 'items_root');
          _this10.img_highlight.active = false;

          for (var i = 0; i < itemRoot.children.length; i++) {
            _this10.list[i] = new GrpBagItem(itemRoot.children[i], i + 1);
          }

          Msg.on('msg_update_bag', function () {
            var _player = Level.Instance._player;
            if (!_player) return; // set equip info.

            var data = _player._data.items;
            var itemsName = _player._data.equipment_name_list;

            for (var _i = 0; _i < _this10.list.length; _i++) {
              var itemName = itemsName[_i];
              var itemObj = _this10.list[_i];
              var hasItem = itemName.length > 0;
              itemObj.setDisplay(hasItem);

              if (hasItem) {
                var item = data[itemName];
                itemObj.setInfo(item);
              }
            }

            Msg.emit('msg_grp_bag', 255);
          });
          Msg.on('msg_change_equip', function () {
            var _player = Level.Instance._player;
            if (!_player) return;
            var current_equipment_index = _player._data.current_equipment_index;
            var hasHighLight = current_equipment_index !== -1;
            _this10.img_highlight.active = hasHighLight;

            if (hasHighLight) {
              var highPos = _this10.list[current_equipment_index]._node.position;

              _this10.img_highlight.setPosition(highPos.x, highPos.y, highPos.z);
            }

            Msg.emit('msg_grp_bag', 255);
          });
          return _this10;
        }

        return GrpBag;
      }(UICom));

      var GrpBagItem = /*#__PURE__*/function () {
        function GrpBagItem(node, index) {
          this.txt_nun = void 0;
          this.img_icon = void 0;
          this._node = void 0;
          this.index = void 0;
          this._node = node;
          this.index = index;
          this.txt_nun = UtilNode.getChildComponent(this._node, 'txt_num', Label);
          this.txt_nun.string = "" + this.index;
          this.img_icon = UtilNode.getChildComponent(this._node, 'img_icon', Sprite);
          this.setDisplay(false);
        }

        var _proto9 = GrpBagItem.prototype;

        _proto9.setDisplay = function setDisplay(isShow) {
          this.img_icon.node.active = isShow;
        };

        _proto9.setInfo = function setInfo(item) {
          this.img_icon.spriteFrame = ResCache.Instance.getSprite("img_icon_" + item.name);
        };

        return GrpBagItem;
      }();

      var GrpPickedTips = exports('GrpPickedTips', /*#__PURE__*/function (_UICom11) {
        _inheritsLoose(GrpPickedTips, _UICom11);

        function GrpPickedTips(node) {
          var _this11;

          _this11 = _UICom11.call(this, node) || this; // Init deep default 10.

          _this11.list = void 0;
          _this11.msgs = void 0;
          _this11.index = 0;
          var count = DataGameInst._data.count_picked_info;
          _this11.list = new Array(count);
          _this11.msgs = new Queue(count);
          var item = _this11._node.children[0];

          for (var i = 0; i < count; i++) {
            var newItem = Res.instNode(item, _this11._node);
            _this11.list[i] = new GrpPickedTipsItem(newItem);
          }

          item.active = false;
          Msg.on('msg_tips', function (msg) {
            _this11._node.children[0].setSiblingIndex(count);

            _this11.list[_this11.index].refresh(msg);

            _this11.index++;
            if (_this11.index >= count) _this11.index = 0;
          });
          return _this11;
        }

        return GrpPickedTips;
      }(UICom));
      var GrpMap = exports('GrpMap', /*#__PURE__*/function (_UICom12) {
        _inheritsLoose(GrpMap, _UICom12);

        function GrpMap(node) {
          var _this12;

          _this12 = _UICom12.call(this, node) || this;
          _this12.list = void 0;
          _this12.map = void 0;
          _this12.map = UtilNode.find(_this12._node, 'map');
          var img_enemy_point = UtilNode.find(_this12._node, 'img_enemy_point');
          var count = 20;
          _this12.list = new Array(count);
          _this12.list[0] = img_enemy_point;

          for (var i = 1; i < count; i++) {
            var newPoint = Res.instNode(img_enemy_point, img_enemy_point.parent, v3(10000, 0, 0));
            _this12.list[i] = newPoint;
          }

          var position = v3(0, 0, 0);
          var map_width = 1158;
          var map_height = 1172;
          var world_map_width = 110;
          var world_map_height = 110;
          var scale_x = map_width / world_map_width;
          var scale_y = map_height / world_map_height;
          Msg.on('msg_update_map', function () {
            var player = Level.Instance._player;

            if (player !== undefined && player.node) {
              UtilVec3.copy(position, player.node.position);
              var y = position.x * scale_x;
              var x = position.z * scale_y;
              position.z = 0;
              position.x = -x;
              position.y = -y;

              _this12.map.setPosition(position);
            }

            var enemies = Level.Instance._enemies;
            var enemyCount = enemies.length;

            for (var _i2 = 0; _i2 < count; _i2++) {
              var hasEnemy = _i2 < enemyCount;
              var currentNode = _this12.list[_i2];

              if (!hasEnemy) {
                currentNode.setPosition(10000, 0, 0);
                continue;
              }

              UtilVec3.copy(position, enemies[_i2].position);

              var _y = position.x * scale_x;

              var _x = position.z * scale_y;

              position.z = 0;
              position.x = _x;
              position.y = _y;

              _this12.list[_i2].setPosition(position.x, position.y, position.z);
            }
          });
          return _this12;
        }

        return GrpMap;
      }(UICom));

      var GrpPickedTipsItem = /*#__PURE__*/function () {
        function GrpPickedTipsItem(node) {
          this.txt_info = void 0;
          this._node = void 0;
          this._node = node;
          this.txt_info = UtilNode.getChildComponent(this._node, 'txt_info', Label);
          this.setDisplay(false);
        }

        var _proto10 = GrpPickedTipsItem.prototype;

        _proto10.refresh = function refresh(msg) {
          this.txt_info.string = msg;
          this.setDisplay(true);
        };

        _proto10.setDisplay = function setDisplay(isShow) {
          this._node.active = isShow;
        };

        return GrpPickedTipsItem;
      }();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-display-by-state-auto-hidden.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ui-display-by-state.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, UIDisplayByState;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      UIDisplayByState = module.UIDisplayByState;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "88beeDVUAVBrpfti4Hsxq59", "ui-display-by-state-auto-hidden", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIDisplayByStateAutoHidden = exports('UIDisplayByStateAutoHidden', (_dec = ccclass('UIDisplayByStateAutoHidden'), _dec(_class = (_class2 = /*#__PURE__*/function (_UIDisplayByState) {
        _inheritsLoose(UIDisplayByStateAutoHidden, _UIDisplayByState);

        function UIDisplayByStateAutoHidden() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _UIDisplayByState.call.apply(_UIDisplayByState, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "hiddenTime", _descriptor, _assertThisInitialized(_this));

          _this._hiddenTime = 5;
          return _this;
        }

        var _proto = UIDisplayByStateAutoHidden.prototype;

        _proto.onChangeState = function onChangeState(value) {
          _UIDisplayByState.prototype.onChangeState.call(this, value);

          this._hiddenTime = this.hiddenTime;
        };

        _proto.update = function update(deltaTime) {
          _UIDisplayByState.prototype.update.call(this, deltaTime);

          if (this._hiddenTime < 0) return;
          this._hiddenTime -= deltaTime;

          if (this._hiddenTime < 0) {
            this._color_a = 0;
          }
        };

        return UIDisplayByStateAutoHidden;
      }(UIDisplayByState), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "hiddenTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-display-by-state.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCFloat, Color, SpriteComponent, math, Component, Msg;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCFloat = module.CCFloat;
      Color = module.Color;
      SpriteComponent = module.SpriteComponent;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "bae6dR6zoNN3ozfjxYC0AV0", "ui-display-by-state", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIDisplayByState = exports('UIDisplayByState', (_dec = ccclass('UIDisplayByState'), _dec2 = property(CCFloat), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIDisplayByState, _Component);

        function UIDisplayByState() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._color_a = 0;
          _this._color = new Color(0, 0, 0, 0);

          _initializerDefineProperty(_this, "smooth", _descriptor, _assertThisInitialized(_this));

          _this._sprite = void 0;
          return _this;
        }

        var _proto = UIDisplayByState.prototype;

        _proto.start = function start() {
          this._sprite = this.getComponent(SpriteComponent);
          Msg.bind("msg_" + this.node.name, this.onChangeState, this);
        };

        _proto.onDestroy = function onDestroy() {
          Msg.off("msg_" + this.node.name, this.onChangeState);
        };

        _proto.onChangeState = function onChangeState(value) {
          this._color_a = value;
        };

        _proto.update = function update(deltaTime) {
          this._color.a = math.lerp(this._color.a, this._color_a, deltaTime * this.smooth);
          this._sprite.color = this._color;
        };

        return UIDisplayByState;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "smooth", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5.0;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-enable-play-anim.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, animation, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      animation = module.animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "32365YaXqJA2JXwB0O6kMAm", "ui-enable-play-anim", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIEnablePlayAnimation = exports('UIEnablePlayAnimation', (_dec = ccclass('UIEnablePlayAnimation'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIEnablePlayAnimation, _Component);

        function UIEnablePlayAnimation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._animationGraph = void 0;
          return _this;
        }

        var _proto = UIEnablePlayAnimation.prototype;

        _proto.onEnable = function onEnable() {
          var _this$_animationGraph;

          if (!this._animationGraph) {
            this._animationGraph = this.getComponent(animation.AnimationController);
          }

          (_this$_animationGraph = this._animationGraph) == null ? void 0 : _this$_animationGraph.setValue('trigger_replay', true);
        };

        return UIEnablePlayAnimation;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-enable-play-animation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "eaa4558aLdN1oUip5tLSnpH", "ui-enable-play-animation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIEnablePlayAnimation = exports('UIEnablePlayAnimation', (_dec = ccclass('UIEnablePlayAnimation'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIEnablePlayAnimation, _Component);

        function UIEnablePlayAnimation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._anim = void 0;
          return _this;
        }

        var _proto = UIEnablePlayAnimation.prototype;

        _proto.onEnable = function onEnable() {
          var _this$_anim, _this$_anim2;

          if (!this._anim) {
            this._anim = this.getComponent(Animation);
          }

          (_this$_anim = this._anim) == null ? void 0 : _this$_anim.stop();
          (_this$_anim2 = this._anim) == null ? void 0 : _this$_anim2.play();
        };

        return UIEnablePlayAnimation;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-enable-play.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fun.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, SpriteComponent, Color, Button, Component, fun;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      SpriteComponent = module.SpriteComponent;
      Color = module.Color;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      fun = module.fun;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "afa4eXY8ZVEh7JzvyiB3Q5L", "ui-enable-play", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIEnablePlay = exports('UIEnablePlay', (_dec = ccclass('UIEnablePlay'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIEnablePlay, _Component);

        function UIEnablePlay() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "speed", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "delay_time", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "enable_opacity", _descriptor3, _assertThisInitialized(_this));

          _this.animation = void 0;
          _this.btn = void 0;
          return _this;
        }

        var _proto = UIEnablePlay.prototype;

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          if (this.animation === undefined) this.animation = this.getComponent(Animation);
          this.animation.stop();
          if (this.enable_opacity) this.node.getComponent(SpriteComponent).color = new Color(1, 1, 1, 0);
          if (this.btn === undefined) this.btn = this.getComponent(Button);
          if (this.btn) this.btn.enabled = false;
          fun.delay(function () {
            var _this2$animation;

            if (_this2.animation && (_this2$animation = _this2.animation) != null && _this2$animation.defaultClip) {
              _this2.animation.defaultClip.speed = _this2.speed;

              _this2.animation.stop();

              _this2.animation.play();
            }
          }, this.delay_time);
          fun.delay(function () {
            if (_this2.btn) _this2.btn.enabled = true;
          }, 2);
        };

        return UIEnablePlay;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "delay_time", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "enable_opacity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-fadein.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Color, SpriteComponent, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      SpriteComponent = module.SpriteComponent;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "2b34ac+NWpHqYriJPd3WqwM", "ui-fadein", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIFadeIn = exports('UIFadeIn', (_dec = ccclass('UIFadeIn'), _dec2 = property(Color), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIFadeIn, _Component);

        function UIFadeIn() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "time", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "startColor", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "endColor", _descriptor3, _assertThisInitialized(_this));

          _this._sprite = Object.create(null);
          return _this;
        }

        var _proto = UIFadeIn.prototype;

        _proto.onEnable = function onEnable() {
          this.tweenUpdateColor();
        };

        _proto.tweenUpdateColor = function tweenUpdateColor() {
          if (this._sprite === null) this._sprite = this.getComponent(SpriteComponent);
          var bindTarget = new BindTarget();
          this._sprite.color = this.startColor;
          tween(bindTarget).by(this.time, {
            color: this.endColor
          }, {
            onUpdate: function onUpdate(target) {
              this._sprite.color = target;
            }
          }).start();
        };

        _proto.update = function update(deltaTime) {};

        return UIFadeIn;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "time", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "startColor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "endColor", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      })), _class2)) || _class));

      var BindTarget = function BindTarget() {
        this.color = void 0;
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-fx.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, Msg;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6223eY6BH5Hro5ZLuCoJkOw", "ui-fx", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIFx = exports('UIFx', (_dec = ccclass('UIFx'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIFx, _Component);

        function UIFx() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.map = {};
          return _this;
        }

        var _proto = UIFx.prototype;

        _proto.start = function start() {
          for (var i = 0; i < this.node.children.length; i++) {
            var child = this.node.children[i];
            this.map[child.name] = child;
          }

          Msg.on('msg_ui_fx_open', this.open.bind(this));
          Msg.on('msg_ui_fx_close', this.close.bind(this));
        };

        _proto.open = function open(name) {
          var effect = this.map[name];
          if (effect !== undefined) effect.active = true;
        };

        _proto.close = function close(name) {
          var effect = this.map[name];
          if (effect !== undefined) effect.active = false;
        };

        return UIFx;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-grp-picked-tips.ts", ['cc'], function () {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      // import { _decorator, Node, Label, game } from 'cc';
      cclegacy._RF.push({}, "c341f1ZYuZHII2xh06oeTtu", "ui-grp-picked-tips", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-guide-platform.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Sprite, sys, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      sys = module.sys;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "afcf2Ysp4tC4bctyRG1y23d", "ui-guide-platform", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIGuidePlatform = exports('UIGuidePlatform', (_dec = ccclass('UIGuidePlatform'), _dec2 = property({
        type: [SpriteFrame]
      }), _dec3 = property({
        type: Sprite
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIGuidePlatform, _Component);

        function UIGuidePlatform() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "guideSprites", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprite", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UIGuidePlatform.prototype;

        _proto.start = function start() {
          if (sys.platform === sys.Platform.MOBILE_BROWSER || sys.platform === sys.Platform.ANDROID || sys.platform === sys.Platform.IOS) {
            this.sprite.spriteFrame = this.guideSprites[1];
          } else {
            this.sprite.spriteFrame = this.guideSprites[0];
          }
        };

        return UIGuidePlatform;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "guideSprites", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sprite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-loading.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './msg.ts', './game.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, math, Component, Msg, Game;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      Game = module.Game;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "ece98FSjSJAsp9adTbaY7eK", "ui-loading", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UILoading = exports('UILoading', (_dec = ccclass('UILoading'), _dec2 = property(Label), _dec3 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UILoading, _Component);

        function UILoading() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "txtLoading", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "img_loading_bar", _descriptor2, _assertThisInitialized(_this));

          _this._percent = 0;
          _this._realPercent = 0;
          _this.waitList = {};
          _this.viewNode = void 0;
          _this.count = 0;
          _this.wait_count = 0;
          _this.current_msg = '';
          _this.isLoading = false;
          return _this;
        }

        var _proto = UILoading.prototype;

        _proto.start = function start() {
          Msg.on('msg_loading', this.onWaitList.bind(this));
          this.viewNode = this.node.children[0];
        };

        _proto.onWaitList = function onWaitList(data) {
          this.waitList[data.id] = data;
          this.isLoading = true;
          this.viewNode.active = true;
          this._percent = 0;
        };

        _proto.update = function update(deltaTime) {
          if (!this.isLoading) return;
          this.calculateLoading();
          this._percent = math.lerp(this._percent, this._realPercent, deltaTime);
          this.txtLoading.string = this.current_msg;
          this.img_loading_bar.fillRange = this._percent;

          if (this._percent >= 0.9999) {
            this.onLoadFinished();
          }
        };

        _proto.onLoadFinished = function onLoadFinished() {
          this.isLoading = false;
          this.viewNode.active = false; // If current is menu replay animation.

          if (Game.Instance._currentGameNodeName === 'menu') Msg.emit('msg_play_animation');
        };

        _proto.calculateLoading = function calculateLoading() {
          this.count = 0;
          this.wait_count = 0; //this.current_msg = '';

          for (var k in this.waitList) {
            var waitMsg = this.waitList[k];
            this.count += waitMsg.count;
            this.wait_count += waitMsg.wait_count;
            /*
            if (this.wait_count > 0) {
                this.current_msg = `${waitMsg.action} ${waitMsg.current}`;
            }
            */
          }

          this._realPercent = (this.count - this.wait_count) / this.count;
        };

        return UILoading;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtLoading", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "img_loading_bar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-move-show.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Color, input, Input, SpriteComponent, Button, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      input = module.input;
      Input = module.Input;
      SpriteComponent = module.SpriteComponent;
      Button = module.Button;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "d9580+5+wlJj7S9RtWzYGa4", "ui-move-show", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIMoveShow = exports('UIMoveShow', (_dec = ccclass('UIMoveShow'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIMoveShow, _Component);

        function UIMoveShow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "hiddenTime", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "showSpeed", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hiddenSpeed", _descriptor3, _assertThisInitialized(_this));

          _this._curTime = 0;
          _this._sprite = void 0;
          _this._color = new Color(255, 255, 255, 0);
          _this._a = 0;
          _this._btn = void 0;
          return _this;
        }

        var _proto = UIMoveShow.prototype;

        _proto.start = function start() {
          input.on(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
          input.on(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
          this._sprite = this.getComponent(SpriteComponent);
          this._sprite.color = this._color;
          this._curTime = this.hiddenTime;
          this._btn = this.getComponent(Button);
        };

        _proto.onDestroy = function onDestroy() {
          input.off(Input.EventType.MOUSE_MOVE, this.onMouseMove, this);
          input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
        };

        _proto.onMouseMove = function onMouseMove(event) {
          this._curTime = 0;
        };

        _proto.onTouchMove = function onTouchMove(event) {
          this._curTime = 0;
        };

        _proto.update = function update(deltaTime) {
          this._curTime += deltaTime;

          if (this._curTime > this.hiddenTime) {
            if (this._color.a > 0) {
              var delta = deltaTime * this.hiddenSpeed;
              this._color.a -= delta;
              this._sprite.color = this._color.clone();
              this._btn.enabled = false;
            }
          } else {
            if (this._color.a < 255) {
              var delta = deltaTime * this.showSpeed;
              this._color.a += delta;
              this._sprite.color = this._color.clone();
              this._btn.enabled = true;
            }
          }
        };

        return UIMoveShow;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "hiddenTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "showSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "hiddenSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-roller.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, Component, UtilVec3;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      UtilVec3 = module.UtilVec3;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "4b419FOYZtB3aVthaUrBynt", "ui-roller", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ui_roller = exports('ui_roller', (_dec = ccclass('ui_roller'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ui_roller, _Component);

        function ui_roller() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._orignal = void 0;

          _initializerDefineProperty(_this, "final", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "speed", _descriptor2, _assertThisInitialized(_this));

          _this._pos = v3(0, 0, 0);
          return _this;
        }

        var _proto = ui_roller.prototype;

        _proto.start = function start() {};

        _proto.onEnable = function onEnable() {
          if (this._orignal === undefined) {
            this._orignal = this.node.position.clone();
          }

          this.node.setPosition(this._orignal.x, this._orignal.y, this._orignal.z);
          UtilVec3.copy(this._pos, this._orignal);
        };

        _proto.update = function update(deltaTime) {
          if (this._pos.y < this["final"].y) {
            this._pos.y += deltaTime * this.speed;
            this.node.setPosition(this._pos.x, this._pos.y, this._pos.z);
          }
        };

        return ui_roller;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "final", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui-svc-reset-pos.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './fun.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Layout, Component, fun;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Layout = module.Layout;
      Component = module.Component;
    }, function (module) {
      fun = module.fun;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "b37d0R9lelPkovonSTkJ/wx", "ui-svc-reset-pos", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UIScrollViewResetPos = exports('UIScrollViewResetPos', (_dec = ccclass('UIScrollViewResetPos'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UIScrollViewResetPos, _Component);

        function UIScrollViewResetPos() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "delay", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = UIScrollViewResetPos.prototype;

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          fun.delay(function () {
            //var reset_pos = this.node.position.y;
            //this.node.setPosition(0, reset_pos, 0);
            var layout = _this2.node.getComponent(Layout);

            layout.enabled = false;
            layout.enabled = true;
          }, this.delay);
        };

        return UIScrollViewResetPos;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "delay", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ui.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './singleton.ts', './log.ts', './ui-base.ts', './res.ts', './msg.ts', './util.ts', './data-core.ts', './res-cache.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, find, director, Camera, Singleton, Log, UIBase, Res, Msg, UtilNode, DataGameInst, ResCache;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      find = module.find;
      director = module.director;
      Camera = module.Camera;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      Log = module.Log;
    }, function (module) {
      UIBase = module.UIBase;
    }, function (module) {
      Res = module.Res;
    }, function (module) {
      Msg = module.Msg;
    }, function (module) {
      UtilNode = module.UtilNode;
    }, function (module) {
      DataGameInst = module.DataGameInst;
    }, function (module) {
      ResCache = module.ResCache;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d43b4aUQulCsZMavo7g1FoR", "ui", undefined);

      var UI = exports('UI', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(UI, _Singleton);

        function UI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this._map = {};
          _this.node = void 0;
          _this.panelRoot = void 0;
          _this.camera = void 0;
          return _this;
        }

        var _proto = UI.prototype;

        _proto.init = function init() {
          var _this$node, _this$node$getChildBy;

          this.node = find('init/canvas');
          this.panelRoot = UtilNode.getChildByName(this.node, 'panels');

          if (this.node === undefined || this.node == null) {
            throw new Error("can not find canvas ui root.");
          }

          director.addPersistRootNode(this.node);
          Msg.on('refresh_ui', this.refresh.bind(this));
          var cacheList = ['ui_level', 'ui_level_end', 'ui_logo', 'ui_menu', 'ui_select_equips', 'ui_settings'];

          for (var i = 0; i < cacheList.length; i++) {
            this.load(cacheList[i]);
          }

          this.camera = (_this$node = this.node) == null ? void 0 : (_this$node$getChildBy = _this$node.getChildByName('Camera')) == null ? void 0 : _this$node$getChildBy.getComponent(Camera);
        };

        _proto.refresh = function refresh() {
          for (var key in this._map) {
            this._map[key].refresh();
          }
        };

        _proto.load = function load(name) {
          var asset = ResCache.Instance.getPrefab(name);

          if (asset) {
            var panel = Res.inst(asset, UI.Instance.panelRoot);
            var order = DataGameInst._data.ui_order[name];
            panel.setPosition(0, 0, order);
            var set = false;
            var count = UI.Instance.panelRoot.children.length;

            for (var i = 1; i < count; i++) {
              var child = this.panelRoot.children[i];

              if (child.position.z > order) {
                var ui_order = i;
                panel.setSiblingIndex(ui_order);
                set = true;
                break;
              }
            }

            if (!set) panel.setSiblingIndex(count);
            var uiBase = new UIBase(panel);
            uiBase.on();
            this._map[name] = uiBase;
            uiBase.off(); //fun.delay(() => { uiBase.off() }, 0.2);
          } else {
            Log.warn('Can not load res : ' + name);
          }
        };

        _proto.on = function on(name) {
          var _this2 = this;

          var load = /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
              var panel;
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    panel = _this2._map[name];

                    if (panel) {
                      panel.on();
                    } else {
                      Res.loadPrefab('ui/' + name, function (err, asset) {
                        if (asset) {
                          var _panel = Res.inst(asset, UI.Instance.panelRoot);

                          var order = DataGameInst._data.ui_order[name];

                          _panel.setPosition(0, 0, order);

                          var set = false;
                          var count = UI.Instance.panelRoot.children.length;

                          for (var i = 1; i < count; i++) {
                            var child = _this2.panelRoot.children[i];

                            if (child.position.z > order) {
                              var ui_order = i;

                              _panel.setSiblingIndex(ui_order);

                              set = true;
                              break;
                            }
                          }

                          if (!set) _panel.setSiblingIndex(count);
                          var uiBase = new UIBase(_panel);
                          uiBase.on();
                          _this2._map[name] = uiBase;
                        } else {
                          Log.warn('Can not load res : ' + name);
                        }
                      });
                    }

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }, _callee);
            }));

            return function load() {
              return _ref.apply(this, arguments);
            };
          }();

          load();
        };

        _proto.off = function off(name) {
          var panel = this._map[name];

          if (panel) {
            panel.off();
          } else {
            Log.warn('You want off a ui object that does not exist : ' + name);
          }
        };

        _proto.destroy = function destroy(name) {
          var panel = this._map[name];

          if (panel) {
            panel.destroy();
            this._map[name] = undefined;
          } else {
            Log.warn('You want destroy a ui object that does not exist. - ' + name);
          }
        };

        return UI;
      }(Singleton));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/util.ts", ['cc', './camera-setting.ts'], function (exports) {
  'use strict';

  var cclegacy, _decorator, Quat, v3, randomRangeInt, MeshRenderer, director, Color, geometry, CameraSetting;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Quat = module.Quat;
      v3 = module.v3;
      randomRangeInt = module.randomRangeInt;
      MeshRenderer = module.MeshRenderer;
      director = module.director;
      Color = module.Color;
      geometry = module.geometry;
    }, function (module) {
      CameraSetting = module.CameraSetting;
    }],
    execute: function () {
      exports({
        Gizmo: void 0,
        waitFor: waitFor
      });

      cclegacy._RF.push({}, "95cd1rb+2NMubrAy5DIVXcl", "util", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Util = exports('Util', /*#__PURE__*/function () {
        function Util() {}

        Util.deltaLimit = function deltaLimit(value, delta, speed, min, max) {
          value += delta * speed;
          if (value < min) value = min;
          if (value > max) value = max;
          return value;
        };

        Util.calculateMaxBounders = function calculateMaxBounders(renders) {
          var max_x = 0;
          var max_y = 0;
          var max = 0;

          for (var i = 0; i < renders.length; i++) {
            if (!renders[i].node.active) continue;
            var x = renders[i].model.worldBounds.halfExtents.x * renders[i].node.scale.x;

            if (x > max_x) {
              max_x = x;
            }

            var y = renders[i].model.worldBounds.halfExtents.y * renders[i].node.scale.y;

            if (y > max_y) {
              max_y = y;
            }
          }

          max = max_x > max_y ? max_x : max_y;
          return {
            x: max_x,
            y: max_y,
            max: max
          };
        };

        Util.calculateMask = function calculateMask(masks) {
          var mask = 0;

          for (var i = 0; i < masks.length; i++) mask = mask | 1 << masks[i];

          return mask;
        };

        return Util;
      }());
      var UtilStr = exports('UtilStr', /*#__PURE__*/function () {
        function UtilStr() {}

        UtilStr.equal = function equal(str, items) {
          var count = items.length;

          for (var i = 0; i < count; i++) {
            var t = items[i];

            if (str === t) {
              return true;
            }
          }

          return false;
        };

        UtilStr.include = function include(str, items) {
          var count = items.length;

          for (var i = 0; i < count; i++) {
            var t = items[i];

            if (str.includes(t)) {
              return true;
            }
          }

          return false;
        };

        UtilStr.selectFromItems = function selectFromItems(items, len) {
          if (len === void 0) {
            len = -1;
          }

          var count = len === -1 ? items.length : len;
          var idx = randomRangeInt(0, count);
          return items[idx];
        };

        return UtilStr;
      }());
      var UtilMaterial = exports('UtilMaterial', /*#__PURE__*/function () {
        function UtilMaterial() {}

        UtilMaterial.setColor = function setColor(node, color) {
          var _meshRender$material;

          var meshRender = node.getComponent(MeshRenderer);
          meshRender == null ? void 0 : (_meshRender$material = meshRender.material) == null ? void 0 : _meshRender$material.setProperty('mainColor', color);
        };

        return UtilMaterial;
      }());
      var UtilVec3 = exports('UtilVec3', /*#__PURE__*/function () {
        function UtilVec3() {}

        UtilVec3.deltaLimit = function deltaLimit(vec, delta, speed, min, max) {
          vec.x = Util.deltaLimit(vec.x, delta.x, speed, min.x, max.y);
          vec.y = Util.deltaLimit(vec.y, delta.y, speed, min.y, max.y);
          vec.z = Util.deltaLimit(vec.z, delta.z, speed, min.z, max.z);
        };

        UtilVec3.copy = function copy(a, b) {
          a.x = b.x;
          a.y = b.y;
          a.z = b.z;
        };

        UtilVec3.scaleDirection = function scaleDirection(a, direction, scale) {
          a.x += direction.x * scale;
          a.y += direction.y * scale;
          a.z += direction.z * scale;
        };

        UtilVec3.clampMagnitude = function clampMagnitude(target, length) {
          if (target.length() > length) {
            target.normalize().multiplyScalar(length);
          }
        };

        return UtilVec3;
      }());
      var UtilVec2 = exports('UtilVec2', /*#__PURE__*/function () {
        function UtilVec2() {}

        UtilVec2.deltaLimit = function deltaLimit(vec, delta, speed, min, max) {
          vec.x = Util.deltaLimit(vec.x, delta.x, speed, min.x, max.y);
          vec.y = Util.deltaLimit(vec.y, delta.y, speed, min.y, max.y);
        };

        UtilVec2.c = function c(a, b) {
          a.x = b.x;
          a.y = b.y;
        };

        return UtilVec2;
      }());
      var UtilArray = exports('UtilArray', /*#__PURE__*/function () {
        function UtilArray() {}

        UtilArray.remove = function remove(array, key) {
          var index = array.indexOf(key, 0);

          if (index !== -1) {
            array.splice(index, 0);
          }
        };

        UtilArray.init = function init(len, value) {
          if (value === void 0) {
            value = 0;
          }

          var a = [];

          for (var i = 0; i < len; i++) a.push(value);

          return a;
        };

        UtilArray.init_3 = function init_3(a0, a1, a2) {
          var array = [];

          for (var i = 0; i < a0; i++) {
            var ai = [];

            for (var j = 0; j < a1; j++) {
              var aj = [];

              for (var k = 0; k < a2; k++) {
                aj.push(0);
              }

              ai.push(aj);
            }

            array.push(ai);
          }

          return array;
        };

        UtilArray.reset_3 = function reset_3(a, value) {
          if (value === void 0) {
            value = 0;
          }

          var a0 = a.length;
          var a1 = a[0].length;
          var a2 = a[0][0].length;

          for (var i = 0; i < a0; i++) {
            for (var j = 0; j < a1; j++) {
              for (var k = 0; k < a2; k++) {
                a[i][j][k] = value;
              }
            }
          }
        };

        UtilArray.addArray = function addArray(a, b) {
          for (var i = 0; i < b.length; i++) {
            a.push(b[i]);
          }
        };

        return UtilArray;
      }());
      var UtilNode = exports('UtilNode', /*#__PURE__*/function () {
        function UtilNode() {}

        UtilNode.getChildByName = function getChildByName(node, name) {
          var child = node.getChildByName(name);
          if (child === null) throw new Error(node.name + " node children not find '" + name + "'");
          return child;
        };

        UtilNode.getComponent = function getComponent(node, type) {
          var component = node.getComponent(type);
          if (component === null) throw new Error(node.name + " node not find '" + name + "'");
          return component;
        };

        UtilNode.getChildComponent = function getChildComponent(node, name, type) {
          var child = this.getChildByName(node, name);
          return this.getComponent(child, type);
        };

        UtilNode.getChildren = function getChildren(node) {
          var ls = [];

          var find = function find(node) {
            ls.push(node);
            node.children.forEach(function (element) {
              if (element.children) {
                find(element);
              }
            });
          };

          find(node);
          return ls;
        };

        UtilNode.find = function find(node, name) {
          var n = Object.create(null);

          var find = function find(node, name) {
            if (node.name === name) {
              n = node;
              return;
            }

            node.children.forEach(function (element) {
              if (element.children) {
                find(element, name);
              }
            });
          };

          find(node, name);
          return n;
        };

        UtilNode.getChildrenByNameBlur = function getChildrenByNameBlur(node, blurName) {
          var map = {};

          var find = function find(node) {
            if (node.name.concat(blurName)) {
              map[node.name] = node;
            }

            map[node.name] = node;
            node.children.forEach(function (element) {
              if (element.children) {
                find(element);
              }
            });
          };

          find(node);
          return map;
        };

        UtilNode.getParentComponent = function getParentComponent(node, type) {
          if (node === null) {
            return undefined;
          }

          var component = node == null ? void 0 : node.getComponent(type);
          if (component !== null) return component;
          return this.getParentComponent(node.parent, type);
        };

        UtilNode.getWorldEulerAngles = function getWorldEulerAngles(node) {
          node.getWorldRotation(this._worldRotation);

          this._worldRotation.getEulerAngles(this._angle);

          return this._angle;
        };

        return UtilNode;
      }());
      UtilNode._worldRotation = new Quat();
      UtilNode._angle = v3(0, 0, 0);
      var UtilLog = exports('UtilLog', /*#__PURE__*/function () {
        function UtilLog() {}

        UtilLog.children = function children(node) {
          var info = node.name + ":" + node.children.length + ":";
          node.children.forEach(function (n) {
            info += n.name + ",";
          });
          console.log(info);
        };

        return UtilLog;
      }());

      function waitFor(duration) {
        return new Promise(function (resolve) {
          setTimeout(function () {
            resolve();
          }, duration * 1000.0);
        });
      }

      var UtilCurve = exports('UtilCurve', /*#__PURE__*/function () {
        function UtilCurve() {}

        UtilCurve.Bezier = function Bezier(points, t) {
          var len = points.length / 3;
        };

        UtilCurve.ParaCurve = function ParaCurve(s, x, y, z, vx, vy, vz, g, segment) {
          var points = []; // Calculate total time.

          var totalTime = Math.sqrt(2 * s / g);
          var cell_time = totalTime / segment; // x = vx * t
          // z = vz * t
          // y = 1/2 * g * t * t.
          // g = 0.98.

          var cur_time = 0;

          for (var i = 0; i <= segment; i++) {
            var xi = vx * cur_time + x;
            var zi = vz * cur_time + z;
            var yi = vy * cur_time - 1 / 2 * g * cur_time * cur_time + y;
            points.push(xi);
            points.push(yi);
            points.push(zi);
            cur_time += cell_time;
          }

          return points;
        };

        UtilCurve.ParaCurveByDir = function ParaCurveByDir(s, x, y, z, vx, vy, vz, g, dx, dy, dz, segment) {
          var points = []; // Calculate total time.

          var totalTime = Math.sqrt(2 * s / g);
          var cell_time = totalTime / segment; // x = vx * t
          // z = vz * t
          // y = 1/2 * g * t * t.
          // g = 0.98.

          var cur_time = 0;

          for (var i = 0; i <= segment; i++) {
            var xi = vx * cur_time + x;
            var zi = vz * cur_time + z;
            var yi = vy * cur_time - 1 / 2 * g * cur_time * cur_time + y;
            points.push(xi * dx);
            points.push(yi * dy);
            points.push(zi * dz);
            cur_time += cell_time;
          }

          return points;
        };

        return UtilCurve;
      }());
      var UtilRandom = exports('UtilRandom', /*#__PURE__*/function () {
        function UtilRandom() {}

        UtilRandom.pos = function pos(rand, min, max, f) {
          if (f === void 0) {
            f = 1000;
          }

          var pos = v3(0, 0, 0);
          pos.x = rand.range(min.x, max.x) / f;
          pos.y = rand.range(min.y, max.y) / f;
          pos.z = rand.range(min.z, max.z) / f;
          return pos;
        };

        UtilRandom.angle = function angle(rand, min, max) {
          var angle = v3(0, 0, 0);
          angle.x = rand.range(min.x, max.x);
          angle.y = rand.range(min.y, max.y);
          angle.z = rand.range(min.z, max.z);
          return angle;
        };

        UtilRandom.scale = function scale(rand, min, max, f) {
          if (f === void 0) {
            f = 1000;
          }

          var scale = v3(0, 0, 0);
          scale.x = rand.range(min.x, max.x) / f;
          scale.y = rand.range(min.y, max.y) / f;
          scale.z = rand.range(min.z, max.z) / f;
          return scale;
        };

        return UtilRandom;
      }());
      var Gizmo;

      (function (_Gizmo) {
        function getGeometryRender() {
          var _director$root;

          var camera = CameraSetting.mainCamera && CameraSetting.mainCamera.camera;

          if (camera) {
            camera.initGeometryRenderer();
          }

          var geometryRenderer = camera && camera.geometryRenderer || ((_director$root = director.root) == null ? void 0 : _director$root.pipeline.geometryRenderer);
          return geometryRenderer;
        }

        _Gizmo.getGeometryRender = getGeometryRender;

        function drawLine(p0, p1, color) {
          if (color === void 0) {
            color = Color.GREEN;
          }

          var geometryRenderer = getGeometryRender();
          if (!geometryRenderer) return; //let geometryRenderer = director.root?.pipeline.geometryRenderer;

          geometryRenderer == null ? void 0 : geometryRenderer.addLine(p0, p1, color, undefined);
        }

        _Gizmo.drawLine = drawLine;

        function drawCircle(center, radius, color) {
          if (color === void 0) {
            color = Color.YELLOW;
          }

          var geometryRenderer = getGeometryRender();
          if (!geometryRenderer) return; //let geometryRenderer = director.root?.pipeline.geometryRenderer;

          geometryRenderer == null ? void 0 : geometryRenderer.addCircle(center, radius, color, 10, true, undefined, undefined);
        }

        _Gizmo.drawCircle = drawCircle;

        function drawBox(center, size, color) {
          if (color === void 0) {
            color = Color.BLUE;
          }

          var geometryRenderer = getGeometryRender();
          if (!geometryRenderer) return;
          var border = new geometry.AABB(center.x, center.y, center.z, size.x, size.y, size.z); //let geometryRenderer = director.root?.pipeline.geometryRenderer;

          geometryRenderer == null ? void 0 : geometryRenderer.addBoundingBox(border, color, true, false);
        }

        _Gizmo.drawBox = drawBox;
      })(Gizmo || (Gizmo = exports('Gizmo', {})));

      var UtilTime = exports('UtilTime', /*#__PURE__*/function () {
        function UtilTime() {}

        UtilTime.toHours = function toHours(seconds) {
          return Math.ceil(seconds / 3600);
        };

        UtilTime.yearMonth = function yearMonth() {
          var date = new Date();
          var y = date.getFullYear().toString();
          var m = date.getMonth().toString();
          if (m.length < 2) m = "0" + m;
          var d = date.getDate().toString();
          if (d.length < 2) d = "0" + d;
          var h = date.getHours().toString();
          return y + "." + m + "." + d + ":" + h;
        };

        UtilTime.timeStamp = function timeStamp() {
          return Date.parse(new Date().toString());
        };

        return UtilTime;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/utils.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, director, gfx;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      gfx = module.gfx;
    }],
    execute: function () {
      exports('packCubemapAtlas', packCubemapAtlas);

      cclegacy._RF.push({}, "68af6kyIXBF/aMlp33lZRPZ", "utils", undefined);

      var FaceIndex;

      (function (FaceIndex) {
        FaceIndex[FaceIndex["right"] = 0] = "right";
        FaceIndex[FaceIndex["left"] = 1] = "left";
        FaceIndex[FaceIndex["top"] = 2] = "top";
        FaceIndex[FaceIndex["bottom"] = 3] = "bottom";
        FaceIndex[FaceIndex["front"] = 4] = "front";
        FaceIndex[FaceIndex["back"] = 5] = "back";
      })(FaceIndex || (FaceIndex = {}));

      var faces = ['right', 'left', 'top', 'bottom', 'front', 'back'];

      function packCubemapAtlas(cubemaps) {
        var device = director.root.device;
        var maxSize = Math.min(device.capabilities.maxTextureSize, 4096);
        var atlasWidth = 0;
        var atlasHeight = 0;
        var texImages = [];
        var regions = [];
        var minMipMapLevel = 8;

        for (var ci = 0; ci < cubemaps.length; ci++) {
          minMipMapLevel = Math.min(minMipMapLevel, cubemaps[ci].mipmapAtlas.layout.length);
        }

        var offsets = [];

        for (var mi = 0; mi < minMipMapLevel; mi++) {
          var offsetX = 0;
          var offsetY = 0;
          var maxHeight = 0;

          for (var _ci = 0; _ci < cubemaps.length; _ci++) {
            var cubemap = cubemaps[_ci];
            cubemap.mipmapAtlas.layout;
            var mipmap = cubemap.mipmaps[mi];
            var width = mipmap.front.width * 6;
            var height = mipmap.front.height;
            maxHeight = Math.max(height, maxHeight);

            if (offsetX + width > maxSize) {
              offsetY += maxHeight;
              offsetX = 0;
              maxHeight = 0;
            }

            offsets.push([offsetX, offsetY, width, height]);

            for (var fi = 0; fi < faces.length; fi++) {
              var img = mipmap[faces[fi]];
              texImages.push(img.data);
              regions.push(new gfx.BufferTextureCopy(undefined, undefined, img.height, new gfx.Offset(offsetX, offsetY), new gfx.Extent(img.width, img.height), new gfx.TextureSubresLayers(mi)));
              offsetX += img.width;
            }
          }

          if (mi === 0) {
            atlasWidth = offsetX;
            atlasHeight = offsetY + maxHeight;
          }
        }

        offsets.forEach(function (offset) {
          offset[0] = offset[0] / atlasWidth;
          offset[1] = offset[1] / atlasHeight;
          offset[2] = offset[2] / atlasWidth;
          offset[3] = offset[3] / atlasHeight;
        });
        var texture = device.createTexture(new gfx.TextureInfo(gfx.TextureType.TEX2D, gfx.TextureUsageBit.SAMPLED | gfx.TextureUsageBit.TRANSFER_DST, gfx.Format.RGBA8, atlasWidth, atlasHeight, gfx.TextureFlagBit.GEN_MIPMAP, undefined, minMipMapLevel));
        device.copyTexImagesToTexture(texImages, texture, regions); // breakIfGlError();

        return {
          texture: texture,
          cubemaps: cubemaps,
          offsets: offsets
        };
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/utils2.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, geometry, gfx, rendering, renderer, utils, Vec3, director;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      geometry = module.geometry;
      gfx = module.gfx;
      rendering = module.rendering;
      renderer = module.renderer;
      utils = module.utils;
      Vec3 = module.Vec3;
      director = module.director;
    }],
    execute: function () {
      exports({
        SRGBToLinear: SRGBToLinear,
        getCameraUniqueID: getCameraUniqueID,
        getLoadOpOfClearFlag: getLoadOpOfClearFlag,
        getQuadIA: getQuadIA,
        getQuadMesh: getQuadMesh,
        getRenderArea: getRenderArea,
        readPixels: readPixels,
        validPunctualLightsCulling: validPunctualLightsCulling
      });

      cclegacy._RF.push({}, "79840YqDEtOk56P7BIQNbwJ", "utils", undefined);

      var Sphere = geometry.Sphere,
          intersect = geometry.intersect;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var _renderer$scene = renderer.scene,
          ShadowType = _renderer$scene.ShadowType,
          LightType = _renderer$scene.LightType,
          SKYBOX_FLAG = _renderer$scene.SKYBOX_FLAG,
          CSMLevel = _renderer$scene.CSMLevel;
      var _quadMesh = null;

      function getQuadMesh() {
        if (!_quadMesh) {
          _quadMesh = utils.createMesh({
            positions: [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0],
            uvs: [0, 0, 0, 1, 1, 1, 1, 0],
            indices: [0, 2, 1, 0, 3, 2],
            minPos: new Vec3(-1, -1, 0),
            maxPos: new Vec3(1, 1, 0)
          });

          _quadMesh.initialize();
        }

        return _quadMesh;
      }

      var _quadIA = null;

      function getQuadIA() {
        if (!_quadIA) {
          var pipeline = director.root.pipeline;
          var device = pipeline.device;
          var mesh = getQuadMesh();
          _quadIA = device.createInputAssembler(mesh.renderingSubMeshes[0].iaInfo);
        }

        return _quadIA;
      }

      function readPixels(rt, buffer, index) {
        if (index === void 0) {
          index = 0;
        }

        var gfxTexture = rt.window.framebuffer.colorTextures[index];
        var bufferViews = [];
        var regions = [];
        var region0 = new gfx.BufferTextureCopy();
        region0.texOffset.x = 0;
        region0.texOffset.y = 0;
        region0.texExtent.width = rt.width;
        region0.texExtent.height = rt.height;
        regions.push(region0);
        bufferViews.push(buffer);
        director.root.device.copyTextureToBuffers(gfxTexture, bufferViews, regions);
      }

      var CameraInfo = exports('CameraInfo', function CameraInfo() {
        this.shadowEnabled = false;
        this.mainLightShadowNames = new Array();
        this.spotLightShadowNames = new Array();
      });
      var _cameras = [];

      function getCameraUniqueID(camera) {
        if (!_cameras.includes(camera)) {
          _cameras.push(camera);
        }

        return camera.name + '_' + _cameras.indexOf(camera);
      }

      function getRenderArea(out, camera, width, height, light, level) {
        if (light === void 0) {
          light = null;
        }

        if (level === void 0) {
          level = 0;
        }

        var vp = camera.viewport;
        var w = width;
        var h = height;
        out.x = vp.x * w;
        out.y = vp.y * h;
        out.width = vp.width * w;
        out.height = vp.height * h;

        if (light) {
          switch (light.type) {
            case LightType.DIRECTIONAL:
              {
                var mainLight = light;

                if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1) {
                  out.x = 0;
                  out.y = 0;
                  out.width = w;
                  out.height = h;
                } else {
                  out.x = level % 2 * 0.5 * w;
                  out.y = (1 - Math.floor(level / 2)) * 0.5 * h;
                  out.width = 0.5 * w;
                  out.height = 0.5 * h;
                }

                break;
              }

            case LightType.SPOT:
              {
                out.x = 0;
                out.y = 0;
                out.width = w;
                out.height = h;
                break;
              }
          }
        }

        out.width = Math.floor(out.width);
        out.height = Math.floor(out.height);
        return out;
      }

      function getLoadOpOfClearFlag(clearFlag, attachment) {
        var loadOp = LoadOp.CLEAR;

        if (!(clearFlag & ClearFlagBit.COLOR) && attachment === AttachmentType.RENDER_TARGET) {
          if (clearFlag & SKYBOX_FLAG) {
            loadOp = LoadOp.CLEAR;
          } else {
            loadOp = LoadOp.LOAD;
          }
        }

        if ((clearFlag & ClearFlagBit.DEPTH_STENCIL) !== ClearFlagBit.DEPTH_STENCIL && attachment === AttachmentType.DEPTH_STENCIL) {
          if (!(clearFlag & ClearFlagBit.DEPTH)) loadOp = LoadOp.LOAD;
          if (!(clearFlag & ClearFlagBit.STENCIL)) loadOp = LoadOp.LOAD;
        }

        return loadOp;
      }

      function validPunctualLightsCulling(pipeline, camera) {
        var sceneData = pipeline.pipelineSceneData;
        var validPunctualLights = sceneData.validPunctualLights;
        validPunctualLights.length = 0;

        var _sphere = Sphere.create(0, 0, 0, 1);

        var _ref = camera.scene,
            spotLights = _ref.spotLights;

        for (var i = 0; i < spotLights.length; i++) {
          var light = spotLights[i];

          if (light.baked) {
            continue;
          }

          Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);

          if (intersect.sphereFrustum(_sphere, camera.frustum)) {
            validPunctualLights.push(light);
          }
        }

        var _ref2 = camera.scene,
            sphereLights = _ref2.sphereLights;

        for (var _i = 0; _i < sphereLights.length; _i++) {
          var _light = sphereLights[_i];

          if (_light.baked) {
            continue;
          }

          Sphere.set(_sphere, _light.position.x, _light.position.y, _light.position.z, _light.range);

          if (intersect.sphereFrustum(_sphere, camera.frustum)) {
            validPunctualLights.push(_light);
          }
        }
      }

      function SRGBToLinear(out, gamma) {
        // out.x = Math.pow(gamma.x, 2.2);
        // out.y = Math.pow(gamma.y, 2.2);
        // out.z = Math.pow(gamma.z, 2.2);
        out.x = gamma.x * gamma.x;
        out.y = gamma.y * gamma.y;
        out.z = gamma.z * gamma.z;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/utils3.ts", ['cc', './halton.ts', './pool.ts'], function (exports) {
  'use strict';

  var cclegacy, Vec3, gfx, HaltonUtils, Pool;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      gfx = module.gfx;
    }, function (module) {
      HaltonUtils = module.HaltonUtils;
    }, function (module) {
      Pool = module.Pool;
    }],
    execute: function () {
      exports({
        modelPoints: modelPoints,
        sphereDirections: sphereDirections
      });

      cclegacy._RF.push({}, "a39deAISQJIBKjDbgEfxyMR", "utils", undefined);

      function sphereDirections(count) {
        var directions = [];
        var goldenRatio = (1 + Math.sqrt(5)) / 2;
        var angleIncrement = Math.PI * 2 * goldenRatio;

        for (var i = 0; i < count; i++) {
          var t = i / count;
          var inclination = Math.acos(1 - 2 * t);
          var azimuth = angleIncrement * i;
          var x = Math.sin(inclination) * Math.cos(azimuth);
          var y = Math.sin(inclination) * Math.sin(azimuth);
          var z = Math.cos(inclination);
          var d = Pool.Vec3.get() || new Vec3();
          d.set(x, y, z);
          directions.push(d);
        }

        return directions;
      }

      var ModelSampleCount = 36;

      var _tempMin = new Vec3();

      var _tempMax = new Vec3();

      function modelPoints(models) {
        var points = [];

        for (var i = 0; i < models.length; i++) {
          var cur = models[i];
          var mat = cur.node.worldMatrix;
          cur.worldBounds.getBoundary(_tempMin, _tempMax);
          var totalVertices = 0;
          var subModels = cur.subModels;

          for (var j = 0; j < subModels.length; j++) {
            var subMesh = subModels[j].subMesh;
            var positions = subMesh.geometricInfo.positions;
            totalVertices += positions.length / 3;
          }

          if (totalVertices > ModelSampleCount) {
            for (var _i = 0; _i < ModelSampleCount; _i++) {
              var offset = HaltonUtils.instance.Generate3DRandomOffset(ModelSampleCount);
              var p = new Vec3(cur.worldBounds.halfExtents);
              p.multiplyScalar(2).multiply(offset);
              p.add(_tempMin);
              Vec3.transformMat4(p, p, mat);
              points.push(p);
            }
          } else {
            var _subModels = cur.subModels;

            for (var _j = 0; _j < _subModels.length; _j++) {
              var _subMesh = _subModels[_j].subMesh;
              var _subMesh$geometricInf = _subMesh.geometricInfo,
                  vb = _subMesh$geometricInf.positions,
                  ib = _subMesh$geometricInf.indices,
                  sides = _subMesh$geometricInf.doubleSided;

              if (_subMesh.primitiveMode === gfx.PrimitiveMode.TRIANGLE_LIST && ib && vb) {
                for (var _j2 = 0; _j2 < vb.length; _j2 += 3) {
                  var d = Pool.Vec3.get().set(vb[_j2], vb[_j2 + 1], vb[_j2 + 2]);
                  Vec3.transformMat4(d, d, mat);
                  points.push(d);
                }
              }
            }
          }
        }

        return points;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/vec2.ts", ['cc', './graph.ts'], function (exports) {
  'use strict';

  var cclegacy, liteGraph;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      liteGraph = module.liteGraph;
    }],
    execute: function () {
      exports('Vec2', Vec2);

      cclegacy._RF.push({}, "8a907f+KplNcbi/sH3WuSDF", "vec2", undefined);

      function Vec2() {
        var self = this;
        this.properties = {
          x: 1,
          y: 1
        };
        self.addWidget('number', 'x', 1, 'x');
        self.addWidget('number', 'y', 1, 'y');
        self.addOutput('Output', 'vec2');
        var output = [];

        self.onExecute = function () {
          output[0] = this.properties.x;
          output[1] = this.properties.y;
          this.setOutputData(0, output);
        };

        self.size = self.computeSize();
      }

      delete liteGraph.registered_node_types["input/Vec2"];
      liteGraph.registerNodeType("input/Vec2", Vec2);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/weapon-aim.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './math-util.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, ccenum, Quat, Vec3, view, Component, MathUtil;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ccenum = module.ccenum;
      Quat = module.Quat;
      Vec3 = module.Vec3;
      view = module.view;
      Component = module.Component;
    }, function (module) {
      MathUtil = module.default;
    }],
    execute: function () {
      exports({
        AimControls: void 0,
        AimRotateType: void 0
      });

      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "6da2brKURRDMIxhl+5NZ87v", "weapon-aim", undefined); //import  { Weapon } from './weapon';
      //import { CharacterTypes } from '../core/character';
      //import MathUtil from '../util/math-util';
      //import CinemachineCameraManager from '../cinemachine/cinemachine-camera-manager';
      //import { ColliderGroup, ControlType } from '../scene/define';
      //import { GameManager } from '../manager/game-manager';


      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          type = _decorator.type; // / the list of possible control modes

      var AimControls;

      (function (AimControls) {
        AimControls[AimControls["Auto"] = 0] = "Auto";
        AimControls[AimControls["Center"] = 1] = "Center";
        AimControls[AimControls["Mouse"] = 2] = "Mouse";
      })(AimControls || (AimControls = exports('AimControls', {})));

      ccenum(AimControls);
      var AimRotateType;

      (function (AimRotateType) {
        AimRotateType[AimRotateType["ByNone"] = 0] = "ByNone";
        AimRotateType[AimRotateType["ByCharacter"] = 1] = "ByCharacter";
        AimRotateType[AimRotateType["ByWeapon"] = 2] = "ByWeapon";
      })(AimRotateType || (AimRotateType = exports('AimRotateType', {})));

      ccenum(AimRotateType);

      var _tempQuat = new Quat();

      var _tempVec3 = new Vec3();

      var WeaponAim = exports('WeaponAim', (_dec = ccclass('WeaponAim'), _dec2 = type(AimRotateType), _dec3 = type(AimRotateType), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WeaponAim, _Component);

        function WeaponAim() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "yawRotateType", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pitchRotateType", _descriptor2, _assertThisInitialized(_this));

          _this.aimControl = AimControls.Mouse;

          _initializerDefineProperty(_this, "isAutoAim", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "pitchWhenYawInRange", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "maxPitch", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "minPitch", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "aimReadyValue", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "aimRange", _descriptor8, _assertThisInitialized(_this));

          _this.currentYaw = 0;
          _this.currentPitch = 0;
          _this._currentAim = new Vec3();
          _this._lookRotation = new Quat();
          _this.aimWasReady = false;
          _this._currentTarget = null;
          return _this;
        }

        var _proto = WeaponAim.prototype;

        _proto.start = function start() {
          this.initialization();
        };

        _proto.initialization = function initialization() {//this._weapon = this.getComponent(Weapon);
        } // Computes the current aim direction
        ;

        _proto.updateCurrentAim = function updateCurrentAim() {
          /*
             if (!this._weapon || !this._weapon.owner || this._weapon.reloading) return;
             let owner = this._weapon.owner;
             if (owner.characterType == CharacterTypes.Player && !owner.linkedInputManager) {
                 return;
             }
              let controlType = owner.controlType;
             this.mask = controlType == ControlType.TopDown ? ColliderGroup.TopDownAim : ColliderGroup.ThirdPersonAim;
          */
          switch (this.aimControl) {
            case AimControls.Center:
              this.updateCenterAim();
              break;

            case AimControls.Mouse:
              this.updateMouseAim();
              break;

            case AimControls.Auto:
              this.updateAutoAim();
              break;
          }
        };

        _proto.updateAutoAim = function updateAutoAim() {
          if (this._currentTarget) {
            this._currentTarget.getWorldPosition(this._currentAim); // debug auto target
            // gameMgr.drawNode(this._currentTarget!);


            this.calculateCurrentAim();
          } else {
            this.currentPitch = 0;
            this.aimWasReady = false;
          }
        };

        _proto.updateCenterAim = function updateCenterAim() {
          var viewport = view.getViewportRect();
          var x = viewport.width / 2;
          var y = viewport.height / 2; // get the position behind the weapon

          /*
             let success = CinemachineCameraManager.instance.getScreenPointToWorldPositionWithNodeDistance(this._currentAim, x, y, this.mask, this._weapon?.getRotatingModel() || this.node);
             if (!success) {
                 this.currentPitch = 0;
                 return;
             }
          */

          this.calculateCurrentAim();
        };

        _proto.updateMouseAim = function updateMouseAim() {
          /*
             if (!this._weapon || !this._weapon.owner || !this._weapon.owner.linkedInputManager) {
                 this.currentPitch = 0;
                 return;
             }
              let mousePosition = this._weapon.owner.linkedInputManager.secondaryLocation;
             let success = CinemachineCameraManager.instance.getScreenPointToWorldPosition(this._currentAim, mousePosition.x, mousePosition.y, this.mask);
             if (!success) {
                 this.currentPitch = 0;
                 return;
             }
          */
          this.calculateCurrentAim();
        };

        _proto.calculateCurrentAim = function calculateCurrentAim() {
          var refNode = this.node; //this._weapon?.getRotatingModel() || this.node;
          // debug aim line
          // GameManager.instance.drawLineByPos(this._currentAim, refNode.getWorldPosition());

          MathUtil.convertToNodeSpace(_tempVec3, this._currentAim, refNode);

          if (_tempVec3.length() < this.aimRange) {
            return;
          }

          _tempVec3.normalize(); // vector rotate begin from z axis to x axis angle

          /*
              z
             / \
              |
             x /____|_____
               \    |
                    |
          */


          var addYaw = MathUtil.radiansToDegrees(Math.atan2(_tempVec3.x, _tempVec3.z));
          var addPitch = -MathUtil.radiansToDegrees(Math.atan2(_tempVec3.y, _tempVec3.z));
          if (Math.abs(addYaw) > this.pitchWhenYawInRange) addPitch = 0;
          this.currentYaw = MathUtil.clampDegrees(this.currentYaw + addYaw); //if (this._weapon!.owner!.controlType == ControlType.TopDown) {
          //    this.currentPitch = 0;
          //} else {

          this.currentPitch = MathUtil.clamp(MathUtil.clampDegrees(this.currentPitch + addPitch), this.minPitch, this.maxPitch); //}

          var aimReady = this.aimReady(addYaw, addPitch);

          if (aimReady) {
            this.aimWasReady = true;
          }
        };

        _proto.aimReady = function aimReady(addYaw, addPitch) {
          return Math.abs(addYaw) < this.aimReadyValue && Math.abs(addPitch) < this.aimReadyValue;
        };

        _proto.earlyProcess = function earlyProcess(dt) {};

        _proto.process = function process(dt) {
          this.updateCurrentAim();
          this.determineWeaponRotation();
        };

        _proto.lateProcess = function lateProcess(dt) {};

        _proto.determineWeaponRotation = function determineWeaponRotation() {
          if (this.yawRotateType != AimRotateType.ByWeapon && this.pitchRotateType != AimRotateType.ByWeapon) {
            return;
          }

          var yaw = 0;
          var pitch = 0;

          if (this.yawRotateType == AimRotateType.ByWeapon) {
            yaw = this.currentYaw;
          }

          if (this.pitchRotateType == AimRotateType.ByWeapon) {
            pitch = this.currentPitch;
          }

          var node = this.node; //this._weapon?.getRotatingModel() || this.node;

          node.getRotation(_tempQuat);
          Quat.fromEuler(this._lookRotation, pitch, yaw, 0);
          Quat.multiply(this._lookRotation, _tempQuat, this._lookRotation);
          /*
             if (this._weapon) {
                 this._weapon.rotateWeapon(this._lookRotation);
             }
          */
        };

        _createClass(WeaponAim, [{
          key: "currentAim",
          get: // / the weapon's current direction
          function get() {
            return this._currentAim;
          } // / the current angle the weapon is aiming at

        }, {
          key: "currentTarget",
          set: function set(value) {
            if (value == this._currentTarget) {
              return;
            }

            this.aimWasReady = false;
            this._currentTarget = value;
          }
        }]);

        return WeaponAim;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "yawRotateType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return AimRotateType.ByCharacter;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pitchRotateType", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return AimRotateType.ByCharacter;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isAutoAim", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "pitchWhenYawInRange", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "maxPitch", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 80;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "minPitch", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -80;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "aimReadyValue", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "aimRange", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/world-cluster.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './debug.ts', './math.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec3, Vec4, geometry, director, gfx, Mat4, Color, Quat, Component, getGeometryRenderer, roundUp, vec3_min, vec3_max, vec3_floor;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Vec4 = module.Vec4;
      geometry = module.geometry;
      director = module.director;
      gfx = module.gfx;
      Mat4 = module.Mat4;
      Color = module.Color;
      Quat = module.Quat;
      Component = module.Component;
    }, function (module) {
      getGeometryRenderer = module.getGeometryRenderer;
    }, function (module) {
      roundUp = module.roundUp;
      vec3_min = module.vec3_min;
      vec3_max = module.vec3_max;
      vec3_floor = module.vec3_floor;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "79074YfIOVJoIaJ+SemjB3f", "world-cluster", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var maxTextureSize = 4096; // maximum texture size allowed to work on all devices

      var tempVec3 = new Vec3();
      var tempMin3 = new Vec3();
      var tempMax3 = new Vec3();
      var ClusterObject = exports('ClusterObject', function ClusterObject() {
        this.object = null;
        this.min = new Vec3();
        this.max = new Vec3();
        this.radius = 0;
        this.center = new Vec3();
        this.minCell = new Vec3();
        this.maxCell = new Vec3();
      });
      var WorldCluster = exports('WorldCluster', (_dec = ccclass('WorldCluster'), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WorldCluster, _Component);

        function WorldCluster() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._cellsLimit = new Vec3();

          _initializerDefineProperty(_this, "_cells", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "_maxCellObjectCount", _descriptor2, _assertThisInitialized(_this));

          _this._usedObjects = [new ClusterObject()];
          _this.dataInfoFloat = void 0;
          _this.dataInfoTextureFloat = void 0;
          _this.infoTextureInvSizeData = new Vec4();
          _this.clusterTexture = void 0;
          _this.clustersData = void 0;
          _this.clustersCounts = void 0;
          _this.clustersDistances = void 0;
          _this.clusterCellsMaxData = new Vec4();
          _this.clusterCellsDotData = new Vec4();
          _this.clusterTextureSizeData = new Vec4();
          _this.clusterCellsCountByBoundsSizeData = new Vec4();
          _this._bounds = new geometry.AABB();
          _this.boundsMin = new Vec3();
          _this.boundsMax = new Vec3();
          _this.boundsDelta = new Vec3();
          _this.maxCount = 255;
          _this.reportCount = 0;
          _this._cellsDirty = true;
          _this._pixelsPerCellCount = 0;
          _this.pixelsPerObjectFloat = 1;

          _initializerDefineProperty(_this, "renderDebug", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = WorldCluster.prototype; // 0: pos.x, pos.y, pos.z, radius
        // constructor (cells: Vec3, maxCellObjectCount: number) {
        //     this.cells = cells;
        //     this.maxCellObjectCount = maxCellObjectCount;
        // }

        _proto.getBoundingBox = function getBoundingBox(obj, clusteredObject) {};

        _proto.addObjectData = function addObjectData(obj, index) {};

        _proto.createTexture = function createTexture(width, height, format) {
          var texture = director.root.device.createTexture(new gfx.TextureInfo(gfx.TextureType.TEX2D, gfx.TextureUsageBit.SAMPLED | gfx.TextureUsageBit.TRANSFER_DST, format, width, height));
          return texture;
        };

        _proto.__preload = function __preload() {
          this.maxCellObjectCount = this.maxCellObjectCount;

          this._cellsLimit.set(this._cells).subtract(Vec3.ONE);

          this.initTexture();
        };

        _proto.initTexture = function initTexture() {
          var pixelsPerObjectFloat = this.pixelsPerObjectFloat; // float texture

          this.dataInfoFloat = new Float32Array(4 * pixelsPerObjectFloat * this.maxCount);
          this.dataInfoTextureFloat = this.createTexture(pixelsPerObjectFloat, this.maxCount, gfx.Format.RGBA32F); // inverse sizes for both textures

          this.infoTextureInvSizeData.x = 1.0 / this.dataInfoTextureFloat.width;
          this.infoTextureInvSizeData.y = 1.0 / this.dataInfoTextureFloat.height;
        };

        _proto.updateCells = function updateCells() {
          if (this._cellsDirty) {
            this._cellsDirty = false;
            var cx = this._cells.x;
            var cy = this._cells.y;
            var cz = this._cells.z; // storing 4 lights per pixels

            var numCells = cx * cy * cz;
            var totalPixels = this._pixelsPerCellCount * numCells; // cluster texture size - roughly square that fits all cells. The width is multiply of numPixels to simplify shader math

            var width = Math.ceil(Math.sqrt(totalPixels));
            width = roundUp(width, this._pixelsPerCellCount);
            var height = Math.ceil(totalPixels / width); // if the texture is allowed size

            if (width > maxTextureSize || height > maxTextureSize) {
              // #if _DEBUG
              console.error("LightCluster parameters cause the texture size to be over the limit."); // #endif
            } // maximum range of cells


            this.clusterCellsMaxData.x = cx;
            this.clusterCellsMaxData.y = cy;
            this.clusterCellsMaxData.z = cz; // vector to allow single dot product to convert from world coordinates to cluster index

            this.clusterCellsDotData.x = this._pixelsPerCellCount;
            this.clusterCellsDotData.y = cx * cz * this._pixelsPerCellCount;
            this.clusterCellsDotData.z = cx * this._pixelsPerCellCount; // cluster data and number of lights per cell

            this.clustersData = new Uint8Array(4 * width * height);
            this.clustersCounts = new Int32Array(numCells);
            this.clustersDistances = new Float32Array(4 * width * height);
            this.clusterTextureSizeData.x = width;
            this.clusterTextureSizeData.y = 1.0 / width;
            this.clusterTextureSizeData.z = 1.0 / height;

            if (this.clusterTexture) {
              this.clusterTexture.destroy();
            }

            this.clusterTexture = this.createTexture(width, height, gfx.Format.RGBA8);
          }
        };

        _proto.collectObjects = function collectObjects(objects) {
          // skip index 0 as that is used for unused light
          var usedObjects = this._usedObjects;
          var objIndex = 1;

          for (var i = 0; i < objects.length; i++) {
            // use enabled and visible lights
            var obj = objects[i]; // if (!obj.enabledInHierarchy) {
            //     continue;
            // }
            // within light limit

            if (objIndex < this.maxCount) {
              // reuse allocated spot
              var clusteredObject = void 0;

              if (objIndex < usedObjects.length) {
                clusteredObject = usedObjects[objIndex];
              } else {
                // allocate new spot
                clusteredObject = new ClusterObject();
                usedObjects.push(clusteredObject);
              } // store light properties


              clusteredObject.object = obj;
              this.getBoundingBox(obj, clusteredObject);
              objIndex++;
            } else {
              console.warn("Clustered lighting: more than " + (this.maxCount - 1) + " lights in the frame, ignoring some.");
              break;
            }
          }

          usedObjects.length = objIndex;
        } // evaluate the area all lights cover
        ;

        _proto.evaluateBounds = function evaluateBounds() {
          var usedObjects = this._usedObjects; // bounds of the area the lights cover

          var min = this.boundsMin;
          var max = this.boundsMax; // if at least one light (index 0 is null, so ignore that one)

          if (usedObjects.length > 1) {
            // AABB of the first light
            Vec3.copy(min, usedObjects[1].min);
            Vec3.copy(max, usedObjects[1].max);

            for (var i = 2; i < usedObjects.length; i++) {
              // expand by AABB of this light
              vec3_min(min, min, usedObjects[i].min);
              vec3_max(max, max, usedObjects[i].max);
            }
          } else {
            // any small volume if no lights
            min.set(0, 0, 0);
            max.set(1, 1, 1);
          } // bounds range


          Vec3.subtract(this.boundsDelta, max, min);
          var boundsDelta = this.boundsDelta;
          this.clusterCellsCountByBoundsSizeData.x = this._cells.x / boundsDelta.x;
          this.clusterCellsCountByBoundsSizeData.y = this._cells.y / boundsDelta.y;
          this.clusterCellsCountByBoundsSizeData.z = this._cells.z / boundsDelta.z;
          this.clusterCellsCountByBoundsSizeData.w = this._pixelsPerCellCount;

          if (usedObjects.length > 1) {
            for (var _i = 0; _i < usedObjects.length; _i++) {
              var clusteredObject = usedObjects[_i];
              this.evalCellMinMax(clusteredObject, clusteredObject.minCell, clusteredObject.maxCell);
            }
          }
        } // evaluates min and max coordinates of AABB of the object in the cell space
        ;

        _proto.evalCellMinMax = function evalCellMinMax(clusteredObject, min, max) {
          // min point of AABB in cell space
          min.set(clusteredObject.min);
          min.subtract(this.boundsMin);
          min.divide(this.boundsDelta);
          min.multiply(this._cells);
          vec3_floor(min, min); // max point of AABB in cell space

          max.set(clusteredObject.max);
          max.subtract(this.boundsMin);
          max.divide(this.boundsDelta);
          max.multiply(this._cells);
          vec3_floor(max, max); // clamp to limits

          vec3_max(min, min, Vec3.ZERO);
          vec3_min(max, max, this._cellsLimit);
        };

        _proto.updateClusters = function updateClusters() {
          // clear clusters
          this.clustersCounts.fill(0);
          this.clustersData.fill(0);
          this.clustersDistances.fill(Infinity); // local accessors

          var divX = this._cells.x;
          var divY = this._cells.y;
          var divZ = this._cells.z;
          var counts = this.clustersCounts;
          var distances = this.clustersDistances;
          var limit = this._maxCellObjectCount;
          var clusters = this.clustersData;
          var pixelsPerCellCount = this._pixelsPerCellCount;
          var usedObjects = this._usedObjects; // started from index 1, zero is "no-light" index

          for (var i = 1; i < usedObjects.length; i++) {
            var clusteredObject = usedObjects[i];
            var object = clusteredObject.object; // add light data into textures

            if (object) {
              this.addObjectData(object, i);
            }
          }

          var center = new Vec3();
          var filterObjects = [];

          var sort = function sort(a, b) {
            var da = Vec3.distance(a.center, center);
            var db = Vec3.distance(b.center, center);
            return da - db;
          };

          for (var y = 0; y < divY; y++) {
            for (var z = 0; z < divZ; z++) {
              for (var x = 0; x < divX; x++) {
                filterObjects.length = 0;

                for (var _i2 = 1; _i2 < usedObjects.length; _i2++) {
                  var _clusteredObject = usedObjects[_i2];

                  if (_clusteredObject.minCell.x > x || _clusteredObject.minCell.y > y || _clusteredObject.minCell.z > z || _clusteredObject.maxCell.x < x || _clusteredObject.maxCell.y < y || _clusteredObject.maxCell.z < z) {
                    continue;
                  }

                  filterObjects.push(_clusteredObject);
                }

                center.set(this.boundsDelta).multiply3f((x + 0.5) / divX, (y + 0.5) / divY, (z + 0.5) / divZ).add(this.boundsMin);
                filterObjects.sort(sort);
                var clusterIndex = x + divX * (z + y * divZ);
                var count = counts[clusterIndex];

                for (var _i3 = 0; _i3 < filterObjects.length; _i3++) {
                  var _clusteredObject2 = filterObjects[_i3];

                  if (count < limit) {
                    clusters[pixelsPerCellCount * clusterIndex * 4 + count] = usedObjects.indexOf(_clusteredObject2);
                    counts[clusterIndex] = ++count;
                  }
                }
              }
            }
          }
        };

        _proto.findObjects = function findObjects() {
          return [];
        };

        _proto.update = function update(dt) {
          var objects = this.findObjects();
          this.collectObjects(objects);
          this.evaluateBounds();
          this.updateCells();
          this.updateClusters();
          this.uploadTextures();
          this.drawDebug();
        };

        _proto.uploadTextures = function uploadTextures() {
          var device = director.root.device;
          var clusterTexture = this.clusterTexture;
          var clustersData = this.clustersData;

          if (clusterTexture && clustersData) {
            var region = new gfx.BufferTextureCopy(undefined, undefined, clusterTexture.height, undefined, new gfx.Extent(clusterTexture.width, clusterTexture.height));
            device.copyBuffersToTexture([clustersData], clusterTexture, [region]);
          }

          var dataInfoFloat = this.dataInfoFloat;
          var dataInfoTextureFloat = this.dataInfoTextureFloat;

          if (dataInfoFloat && dataInfoTextureFloat) {
            var _region = new gfx.BufferTextureCopy(undefined, undefined, dataInfoTextureFloat.height, undefined, new gfx.Extent(dataInfoTextureFloat.width, dataInfoTextureFloat.height));

            device.copyBuffersToTexture([dataInfoFloat], dataInfoTextureFloat, [_region]);
          }
        };

        _proto.onDestroy = function onDestroy() {
          var _this$clusterTexture, _this$dataInfoTexture;

          (_this$clusterTexture = this.clusterTexture) == null ? void 0 : _this$clusterTexture.destroy();
          (_this$dataInfoTexture = this.dataInfoTextureFloat) == null ? void 0 : _this$dataInfoTexture.destroy();
        };

        _proto.drawDebug = function drawDebug() {
          if (!this.renderDebug) {
            return;
          }

          var geometryRenderer = getGeometryRenderer();

          if (!geometryRenderer) {
            return;
          }

          this.drawCluster(geometryRenderer); // this.drawObjects()
        };

        _proto.drawCluster = function drawCluster(geometryRenderer) {
          var cells = this.cells;
          tempVec3.set(this.boundsDelta).divide(cells);
          var xStep = tempVec3.x;
          var yStep = tempVec3.y;
          var zStep = tempVec3.z;
          var tempMatrix = new Mat4();
          var identityAABB = new geometry.AABB(0, 0, 0, 0.5, 0.5, 0.5);
          var areaColor = new Color(255, 255, 255, 50);
          var start = new Vec3(0, 0, 0);
          var end = cells;

          for (var x = start.x; x < end.x; x++) {
            for (var y = start.y; y < end.y; y++) {
              for (var z = start.z; z < end.z; z++) {
                tempMin3.set(this.boundsMin).add3f(xStep * (x + 0.5), yStep * (y + 0.5), zStep * (z + 0.5));
                tempVec3.set(xStep, yStep, zStep);
                tempMatrix.fromRTS(Quat.IDENTITY, tempMin3, tempVec3);
                geometryRenderer.addBoundingBox(identityAABB, areaColor, false, false, undefined, true, tempMatrix); // drawer.color.set(255, 255, 255, 255);
                // // tempVec3.set(100, 100, 100)
                // drawer.matrix.fromRTS(Quat.IDENTITY as Quat, tempMin3 as Vec3, Vec3.ONE);
                // drawer.type = DrawType.Solid;
                // drawer.text(`${x}_${y}_${z}`)
                // tempMin3.y += 1;
                // drawer.matrix.fromRTS(Quat.IDENTITY as Quat, tempMin3 as Vec3, Vec3.ONE);
                // const clusterIndex = x + this._cells.x * (z + y * this._cells.z);
                // let count = this.clustersCounts![clusterIndex]
                // let info = `${count}:`
                // for (let i = 0; i < count; i++) {
                //     info += '_' + this.clustersData![this._pixelsPerCellCount * clusterIndex * 4 + i]
                // }
                // drawer.text(info)
              }
            }
          }
        } // drawObjects () {
        //     let objs = this._usedObjects;
        //     const drawer = this._drawer!;
        //     drawer.color.set(255, 0, 0, 50);
        //     drawer.frameWireColor.set(255, 0, 0, 100);
        //     drawer.type = DrawType.FrameWire | DrawType.Solid;
        //     objs.forEach(obj => {
        //         tempVec3.set(obj.radius, obj.radius, obj.radius);
        //         drawer.matrix.fromRTS(Quat.IDENTITY as Quat, obj.center, tempVec3);
        //         drawer.sphere();
        //     })
        // }
        ;

        _createClass(WorldCluster, [{
          key: "cells",
          get: function get() {
            return this._cells;
          },
          set: function set(value) {
            // make sure we have whole numbers
            tempVec3.set(value);
            vec3_floor(tempVec3, tempVec3);

            if (!this._cells.equals(tempVec3)) {
              this._cells.set(tempVec3);

              this._cellsLimit.set(tempVec3).subtract(Vec3.ONE);

              this._cellsDirty = true;
            }
          }
        }, {
          key: "maxCellObjectCount",
          get: function get() {
            return this._maxCellObjectCount;
          },
          set: function set(count) {
            // each cell stores 4 lights (xyzw), so round up the count
            var maxCellObjectCount = roundUp(count, 4);
            this._maxCellObjectCount = count;
            this._pixelsPerCellCount = maxCellObjectCount / 4;
            this._cellsDirty = true;
          }
        }]);

        return WorldCluster;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_cells", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(12, 12, 12);
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "cells", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "cells"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_maxCellObjectCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "maxCellObjectCount", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "maxCellObjectCount"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "renderDebug", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/zoom-screen-stage.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './base-stage.ts', './utils2.ts', './pass-utils.ts', './href-setting.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, rendering, gfx, Vec2, Vec4, input, Input, game, renderer, BaseStage, getCameraUniqueID, passUtils, HrefSetting;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      rendering = module.rendering;
      gfx = module.gfx;
      Vec2 = module.Vec2;
      Vec4 = module.Vec4;
      input = module.input;
      Input = module.Input;
      game = module.game;
      renderer = module.renderer;
    }, function (module) {
      BaseStage = module.BaseStage;
    }, function (module) {
      getCameraUniqueID = module.getCameraUniqueID;
    }, function (module) {
      passUtils = module.passUtils;
    }, function (module) {
      HrefSetting = module.HrefSetting;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "dcc2fkeM/BDloecRxD/MQCv", "zoom-screen-stage", undefined);

      var type = _decorator.type,
          property = _decorator.property,
          ccclass = _decorator.ccclass;
      var RasterView = rendering.RasterView,
          AttachmentType = rendering.AttachmentType,
          AccessType = rendering.AccessType,
          ResourceResidency = rendering.ResourceResidency,
          LightInfo = rendering.LightInfo,
          SceneFlags = rendering.SceneFlags,
          QueueHint = rendering.QueueHint,
          ComputeView = rendering.ComputeView;
      var Format = gfx.Format,
          LoadOp = gfx.LoadOp,
          StoreOp = gfx.StoreOp,
          ClearFlagBit = gfx.ClearFlagBit,
          Color = gfx.Color,
          Viewport = gfx.Viewport;
      var pointSampler = new gfx.Sampler(new gfx.SamplerInfo(gfx.Filter.POINT, gfx.Filter.POINT), 0);
      pointSampler.custom = true;
      var ZoomScreenStage = exports('ZoomScreenStage', (_dec = ccclass('ZoomScreenStage'), _dec2 = property({
        override: true
      }), _dec3 = property({
        override: true
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseStage) {
        _inheritsLoose(ZoomScreenStage, _BaseStage);

        function ZoomScreenStage() {
          var _this;

          _this = _BaseStage.call(this) || this;
          _this._materialName = 'zoom-screen';
          _this.materialMap = new Map();
          _this.uniqueStage = true;

          _initializerDefineProperty(_this, "name", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "outputNames", _descriptor2, _assertThisInitialized(_this));

          _this._scale = 1;
          _this._offset = new Vec2();
          _this.screenParams = new Vec4();
          _this.touchPos = new Vec2();
          _this.lastTouchDist = 0;
          _this.pressed = false;
          {
            input.on(Input.EventType.MOUSE_WHEEL, _this.onMouseWheel, _assertThisInitialized(_this));
            input.on(Input.EventType.TOUCH_START, _this.onTouchDown, _assertThisInitialized(_this));
            input.on(Input.EventType.TOUCH_MOVE, _this.onTouchMove, _assertThisInitialized(_this));
            input.on(Input.EventType.TOUCH_END, _this.onTouchUp, _assertThisInitialized(_this));
          }
          return _this;
        }

        var _proto = ZoomScreenStage.prototype;

        _proto.destroy = function destroy() {
          {
            input.off(Input.EventType.MOUSE_WHEEL, this.onMouseWheel, this);
            input.off(Input.EventType.TOUCH_START, this.onTouchDown, this);
            input.off(Input.EventType.TOUCH_MOVE, this.onTouchMove, this);
            input.off(Input.EventType.TOUCH_END, this.onTouchUp, this);
          }
        };

        _proto.reset = function reset() {
          this.updateMousePosition();
          this.updateScale();
        };

        _proto.checkEnable = function checkEnable() {
          return _BaseStage.prototype.checkEnable.call(this) && !!HrefSetting.zoomScreen;
        };

        _proto.onTouchDown = function onTouchDown(event) {
          event.propagationStopped = true; // let touches = event.getAllTouches();
          // if (touches.length >= 2) {
          //     let p0 = touches[0].getLocation();
          //     let p1 = touches[1].getLocation();
          //     this.lastTouchDist = Vec2.distance(p0, p1)
          // }

          this.lastTouchDist = 0;
          this.pressed = true;
          this.updateMousePosition(event);
        };

        _proto.onTouchMove = function onTouchMove(event) {
          // let touches = event.getAllTouches();
          // if (touches.length >= 2) {
          //     let p0 = touches[0].getLocation();
          //     let p1 = touches[1].getLocation();
          //     let dist = Vec2.distance(p0, p1)
          //     vec2_temp.set(p0)
          //     vec2_temp.subtract(p1).multiplyScalar(0.5).add(p1);
          //     let dif = dist - this.lastTouchDist
          //     this.lastTouchDist = dist;
          //     this.updateScale(vec2_temp, dif / 100.);
          // }
          event.propagationStopped = true;

          if (this.pressed) {
            this.updateMousePosition(event);
            this._offset.x -= event.getDeltaX() / game.canvas.width * this._scale;
            this._offset.y -= event.getDeltaY() / game.canvas.width * this._scale;
          }
        };

        _proto.onTouchUp = function onTouchUp(event) {
          event.propagationStopped = true;
          this.pressed = false;
        };

        _proto.updateMousePosition = function updateMousePosition(event) {
          var x = 0,
              y = 0;

          if (event) {
            x = event.getLocationX() / game.canvas.width;
            y = event.getLocationY() / game.canvas.height;
          }

          this.touchPos.set(x, y);
        };

        _proto.onMouseWheel = function onMouseWheel(event) {
          event.propagationStopped = true;

          if (event) {
            var scrollY = event.getScrollY();
            var scaleOffset = 0.1 * -Math.sign(scrollY) * this._scale;
            this.updateScale(event.getLocation(), scaleOffset);
          } else {
            this._scale = 1;

            this._offset.set(0, 0);
          }
        };

        _proto.updateScale = function updateScale(center, scaleOffset) {
          if (scaleOffset === void 0) {
            scaleOffset = 0;
          }

          if (center) {
            this._scale += scaleOffset;
            this._scale = Math.max(0, this._scale);
            center.x /= game.canvas.width;
            center.y /= game.canvas.height;
            this._offset.x -= center.x * scaleOffset;
            this._offset.y -= center.y * scaleOffset;
          } else {
            this._scale = 1;

            this._offset.set(0, 0);
          }
        };

        _proto.render = function render(camera, ppl) {
          var cameraID = getCameraUniqueID(camera);
          var area = this.getRenderArea(camera);
          var inputWidth = area.width;
          var inputHeight = area.height;
          var shadingScale = this.finalShadingScale();
          var outWidth = Math.floor(inputWidth / shadingScale);
          var outHeight = Math.floor(inputHeight / shadingScale);
          passUtils.clearFlag = gfx.ClearFlagBit.COLOR;
          Vec4.set(passUtils.clearColor, 0, 0, 0, 1);
          var material = this.materialMap.get(camera);

          if (!material || material.parent !== this.material) {
            material = new renderer.MaterialInstance({
              parent: this.material
            });
            this.materialMap.set(camera, material);
          }

          material.setProperty('screenParams', this.screenParams.set(this._scale, this._scale, this._offset.x, this._offset.y));
          var pass = material.passes[0];
          pass.bindSampler(pass.getBinding('outputResultMap'), pointSampler);
          passUtils.material = material;
          var input0 = this.lastStage.slotName(camera, 0);
          var slot0 = this.slotName(camera, 0);
          passUtils.addRasterPass(outWidth, outHeight, 'post-process', "Camera_DebugScreen_Pass" + cameraID); // let setter = (passUtils.pass as any);
          // setter.setSampler('outputResultMap', director.root.pipeline.globalDSManager.pointSampler);

          passUtils.setViewport(area.x, area.y, outWidth, outHeight).setPassInput(input0, 'outputResultMap').addRasterView(slot0, Format.RGBA16F).blitScreen(0).version();
        };

        return ZoomScreenStage;
      }(BaseStage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "name", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'ZoomScreenStage';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "outputNames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return ['ZoomScreenColor'];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

//# sourceMappingURL=index.js.map